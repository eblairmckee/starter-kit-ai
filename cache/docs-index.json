{
  "pages": [
    {
      "id": "index",
      "url": "https://redpanda-ui-registry.netlify.app/docs",
      "title": "Introduction",
      "content": "IntroductionUse Redpanda UI components to build your pages.Edit on GitHubNote: This documentation is powered by Fumadocs and was heavily inspired by Animate UI.\nRedpanda UI is a set of React components built with Tailwind CSS, and Motion, designed to create fluid and engaging user interfaces. Inspired by shadcn/ui and Magic UI, Redpanda UI aims to complement these projects by offering a broad range of animated components that are easy to integrate and extend.\nIt contains references to other custom registries such as Animate UI.\nOur goal is to continuously grow this collection so that React developers can quickly assemble modern, dynamic interfaces for their applications.\nNot a Standard Library, but a Distribution of Components\nIn the same spirit as shadcn/ui, Redpanda UI is not a typical “install-from-NPM” library. Instead, we provide a distribution of open-source components that you can copy, modify, and customize according to your needs. This “open code” approach grants you maximum flexibility without having to rely on complex workarounds for styling or business logic adjustments.\nHow is this different from the old component library Redpanda has?\n\n\nWorks well with LLMs: By offering direct access to the source code, LLM can edit each component at its core to fit your unique design system and requirements.\n\n\nComplementary to Magic UI, Animate UI and shadcn/ui: Redpanda UI is designed to complement Magic UI, Animate UI and shadcn/ui by offering a broad range of animated components that are easy to integrate and extend.\n\n\nBuilt with Tailwind CSS and Motion: Redpanda UI is built with Tailwind CSS and Motion, so you can easily integrate it with your existing projects.\n\n\nEasy to change theme: Tweakcn, Styleglide.ai or their derivatives can also be used to modify the theme of Redpanda UI easily.\n\n\nNo longer tied to legacy tech stack: Redpanda UI does not use CSS-in-JS solutions like Chakra, which leads to a decreased bundle size, easier maintenance and simpler integration with AI overall.\n\n\nPlug and play with other directories: The entire ecosystem around Tailwind/Shadcn enables building on top of existing components, such as ShadcnBlocks, AceternityUI, Shadcn Form, 21st.dev, Enhanced button, Modals, Drawers\n\n\nSafe to use for private repositories: Fully compatible with Zeta authentication solutions, if we choose to do so in the future.\n\n\nFigma design system as source of truth: A lot of Figma docs available, such as UIPub or SilkHQ.\n\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Introduction\n\nUse Redpanda UI components to build your pages.\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/index.mdx)\n\n**Note:** This documentation is powered by [Fumadocs](https://fumadocs.dev/) and was heavily inspired by [Animate UI](https://redpanda-ui-registry.netlify.app/).\n\n**Redpanda UI is a set of React components** built with [Tailwind CSS](https://tailwindcss.com/), and [Motion](https://motion.dev/), designed to create fluid and engaging user interfaces. Inspired by [shadcn/ui](https://ui.shadcn.com/) and [Magic UI](https://magicui.design/), Redpanda UI aims to complement these projects by offering a broad range of **animated components** that are easy to integrate and extend. It contains references to other custom registries such as [Animate UI](https://redpanda-ui-registry.netlify.app/).\n\nOur goal is to continuously grow this collection so that React developers can quickly assemble modern, dynamic interfaces for their applications.\n\n## Not a Standard Library, but a Distribution of Components\n\nIn the same spirit as [shadcn/ui](https://ui.shadcn.com/), **Redpanda UI is not a typical “install-from-NPM” library**. Instead, we provide a **distribution of open-source components that you can copy, modify, and customize** according to your needs. This “open code” approach grants you maximum flexibility without having to rely on complex workarounds for styling or business logic adjustments.\n\n## How is this different from the [old component library](https://redpanda-ui.netlify.app/) Redpanda has?\n\n1.  **Works well with LLMs**: By offering direct access to the source code, LLM can **edit each component at its core** to fit your unique design system and requirements.\n    \n2.  **Complementary to Magic UI, Animate UI and shadcn/ui**: Redpanda UI is designed to complement [Magic UI](https://magicui.design/), [Animate UI](https://redpanda-ui-registry.netlify.app/) and [shadcn/ui](https://ui.shadcn.com/) by offering a broad range of animated components that are easy to integrate and extend.\n    \n3.  **Built with Tailwind CSS and Motion**: Redpanda UI is built with [Tailwind CSS](https://tailwindcss.com/) and [Motion](https://motion.dev/), so you can easily integrate it with your existing projects.\n    \n4.  **Easy to change theme**: [Tweakcn](https://tweakcn.com/), [Styleglide.ai](https://www.styleglide.ai/themes) or their derivatives can also be used to modify the theme of Redpanda UI easily.\n    \n5.  **No longer tied to legacy tech stack**: Redpanda UI does not use CSS-in-JS solutions like [Chakra](https://v2.chakra-ui.com/), which leads to a decreased bundle size, easier maintenance and simpler integration with AI overall.\n    \n6.  **Plug and play with other directories**: The entire ecosystem around Tailwind/Shadcn enables building on top of existing components, such as [ShadcnBlocks](https://www.shadcnblocks.com/), [AceternityUI](https://ui.aceternity.com/), [Shadcn Form](https://www.shadcn-form.com/), [21st.dev](https://21st.dev/?tab=home), [Enhanced button](http://enhanced-button.vercel.app), [Modals](http://credenza.rdev.pro), [Drawers](vaul.emilkowal.ski)\n    \n7.  **Safe to use for private repositories**: Fully compatible with [Zeta](https://zeta-registry.vercel.app/) authentication solutions, if we choose to do so in the future.\n    \n8.  **Figma design system as source of truth**: A lot of Figma docs available, such as [UIPub](https://uipub.com/) or [SilkHQ](https://silkhq.co/access).\n    \n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:17.995Z",
      "isComponent": false,
      "isBlock": false
    },
    {
      "id": "-accordion",
      "url": "https://redpanda-ui-registry.netlify.app/docs/accordion",
      "title": "Accordion",
      "content": "AccordionA vertically stacked set of interactive headings that each reveal an associated section of content.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UILucideMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nBasic Example\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@/components/redpanda-ui/accordion'\n\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>What is Redpanda?</AccordionTrigger>\n    <AccordionContent>\n      Redpanda is a streaming data platform that is Kafka-compatible but simpler to operate and 10x faster.\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"item-2\">\n    <AccordionTrigger>How does it work?</AccordionTrigger>\n    <AccordionContent>\n      Redpanda is built from the ground up in C++ and designed to be simple, powerful, and cost-efficient.\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"item-3\">\n    <AccordionTrigger>Is it production ready?</AccordionTrigger>\n    <AccordionContent>\n      Yes, Redpanda is production-ready and used by hundreds of companies worldwide.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\nMultiple Items Open\n<Accordion type=\"multiple\">\n  <AccordionItem value=\"features\">\n    <AccordionTrigger>Features</AccordionTrigger>\n    <AccordionContent>\n      <ul className=\"list-disc pl-6 space-y-1\">\n        <li>Kafka API compatible</li>\n        <li>10x faster performance</li>\n        <li>Built-in schema registry</li>\n        <li>Tiered storage support</li>\n      </ul>\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"pricing\">\n    <AccordionTrigger>Pricing</AccordionTrigger>\n    <AccordionContent>\n      Redpanda offers both open source and cloud options with flexible pricing models.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\nCustom Animation\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"animated\">\n    <AccordionTrigger \n      transition={{ type: 'spring', stiffness: 200, damping: 25 }}\n    >\n      Custom Animation\n    </AccordionTrigger>\n    <AccordionContent \n      transition={{ type: 'spring', stiffness: 180, damping: 20 }}\n    >\n      This accordion uses custom spring animation settings for smoother transitions.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\nWithout Chevron\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"no-chevron\">\n    <AccordionTrigger chevron={false}>\n      No Chevron Icon\n    </AccordionTrigger>\n    <AccordionContent>\n      This accordion item doesn't display the chevron indicator.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\nWhen to use\nUse an accordion when you need to display a large amount of content in a compact, organized way. This component is ideal for:\n\nUse Accordion when:\n\nYou have FAQ sections or help documentation\nContent can be grouped into clear, discrete sections\nScreen space is limited and you need to show/hide content\nUsers typically need to focus on one section at a time\nYou want to provide an overview with expandable details\n\nDon't use Accordion when:\n\nUsers need to compare content across sections simultaneously\nThe content sections are very short (use a simple list instead)\nNavigation between sections is the primary goal (use Tabs instead)\nThe content doesn't have a natural hierarchical structure\n\nAnatomy\nThe Accordion component consists of several parts working together:\nAccordion Container\n┌─────────────────────────────────────────────────┐\n│ AccordionItem (value=\"item-1\")                  │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ AccordionHeader                             │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ AccordionTrigger (clickable)            │ │ │\n│ │ │ [Text Content] [ChevronDown Icon] ────┐ │ │ │\n│ │ └─────────────────────────────────────────┘ │ │ │\n│ └─────────────────────────────────────────────┘ │ │\n│ ┌─────────────────────────────────────────────┐ │ │\n│ │ AccordionContent (animated)                 │ │ │\n│ │ [Expandable content with mask animation]    │ │ │\n│ └─────────────────────────────────────────────┘ │ │\n├─────────────────────────────────────────────────┤ │\n│ AccordionItem (value=\"item-2\")                  │ │\n│ [Similar structure repeats...]                  │ │\n└─────────────────────────────────────────────────┘ │\n                                                    │\nContext Flow:                                       │\nAccordionItemContext ──────────────────────────────┘\n├── isOpen: boolean\n└── setIsOpen: (open: boolean) => void\nComponent Hierarchy:\n\nAccordion (Root): Manages overall state and behavior (single vs multiple)\nAccordionItem: Individual accordion section with unique value\nAccordionHeader: Contains the clickable trigger (automatically included)\nAccordionTrigger: Clickable element that toggles the content visibility\nAccordionContent: Expandable content area with smooth animations\n\nKey Interactions:\n\nState Management: Each AccordionItem tracks its open/closed state via context\nAnimation: Motion components provide smooth height and opacity transitions\nAccessibility: Built on Radix UI primitives for keyboard navigation and screen readers\nChevron Animation: Icon rotates 180° when content expands using Motion\n\nProps\nDocsAPI Reference\nAnimate UI Props\nAccordionTrigger\nPropTypeDefaulttransition?Transition{ type: 'spring', stiffness: 150, damping: 17 }chevron?booleantrue\nAccordionContent\nPropTypeDefaulttransition?Transition{ type: 'spring', stiffness: 150, damping: 22 }\nDon't delete from the DOM\nThe choice made is the same as Radix UI, i.e. to remove the element from the DOM for accessibility and performance reasons. However, this may pose a problem for SEO. If you want your Accordion content to be taken into account by Google, please replace the AccordionContent component with:\ncomponents/redpanda-ui/accordion.tsxfunction AccordionContent({\n  className,\n  children,\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  ...props\n}: AccordionContentProps) {\n  const { isOpen } = useAccordionItem();\n\n  return (\n    <AccordionPrimitive.Content forceMount {...props}>\n      <motion.div\n        key=\"accordion-content\"\n        initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n        animate={\n          isOpen\n            ? { height: 'auto', opacity: 1, '--mask-stop': '100%' }\n            : { height: 0, opacity: 0, '--mask-stop': '0%' }\n        }\n        transition={transition}\n        style={{\n          maskImage:\n            'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n          WebkitMaskImage:\n            'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n        }}\n        className=\"overflow-hidden\"\n        ref={ref}\n      >\n        <div className={cn('pb-4 pt-0 text-sm', className)}>{children}</div>\n      </motion.div>\n    </AccordionPrimitive.Content>\n  );\n}\nCredits\n\nWe use Radix UI for the accordion component.\nWe take our inspiration from Shadcn UI for the accordion style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Accordion\n\nA vertically stacked set of interactive headings that each reveal an associated section of content.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/accordion.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/accordion)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/accordion)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/radix/accordion)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/accordion-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n### Basic Example\n\n```\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@/components/redpanda-ui/accordion'\n\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>What is Redpanda?</AccordionTrigger>\n    <AccordionContent>\n      Redpanda is a streaming data platform that is Kafka-compatible but simpler to operate and 10x faster.\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"item-2\">\n    <AccordionTrigger>How does it work?</AccordionTrigger>\n    <AccordionContent>\n      Redpanda is built from the ground up in C++ and designed to be simple, powerful, and cost-efficient.\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"item-3\">\n    <AccordionTrigger>Is it production ready?</AccordionTrigger>\n    <AccordionContent>\n      Yes, Redpanda is production-ready and used by hundreds of companies worldwide.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n### Multiple Items Open\n\n```\n<Accordion type=\"multiple\">\n  <AccordionItem value=\"features\">\n    <AccordionTrigger>Features</AccordionTrigger>\n    <AccordionContent>\n      <ul className=\"list-disc pl-6 space-y-1\">\n        <li>Kafka API compatible</li>\n        <li>10x faster performance</li>\n        <li>Built-in schema registry</li>\n        <li>Tiered storage support</li>\n      </ul>\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"pricing\">\n    <AccordionTrigger>Pricing</AccordionTrigger>\n    <AccordionContent>\n      Redpanda offers both open source and cloud options with flexible pricing models.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n### Custom Animation\n\n```\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"animated\">\n    <AccordionTrigger \n      transition={{ type: 'spring', stiffness: 200, damping: 25 }}\n    >\n      Custom Animation\n    </AccordionTrigger>\n    <AccordionContent \n      transition={{ type: 'spring', stiffness: 180, damping: 20 }}\n    >\n      This accordion uses custom spring animation settings for smoother transitions.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n### Without Chevron\n\n```\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"no-chevron\">\n    <AccordionTrigger chevron={false}>\n      No Chevron Icon\n    </AccordionTrigger>\n    <AccordionContent>\n      This accordion item doesn't display the chevron indicator.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n## When to use\n\nUse an accordion when you need to display a large amount of content in a compact, organized way. This component is ideal for:\n\n**Use Accordion when:**\n\n*   You have FAQ sections or help documentation\n*   Content can be grouped into clear, discrete sections\n*   Screen space is limited and you need to show/hide content\n*   Users typically need to focus on one section at a time\n*   You want to provide an overview with expandable details\n\n**Don't use Accordion when:**\n\n*   Users need to compare content across sections simultaneously\n*   The content sections are very short (use a simple list instead)\n*   Navigation between sections is the primary goal (use Tabs instead)\n*   The content doesn't have a natural hierarchical structure\n\n## Anatomy\n\nThe Accordion component consists of several parts working together:\n\n```\nAccordion Container\n┌─────────────────────────────────────────────────┐\n│ AccordionItem (value=\"item-1\")                  │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ AccordionHeader                             │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ AccordionTrigger (clickable)            │ │ │\n│ │ │ [Text Content] [ChevronDown Icon] ────┐ │ │ │\n│ │ └─────────────────────────────────────────┘ │ │ │\n│ └─────────────────────────────────────────────┘ │ │\n│ ┌─────────────────────────────────────────────┐ │ │\n│ │ AccordionContent (animated)                 │ │ │\n│ │ [Expandable content with mask animation]    │ │ │\n│ └─────────────────────────────────────────────┘ │ │\n├─────────────────────────────────────────────────┤ │\n│ AccordionItem (value=\"item-2\")                  │ │\n│ [Similar structure repeats...]                  │ │\n└─────────────────────────────────────────────────┘ │\n                                                    │\nContext Flow:                                       │\nAccordionItemContext ──────────────────────────────┘\n├── isOpen: boolean\n└── setIsOpen: (open: boolean) => void\n```\n\n**Component Hierarchy:**\n\n1.  **Accordion** (Root): Manages overall state and behavior (single vs multiple)\n2.  **AccordionItem**: Individual accordion section with unique value\n3.  **AccordionHeader**: Contains the clickable trigger (automatically included)\n4.  **AccordionTrigger**: Clickable element that toggles the content visibility\n5.  **AccordionContent**: Expandable content area with smooth animations\n\n**Key Interactions:**\n\n*   **State Management**: Each AccordionItem tracks its open/closed state via context\n*   **Animation**: Motion components provide smooth height and opacity transitions\n*   **Accessibility**: Built on Radix UI primitives for keyboard navigation and screen readers\n*   **Chevron Animation**: Icon rotates 180° when content expands using Motion\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/accordion)[API Reference](https://www.radix-ui.com/primitives/docs/components/accordion#api-reference)\n\n### Animate UI Props\n\n#### AccordionTrigger\n\nProp\n\nType\n\nDefault\n\n`transition?`\n\n`Transition`\n\n`{ type: 'spring', stiffness: 150, damping: 17 }`\n\n`chevron?`\n\n`boolean`\n\n`true`\n\n#### AccordionContent\n\nProp\n\nType\n\nDefault\n\n`transition?`\n\n`Transition`\n\n`{ type: 'spring', stiffness: 150, damping: 22 }`\n\n## Don't delete from the DOM\n\nThe choice made is the same as Radix UI, i.e. to remove the element from the DOM for accessibility and performance reasons. However, this may pose a problem for SEO. If you want your Accordion content to be taken into account by Google, please **replace the AccordionContent component with**:\n\ncomponents/redpanda-ui/accordion.tsx\n\n```\nfunction AccordionContent({\n  className,\n  children,\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  ...props\n}: AccordionContentProps) {\n  const { isOpen } = useAccordionItem();\n\n  return (\n    <AccordionPrimitive.Content forceMount {...props}>\n      <motion.div\n        key=\"accordion-content\"\n        initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n        animate={\n          isOpen\n            ? { height: 'auto', opacity: 1, '--mask-stop': '100%' }\n            : { height: 0, opacity: 0, '--mask-stop': '0%' }\n        }\n        transition={transition}\n        style={{\n          maskImage:\n            'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n          WebkitMaskImage:\n            'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n        }}\n        className=\"overflow-hidden\"\n        ref={ref}\n      >\n        <div className={cn('pb-4 pt-0 text-sm', className)}>{children}</div>\n      </motion.div>\n    </AccordionPrimitive.Content>\n  );\n}\n```\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/accordion) for the accordion component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/accordion) for the accordion style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:20.958Z",
      "componentName": "accordion",
      "demoCode": "import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@/components/redpanda-ui/accordion'\n\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>What is Redpanda?</AccordionTrigger>\n    <AccordionContent>\n      Redpanda is a streaming data platform that is Kafka-compatible but simpler to operate and 10x faster.\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"item-2\">\n    <AccordionTrigger>How does it work?</AccordionTrigger>\n    <AccordionContent>\n      Redpanda is built from the ground up in C++ and designed to be simple, powerful, and cost-efficient.\n    </AccordionContent>\n  </AccordionItem>\n  <AccordionItem value=\"item-3\">\n    <AccordionTrigger>Is it production ready?</AccordionTrigger>\n    <AccordionContent>\n      Yes, Redpanda is production-ready and used by hundreds of companies worldwide.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>",
      "metadata": {
        "description": "A vertically stacked set of interactive headings that each reveal an associated section of content.",
        "dependencies": [
          "@/components/redpanda-ui/accordion"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-alert-dialog",
      "url": "https://redpanda-ui-registry.netlify.app/docs/alert-dialog",
      "title": "Alert Dialog",
      "content": "Alert DialogA modal dialog that interrupts the user with important content and expects a response.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nBasic Example\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/redpanda-ui/alert-dialog\"\n\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"destructive\">Delete Account</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Delete Account</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\nConfirmation Dialog\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button>Save Changes</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Save changes?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This will update your profile information. You can change these settings later.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Save Changes</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\nWarning Dialog\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"outline\">Reset Settings</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Reset all settings?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This will restore all settings to their default values. Your custom configurations will be lost.\n        This action cannot be undone.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Keep Settings</AlertDialogCancel>\n      <AlertDialogAction>Reset Settings</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\nControlled State\nconst [open, setOpen] = useState(false)\n\n<AlertDialog open={open} onOpenChange={setOpen}>\n  <AlertDialogTrigger asChild>\n    <Button>Open Dialog</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Controlled Dialog</AlertDialogTitle>\n      <AlertDialogDescription>\n        This dialog's open state is controlled by React state.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={() => setOpen(false)}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={() => {\n        // Perform action\n        setOpen(false)\n      }}>\n        Confirm\n      </AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\nWhen to use\nUse Alert Dialog for critical actions that require explicit user confirmation. This component blocks interaction with the rest of the application until resolved:\n\nUse Alert Dialog when:\n\nConfirming destructive actions (delete, reset, logout)\nWarning about irreversible changes\nRequiring explicit consent for important operations\nPreventing accidental data loss\nBlocking workflow until user makes a decision\n\nDon't use Alert Dialog when:\n\nThe action is easily reversible\nYou need complex form inputs (use Dialog instead)\nShowing temporary notifications (use Toast instead)\nDisplaying non-critical information (use Alert instead)\nThe confirmation is optional or less critical\n\nAnatomy\nThe Alert Dialog component is built using Radix UI primitives with a layered modal structure:\nModal Layer Stack:\n┌─────────────────────────────────────────────────────┐\n│ AlertDialogPortal (React Portal)                    │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ AlertDialogOverlay (backdrop)                   │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ AlertDialogContent (modal container)        │ │ │\n│ │ │ ┌─────────────────────────────────────────┐ │ │ │\n│ │ │ │ AlertDialogHeader                       │ │ │ │\n│ │ │ │ ├── AlertDialogTitle                    │ │ │ │\n│ │ │ │ └── AlertDialogDescription              │ │ │ │\n│ │ │ └─────────────────────────────────────────┘ │ │ │\n│ │ │ [Content Area - Custom Content]             │ │ │\n│ │ │ ┌─────────────────────────────────────────┐ │ │ │\n│ │ │ │ AlertDialogFooter                       │ │ │ │\n│ │ │ │ ├── AlertDialogCancel (outline button)  │ │ │ │\n│ │ │ │ └── AlertDialogAction (primary button)  │ │ │ │\n│ │ │ └─────────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nTrigger (outside modal):\nAlertDialogTrigger → Opens the modal\nComponent Hierarchy:\n\nAlertDialog (Root): Manages dialog state and provides context\nAlertDialogTrigger: Button or element that opens the dialog\nAlertDialogPortal: Renders modal outside normal DOM tree\nAlertDialogOverlay: Semi-transparent backdrop (blocks interaction)\nAlertDialogContent: Main modal container with animations\nAlertDialogHeader: Contains title and description\nAlertDialogTitle: Primary heading (required for accessibility)\nAlertDialogDescription: Explanatory text\nAlertDialogFooter: Contains action buttons\nAlertDialogCancel: Cancel/dismiss action (typically outline style)\nAlertDialogAction: Primary action button (typically destructive style)\n\nKey Features:\n\nFocus Management: Automatically traps focus within dialog\nEscape Handling: Closes dialog when user presses Escape\nClick Outside: Closes dialog when clicking backdrop\nAnimations: Smooth fade and scale transitions\nAccessibility: Proper ARIA attributes and screen reader support\n\nProps\nDocsAPI Reference\nCredits\n\nWe use Radix UI for the alert dialog component.\nWe take our inspiration from Shadcn UI for the alert dialog style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Alert Dialog\n\nA modal dialog that interrupts the user with important content and expects a response.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/alert-dialog.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/alert-dialog)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/alert-dialog)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/alert-dialog-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n### Basic Example\n\n```\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/redpanda-ui/alert-dialog\"\n\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"destructive\">Delete Account</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Delete Account</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n### Confirmation Dialog\n\n```\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button>Save Changes</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Save changes?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This will update your profile information. You can change these settings later.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Save Changes</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n### Warning Dialog\n\n```\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"outline\">Reset Settings</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Reset all settings?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This will restore all settings to their default values. Your custom configurations will be lost.\n        This action cannot be undone.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Keep Settings</AlertDialogCancel>\n      <AlertDialogAction>Reset Settings</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n### Controlled State\n\n```\nconst [open, setOpen] = useState(false)\n\n<AlertDialog open={open} onOpenChange={setOpen}>\n  <AlertDialogTrigger asChild>\n    <Button>Open Dialog</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Controlled Dialog</AlertDialogTitle>\n      <AlertDialogDescription>\n        This dialog's open state is controlled by React state.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel onClick={() => setOpen(false)}>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={() => {\n        // Perform action\n        setOpen(false)\n      }}>\n        Confirm\n      </AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n## When to use\n\nUse Alert Dialog for critical actions that require explicit user confirmation. This component blocks interaction with the rest of the application until resolved:\n\n**Use Alert Dialog when:**\n\n*   Confirming destructive actions (delete, reset, logout)\n*   Warning about irreversible changes\n*   Requiring explicit consent for important operations\n*   Preventing accidental data loss\n*   Blocking workflow until user makes a decision\n\n**Don't use Alert Dialog when:**\n\n*   The action is easily reversible\n*   You need complex form inputs (use Dialog instead)\n*   Showing temporary notifications (use Toast instead)\n*   Displaying non-critical information (use Alert instead)\n*   The confirmation is optional or less critical\n\n## Anatomy\n\nThe Alert Dialog component is built using Radix UI primitives with a layered modal structure:\n\n```\nModal Layer Stack:\n┌─────────────────────────────────────────────────────┐\n│ AlertDialogPortal (React Portal)                    │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ AlertDialogOverlay (backdrop)                   │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ AlertDialogContent (modal container)        │ │ │\n│ │ │ ┌─────────────────────────────────────────┐ │ │ │\n│ │ │ │ AlertDialogHeader                       │ │ │ │\n│ │ │ │ ├── AlertDialogTitle                    │ │ │ │\n│ │ │ │ └── AlertDialogDescription              │ │ │ │\n│ │ │ └─────────────────────────────────────────┘ │ │ │\n│ │ │ [Content Area - Custom Content]             │ │ │\n│ │ │ ┌─────────────────────────────────────────┐ │ │ │\n│ │ │ │ AlertDialogFooter                       │ │ │ │\n│ │ │ │ ├── AlertDialogCancel (outline button)  │ │ │ │\n│ │ │ │ └── AlertDialogAction (primary button)  │ │ │ │\n│ │ │ └─────────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nTrigger (outside modal):\nAlertDialogTrigger → Opens the modal\n```\n\n**Component Hierarchy:**\n\n1.  **AlertDialog** (Root): Manages dialog state and provides context\n2.  **AlertDialogTrigger**: Button or element that opens the dialog\n3.  **AlertDialogPortal**: Renders modal outside normal DOM tree\n4.  **AlertDialogOverlay**: Semi-transparent backdrop (blocks interaction)\n5.  **AlertDialogContent**: Main modal container with animations\n6.  **AlertDialogHeader**: Contains title and description\n7.  **AlertDialogTitle**: Primary heading (required for accessibility)\n8.  **AlertDialogDescription**: Explanatory text\n9.  **AlertDialogFooter**: Contains action buttons\n10.  **AlertDialogCancel**: Cancel/dismiss action (typically outline style)\n11.  **AlertDialogAction**: Primary action button (typically destructive style)\n\n**Key Features:**\n\n*   **Focus Management**: Automatically traps focus within dialog\n*   **Escape Handling**: Closes dialog when user presses Escape\n*   **Click Outside**: Closes dialog when clicking backdrop\n*   **Animations**: Smooth fade and scale transitions\n*   **Accessibility**: Proper ARIA attributes and screen reader support\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/alert-dialog)[API Reference](https://www.radix-ui.com/primitives/docs/components/alert-dialog#api-reference)\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/docs/primitives/components/alert-dialog) for the alert dialog component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/alert-dialog) for the alert dialog style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.196Z",
      "componentName": "alert-dialog",
      "demoCode": "import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/redpanda-ui/alert-dialog\"\n\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"destructive\">Delete Account</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Delete Account</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>",
      "metadata": {
        "description": "A modal dialog that interrupts the user with important content and expects a response."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-alert",
      "url": "https://redpanda-ui-registry.netlify.app/docs/alert",
      "title": "Alert",
      "content": "AlertDisplays a callout for user attention.Made by shadcnEdit on GitHubPowered byShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nBasic Example\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/redpanda-ui/alert\"\nimport { Terminal } from \"lucide-react\"\n\n<Alert>\n  <Terminal />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>\nDefault Alert\nimport { Info } from \"lucide-react\"\n\n<Alert variant=\"default\">\n  <Info />\n  <AlertTitle>Information</AlertTitle>\n  <AlertDescription>\n    This is a general information alert. Use it to provide helpful context or neutral updates.\n  </AlertDescription>\n</Alert>\nDestructive Alert\nimport { AlertTriangle } from \"lucide-react\"\n\n<Alert variant=\"destructive\">\n  <AlertTriangle />\n  <AlertTitle>Error occurred</AlertTitle>\n  <AlertDescription>\n    Your session has expired. Please sign in again to continue.\n  </AlertDescription>\n</Alert>\nWithout Icon\n<Alert>\n  <AlertTitle>No Icon Alert</AlertTitle>\n  <AlertDescription>\n    This alert doesn't include an icon. The layout automatically adjusts when no icon is present.\n  </AlertDescription>\n</Alert>\nSimple Description Only\nimport { CheckCircle } from \"lucide-react\"\n\n<Alert>\n  <CheckCircle />\n  <AlertDescription>\n    Your changes have been saved successfully.\n  </AlertDescription>\n</Alert>\nWhen to use\nUse alerts to communicate important messages that require user attention. Choose the right variant based on the message urgency and type:\n\nUse Alert when:\n\nDisplaying system-wide messages or status updates\nShowing form-level validation feedback\nCommunicating important context about the current page or action\nProviding persistent information that users should be aware of\nDisplaying error states that don't require immediate action\n\nDon't use Alert when:\n\nThe message is temporary (use Toast instead)\nYou need user confirmation (use Alert Dialog instead)\nThe message is field-specific (use field-level validation)\nThe information is purely decorative (use a regular text block)\n\nAnatomy\nThe Alert component has a simple, flexible structure:\nAlert Container (role=\"alert\")\n┌─────────────────────────────────────────────────┐\n│ [Icon]  AlertTitle (optional)                   │\n│         AlertDescription (optional)             │\n└─────────────────────────────────────────────────┘\n\nLayout Grid Structure:\n┌─────────────┬───────────────────────────────────┐\n│             │                                   │\n│   [Icon]    │  AlertTitle                       │\n│   (16px)    │  AlertDescription                 │\n│             │                                   │\n└─────────────┴───────────────────────────────────┘\n Grid Column 1   Grid Column 2\nComponent Hierarchy:\n\nAlert (Container): Main wrapper with variant styling and grid layout\nIcon (Optional): Visual indicator placed in the first grid column\nAlertTitle (Optional): Bold heading text in the second grid column\nAlertDescription (Optional): Descriptive text below the title\n\nCSS Grid Layout:\n\nWith Icon: grid-cols-[calc(var(--spacing)*4)_1fr] - Fixed icon column + flexible content\nWithout Icon: grid-cols-[0_1fr] - No icon space + full-width content\nGap: 12px horizontal gap between icon and text content\n\nVariants:\n\ndefault: Standard card background with neutral text colors\ndestructive: Error styling with red text and maintained background\n\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe take our inspiration from Shadcn UI for the alert component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Alert\n\nDisplays a callout for user attention.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/alert.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/alert)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/alert-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n### Basic Example\n\n```\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/redpanda-ui/alert\"\nimport { Terminal } from \"lucide-react\"\n\n<Alert>\n  <Terminal />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>\n```\n\n### Default Alert\n\n```\nimport { Info } from \"lucide-react\"\n\n<Alert variant=\"default\">\n  <Info />\n  <AlertTitle>Information</AlertTitle>\n  <AlertDescription>\n    This is a general information alert. Use it to provide helpful context or neutral updates.\n  </AlertDescription>\n</Alert>\n```\n\n### Destructive Alert\n\n```\nimport { AlertTriangle } from \"lucide-react\"\n\n<Alert variant=\"destructive\">\n  <AlertTriangle />\n  <AlertTitle>Error occurred</AlertTitle>\n  <AlertDescription>\n    Your session has expired. Please sign in again to continue.\n  </AlertDescription>\n</Alert>\n```\n\n### Without Icon\n\n```\n<Alert>\n  <AlertTitle>No Icon Alert</AlertTitle>\n  <AlertDescription>\n    This alert doesn't include an icon. The layout automatically adjusts when no icon is present.\n  </AlertDescription>\n</Alert>\n```\n\n### Simple Description Only\n\n```\nimport { CheckCircle } from \"lucide-react\"\n\n<Alert>\n  <CheckCircle />\n  <AlertDescription>\n    Your changes have been saved successfully.\n  </AlertDescription>\n</Alert>\n```\n\n## When to use\n\nUse alerts to communicate important messages that require user attention. Choose the right variant based on the message urgency and type:\n\n**Use Alert when:**\n\n*   Displaying system-wide messages or status updates\n*   Showing form-level validation feedback\n*   Communicating important context about the current page or action\n*   Providing persistent information that users should be aware of\n*   Displaying error states that don't require immediate action\n\n**Don't use Alert when:**\n\n*   The message is temporary (use Toast instead)\n*   You need user confirmation (use Alert Dialog instead)\n*   The message is field-specific (use field-level validation)\n*   The information is purely decorative (use a regular text block)\n\n## Anatomy\n\nThe Alert component has a simple, flexible structure:\n\n```\nAlert Container (role=\"alert\")\n┌─────────────────────────────────────────────────┐\n│ [Icon]  AlertTitle (optional)                   │\n│         AlertDescription (optional)             │\n└─────────────────────────────────────────────────┘\n\nLayout Grid Structure:\n┌─────────────┬───────────────────────────────────┐\n│             │                                   │\n│   [Icon]    │  AlertTitle                       │\n│   (16px)    │  AlertDescription                 │\n│             │                                   │\n└─────────────┴───────────────────────────────────┘\n Grid Column 1   Grid Column 2\n```\n\n**Component Hierarchy:**\n\n1.  **Alert** (Container): Main wrapper with variant styling and grid layout\n2.  **Icon** (Optional): Visual indicator placed in the first grid column\n3.  **AlertTitle** (Optional): Bold heading text in the second grid column\n4.  **AlertDescription** (Optional): Descriptive text below the title\n\n**CSS Grid Layout:**\n\n*   **With Icon**: `grid-cols-[calc(var(--spacing)*4)_1fr]` - Fixed icon column + flexible content\n*   **Without Icon**: `grid-cols-[0_1fr]` - No icon space + full-width content\n*   **Gap**: 12px horizontal gap between icon and text content\n\n**Variants:**\n\n*   **default**: Standard card background with neutral text colors\n*   **destructive**: Error styling with red text and maintained background\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/alert-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/alert) for the alert component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.807Z",
      "componentName": "alert",
      "demoCode": "import { Alert, AlertDescription, AlertTitle } from \"@/components/redpanda-ui/alert\"\nimport { Terminal } from \"lucide-react\"\n\n<Alert>\n  <Terminal />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>",
      "metadata": {
        "description": "Displays a callout for user attention.",
        "dependencies": [
          "@/components/redpanda-ui/alert",
          "lucide-react"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-authentication",
      "url": "https://redpanda-ui-registry.netlify.app/docs/authentication",
      "title": "Authentication",
      "content": "AuthenticationAuth0 screens, reproduced 1-1 in Tailwind. Created by malinskibeniamin.Made by malinskibeniaminEdit on GitHubPreviewCodeOpen in v0Loading component...A login that looks like an Auth0 landing screen.\nInstallation\nCLI\nUsage\nimport React from 'react';\nimport {\n  Auth0Button,\n  Auth0Divider,\n  Auth0Header,\n  Auth0Input,\n  Auth0Modal,\n  Auth0ModalBody,\n  Auth0ModalDescription,\n  Auth0ModalHeading,\n  Auth0ModalLink,\n  Auth0ModalText,\n  Auth0SubmitButton,\n} from '@/registry/components/auth0';\n<Auth0Modal>\n  <Auth0Header withLogo={true} />\n\n  <Auth0ModalBody>\n    <Auth0ModalHeading>Log in</Auth0ModalHeading>\n    <Auth0ModalDescription>Enter your email address to log in to Redpanda Cloud</Auth0ModalDescription>\n\n    {/* Form */}\n    <form className=\"space-y-4 mt-6\">\n      {/* Email Input */}\n      <Auth0Input type=\"email\" placeholder=\"Enter your email address\" defaultValue=\"email@redpanda.com\" />\n\n      {/* Continue Button */}\n      <Auth0SubmitButton>Continue</Auth0SubmitButton>\n    </form>\n\n    {/* Divider */}\n    <Auth0Divider text=\"OR\" />\n\n    {/* OAuth Buttons */}\n    <div className=\"space-y-3 mt-6\">\n      <Auth0Button provider=\"google\">Continue with Google</Auth0Button>\n\n      <Auth0Button provider=\"github\">Continue with GitHub</Auth0Button>\n    </div>\n\n    {/* Sign up Link */}\n    <Auth0ModalText className=\"text-center mt-6\">\n      Don't have an account? <Auth0ModalLink href=\"#\">Sign up</Auth0ModalLink>\n    </Auth0ModalText>\n  </Auth0ModalBody>\n</Auth0Modal>\nExamples\nLogin\nPreviewCodeOpen in v0Loading component...A login that looks like an Auth0 landing screen.\nLogin (Email)\nPreviewCodeOpen in v0Loading component...A login with an input prompting the user for an email address.\nLogin (Authentication Method)\nPreviewCodeOpen in v0Loading component...A login with an input prompting the user for an authentication method.\nCredits\n\nThe original implementation in Chakra UI can be found in the legacy UI component library's Storybook here.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Authentication\n\nAuth0 screens, reproduced 1-1 in Tailwind. Created by malinskibeniamin.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/authentication.mdx)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/login-demo.json)\n\nLoading component...\n\nA login that looks like an Auth0 landing screen.\n\n## Installation\n\nCLI\n\n## Usage\n\n```\nimport React from 'react';\nimport {\n  Auth0Button,\n  Auth0Divider,\n  Auth0Header,\n  Auth0Input,\n  Auth0Modal,\n  Auth0ModalBody,\n  Auth0ModalDescription,\n  Auth0ModalHeading,\n  Auth0ModalLink,\n  Auth0ModalText,\n  Auth0SubmitButton,\n} from '@/registry/components/auth0';\n```\n\n```\n<Auth0Modal>\n  <Auth0Header withLogo={true} />\n\n  <Auth0ModalBody>\n    <Auth0ModalHeading>Log in</Auth0ModalHeading>\n    <Auth0ModalDescription>Enter your email address to log in to Redpanda Cloud</Auth0ModalDescription>\n\n    {/* Form */}\n    <form className=\"space-y-4 mt-6\">\n      {/* Email Input */}\n      <Auth0Input type=\"email\" placeholder=\"Enter your email address\" defaultValue=\"email@redpanda.com\" />\n\n      {/* Continue Button */}\n      <Auth0SubmitButton>Continue</Auth0SubmitButton>\n    </form>\n\n    {/* Divider */}\n    <Auth0Divider text=\"OR\" />\n\n    {/* OAuth Buttons */}\n    <div className=\"space-y-3 mt-6\">\n      <Auth0Button provider=\"google\">Continue with Google</Auth0Button>\n\n      <Auth0Button provider=\"github\">Continue with GitHub</Auth0Button>\n    </div>\n\n    {/* Sign up Link */}\n    <Auth0ModalText className=\"text-center mt-6\">\n      Don't have an account? <Auth0ModalLink href=\"#\">Sign up</Auth0ModalLink>\n    </Auth0ModalText>\n  </Auth0ModalBody>\n</Auth0Modal>\n```\n\n## Examples\n\n### Login\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/login-demo.json)\n\nLoading component...\n\nA login that looks like an Auth0 landing screen.\n\n### Login (Email)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/login-email-demo.json)\n\nLoading component...\n\nA login with an input prompting the user for an email address.\n\n### Login (Authentication Method)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/login-authentication-method-demo.json)\n\nLoading component...\n\nA login with an input prompting the user for an authentication method.\n\n## Credits\n\n*   The original implementation in Chakra UI can be found in the legacy UI component library's Storybook [here](https://redpanda-ui.netlify.app).\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.418Z",
      "componentName": "authentication",
      "demoCode": "<Auth0Modal>\n  <Auth0Header withLogo={true} />\n\n  <Auth0ModalBody>\n    <Auth0ModalHeading>Log in</Auth0ModalHeading>\n    <Auth0ModalDescription>Enter your email address to log in to Redpanda Cloud</Auth0ModalDescription>\n\n    {/* Form */}\n    <form className=\"space-y-4 mt-6\">\n      {/* Email Input */}\n      <Auth0Input type=\"email\" placeholder=\"Enter your email address\" defaultValue=\"email@redpanda.com\" />\n\n      {/* Continue Button */}\n      <Auth0SubmitButton>Continue</Auth0SubmitButton>\n    </form>\n\n    {/* Divider */}\n    <Auth0Divider text=\"OR\" />\n\n    {/* OAuth Buttons */}\n    <div className=\"space-y-3 mt-6\">\n      <Auth0Button provider=\"google\">Continue with Google</Auth0Button>\n\n      <Auth0Button provider=\"github\">Continue with GitHub</Auth0Button>\n    </div>\n\n    {/* Sign up Link */}\n    <Auth0ModalText className=\"text-center mt-6\">\n      Don't have an account? <Auth0ModalLink href=\"#\">Sign up</Auth0ModalLink>\n    </Auth0ModalText>\n  </Auth0ModalBody>\n</Auth0Modal>",
      "metadata": {
        "description": "Auth0 screens, reproduced 1-1 in Tailwind. Created by malinskibeniamin.",
        "dependencies": [
          "react"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-auto-form",
      "url": "https://redpanda-ui-registry.netlify.app/docs/auto-form",
      "title": "Auto Form",
      "content": "Auto FormAutomatically generate a form from Zod schema.Made by vantezzenEdit on GitHubPowered byautoformautoform-shadcnzodreact-hook-form\nWhat is AutoForm\nAutoForm is a drop-in form builder for your internal and low-priority forms with existing zod schemas. For example, if you already have zod schemas for your API and want to create a simple admin panel to edit user profiles, simply pass the schema to AutoForm and you're done.\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nField types\nCurrently, these field types are supported out of the box:\n\nboolean (checkbox, switch)\ndate (date picker)\nenum (select, radio group)\nnumber (input)\nstring (input, textfield)\nfile (file)\n\nYou can add support for other field types by adding them to the INPUT_COMPONENTS object in components/redpanda-ui/auto-form.tsx.\nZod configuration\nValidations\nYour form schema can use any of zod's validation methods including refine.\nWhen to use\nUse AutoForm when you need to quickly generate forms from existing Zod schemas without manual form building:\n\nUse AutoForm when:\n\nBuilding admin panels or internal tools\nRapid prototyping forms\nYou already have Zod schemas for your API\nCreating simple CRUD interfaces\nWorking with straightforward field types (string, number, boolean, enum, date)\n\nDon't use AutoForm when:\n\nBuilding public-facing forms with specific UX requirements\nNeed complex custom layouts or styling\nWorking with unsupported field types\nPerformance is critical (large schemas)\nNeed fine-grained control over form behavior\n\nAnatomy\nAutoForm automatically generates form structure from Zod schema with these components:\nAutoForm Container\n┌─────────────────────────────────────────────────────────────┐\n│ Form Provider (react-hook-form)                             │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ Generated Form Fields                                   │ │\n│ │ ┌─────────────────────────────────────────────────────┐ │ │\n│ │ │ AutoFormField (string)                              │ │ │\n│ │ │ ├── Label                                           │ │ │\n│ │ │ ├── Input                                           │ │ │\n│ │ │ ├── Description (optional)                          │ │ │\n│ │ │ └── Error Message                                   │ │ │\n│ │ └─────────────────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────────────────┐ │ │\n│ │ │ AutoFormField (object)                              │ │ │\n│ │ │ └── Accordion with nested fields                    │ │ │\n│ │ └─────────────────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────────────────┐ │ │\n│ │ │ AutoFormField (array)                               │ │ │\n│ │ │ └── Array wrapper with add/remove buttons           │ │ │\n│ │ └─────────────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ Submit Button (AutoFormSubmit)                          │ │\n│ └─────────────────────────────────────────────────────────┘ │\n│ [Custom children content]                                   │\n└─────────────────────────────────────────────────────────────┘\n\nField Type Mapping:\n- z.string() → Input/Textarea\n- z.number() → Input[type=\"number\"]\n- z.boolean() → Checkbox/Switch\n- z.date() → DatePicker\n- z.enum() → Select\n- z.object() → Accordion section\n- z.array() → Array field wrapper\nComponent Hierarchy:\n\nAutoForm (Root): Main form container with react-hook-form provider\nAutoFormField: Individual field wrapper that determines field type\nField Components: Generated based on Zod schema type\nAutoFormSubmit: Optional submit button component\n\nKey Features:\n\nSchema-driven: Automatically infers field types from Zod schema\nValidation: Uses Zod validation rules for form validation\nDependencies: Supports conditional field visibility\nCustomization: fieldConfig allows per-field customization\nNested Objects: Creates accordion sections for object schemas\nArrays: Supports dynamic array fields with add/remove\n\nUsage\n\"use client\";\nimport AutoForm, { AutoFormSubmit } from \"./components/ui/auto-form\";\nimport * as z from \"zod\";\n\n// Define your form schema using zod\nconst formSchema = z.object({\n  username: z\n    .string({\n      required_error: \"Username is required.\",\n    })\n    // You can use zod's built-in validation as normal\n    .min(2, {\n      message: \"Username must be at least 2 characters.\",\n    }),\n\n  password: z\n    .string({\n      required_error: \"Password is required.\",\n    })\n    // Use the \"describe\" method to set the label\n    // If no label is set, the field name will be used\n    // and un-camel-cased\n    .describe(\"Your secure password\")\n    .min(8, {\n      message: \"Password must be at least 8 characters.\",\n    }),\n\n  favouriteNumber: z.coerce // When using numbers and dates, you must use coerce\n    .number({\n      invalid_type_error: \"Favourite number must be a number.\",\n    })\n    .min(1, {\n      message: \"Favourite number must be at least 1.\",\n    })\n    .max(10, {\n      message: \"Favourite number must be at most 10.\",\n    })\n    .default(5) // You can set a default value\n    .optional(),\n\n  acceptTerms: z\n    .boolean()\n    .describe(\"Accept terms and conditions.\")\n    .refine((value) => value, {\n      message: \"You must accept the terms and conditions.\",\n      path: [\"acceptTerms\"],\n    }),\n\n  // Date will show a date picker\n  birthday: z.coerce.date().optional(),\n\n  sendMeMails: z.boolean().optional(),\n\n  // Enum will show a select\n  color: z.enum([\"red\", \"green\", \"blue\"]),\n\n  // Create sub-objects to create accordion sections\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    zip: z.string(),\n  }),\n});\n\nfunction App() {\n  return (\n    <AutoForm\n      // Pass the schema to the form\n      formSchema={formSchema}\n      // You can add additional config for each field\n      // to customize the UI\n      fieldConfig={{\n        password: {\n          // Use \"inputProps\" to pass props to the input component\n          // You can use any props that the component accepts\n          inputProps: {\n            type: \"password\",\n            placeholder: \"••••••••\",\n          },\n        },\n        favouriteNumber: {\n          // Set a \"description\" that will be shown below the field\n          description: \"Your favourite number between 1 and 10.\",\n        },\n        acceptTerms: {\n          inputProps: {\n            required: true,\n          },\n          // You can use JSX in the description\n          description: (\n            <>\n              I agree to the{\" \"}\n              <a\n                href=\"#\"\n                className=\"text-primary underline\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  alert(\"Terms and conditions clicked.\");\n                }}\n              >\n                terms and conditions\n              </a>\n              .\n            </>\n          ),\n        },\n\n        birthday: {\n          description: \"We need your birthday to send you a gift.\",\n        },\n\n        sendMeMails: {\n          // Booleans use a checkbox by default, you can use a switch instead\n          fieldType: \"switch\",\n        },\n      }}\n      // Optionally, define dependencies between fields\n      dependencies={[\n        {\n          // Hide \"color\" when \"sendMeMails\" is not checked as we only need to\n          // know the color when we send mails\n          sourceField: \"sendMeMails\",\n          type: DependencyType.HIDES,\n          targetField: \"color\",\n          when: (sendMeMails) => !sendMeMails,\n        },\n      ]}\n    >\n      {/* \n      Pass in a AutoFormSubmit or a button with type=\"submit\".\n      Alternatively, you can not pass a submit button\n      to create auto-saving forms etc.\n      */}\n      <AutoFormSubmit>Send now</AutoFormSubmit>\n\n      {/*\n      All children passed to the form will be rendered below the form.\n      */}\n      <p className=\"text-gray-500 text-sm\">\n        By submitting this form, you agree to our{\" \"}\n        <a href=\"#\" className=\"text-primary underline\">\n          terms and conditions\n        </a>\n        .\n      </p>\n    </AutoForm>\n  );\n}\nValidations\nYour form schema can use any of zod's validation methods including refine.\nDescriptions\nYou can use the describe method to set a label for each field. If no label is set, the field name will be used and un-camel-cased.\nconst formSchema = z.object({\n  username: z.string().describe('Your username'),\n  someValue: z.string(), // Will be \"Some Value\"\n})\nYou can also configure the label with fieldConfig too.\nOptional fields\nBy default, all fields are required. You can make a field optional by using the optional method.\nconst formSchema = z.object({\n  username: z.string().optional(),\n})\nDefault values\nYou can set a default value for a field using the default method.\nconst formSchema = z.object({\n  favouriteNumber: z.number().default(5),\n})\nIf you want to set default value of date, convert it to Date first using new Date(val).\nSub-objects\nYou can nest objects to create accordion sections.\nconst formSchema = z.object({\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    zip: z.string(),\n\n    // You can nest objects as deep as you want\n    nested: z.object({\n      foo: z.string(),\n      bar: z.string(),\n\n      nested: z.object({\n        foo: z.string(),\n        bar: z.string(),\n      }),\n    }),\n  }),\n})\nLike with normal objects, you can use the describe method to set a label and description for the section:\nconst formSchema = z.object({\n  address: z\n    .object({\n      street: z.string(),\n      city: z.string(),\n      zip: z.string(),\n    })\n    .describe('Your address'),\n})\nSelect/Enums\nAutoForm supports enum and nativeEnum to create select fields.\nconst formSchema = z.object({\n  color: z.enum(['red', 'green', 'blue']),\n})\n\nenum BreadTypes {\n  // For native enums, you can alternatively define a backed enum to set a custom label\n  White = 'White bread',\n  Brown = 'Brown bread',\n  Wholegrain = 'Wholegrain bread',\n  Other,\n}\n// Keep in mind that zod will validate and return the enum labels, not the enum values!\nconst formSchema = z.object({\n  bread: z.nativeEnum(BreadTypes),\n})\nArrays\nAutoForm supports arrays of objects. Because inferring things like field labels from arrays of strings/numbers/etc. is difficult, only objects are supported.\nconst formSchema = z.object({\n  guestListName: z.string(),\n  invitedGuests: z\n    .array(\n      // Define the fields for each item\n      z.object({\n        name: z.string(),\n        age: z.number(),\n      })\n    )\n    // Optionally set a custom label - otherwise this will be inferred from the field name\n    .describe('Guests invited to the party'),\n})\nArrays are not supported as the root element of the form schema.\nYou also can set default value of an array using .default(), but please make sure the array element has same structure with the schema.\nconst formSchema = z.object({\n  guestListName: z.string(),\n  invitedGuests: z\n    .array(\n      // Define the fields for each item\n      z.object({\n        name: z.string(),\n        age: z.number(),\n      })\n    )\n    .describe('Guests invited to the party')\n    .default([\n      { name: 'John', age: 24, },\n      { name: 'Jane', age: 20, },\n    ]),\n})\nCredits\n\nWe take our inspiration from Shadcn UI for the form component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Auto Form\n\nAutomatically generate a form from Zod schema.\n\nMade by [vantezzen](https://github.com/vantezzen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/auto-form.mdx)\n\nPowered by\n\n[![autoform](https://img.logo.dev/autoform.vantezzen.io?token=pk_Q3Q-iPRxREyBYQYEiIraeA)autoform](https://autoform.vantezzen.io/)[![autoform-shadcn](https://img.logo.dev/github.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)autoform-shadcn](https://github.com/vantezzen/autoform/tree/pure-shadcn)[![zod](https://img.logo.dev/zod.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)zod](https://zod.dev/)[![react-hook-form](https://img.logo.dev/react-hook-form.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)react-hook-form](https://react-hook-form.com/)\n\n## What is AutoForm\n\nAutoForm is a drop-in form builder for your internal and low-priority forms with existing zod schemas. For example, if you already have zod schemas for your API and want to create a simple admin panel to edit user profiles, simply pass the schema to AutoForm and you're done.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/auto-form-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Field types\n\nCurrently, these field types are supported out of the box:\n\n*   boolean (checkbox, switch)\n*   date (date picker)\n*   enum (select, radio group)\n*   number (input)\n*   string (input, textfield)\n*   file (file)\n\nYou can add support for other field types by adding them to the `INPUT_COMPONENTS` object in `components/redpanda-ui/auto-form.tsx`.\n\n## Zod configuration\n\n### Validations\n\nYour form schema can use any of zod's validation methods including refine.\n\n## When to use\n\nUse AutoForm when you need to quickly generate forms from existing Zod schemas without manual form building:\n\n**Use AutoForm when:**\n\n*   Building admin panels or internal tools\n*   Rapid prototyping forms\n*   You already have Zod schemas for your API\n*   Creating simple CRUD interfaces\n*   Working with straightforward field types (string, number, boolean, enum, date)\n\n**Don't use AutoForm when:**\n\n*   Building public-facing forms with specific UX requirements\n*   Need complex custom layouts or styling\n*   Working with unsupported field types\n*   Performance is critical (large schemas)\n*   Need fine-grained control over form behavior\n\n## Anatomy\n\nAutoForm automatically generates form structure from Zod schema with these components:\n\n```\nAutoForm Container\n┌─────────────────────────────────────────────────────────────┐\n│ Form Provider (react-hook-form)                             │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ Generated Form Fields                                   │ │\n│ │ ┌─────────────────────────────────────────────────────┐ │ │\n│ │ │ AutoFormField (string)                              │ │ │\n│ │ │ ├── Label                                           │ │ │\n│ │ │ ├── Input                                           │ │ │\n│ │ │ ├── Description (optional)                          │ │ │\n│ │ │ └── Error Message                                   │ │ │\n│ │ └─────────────────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────────────────┐ │ │\n│ │ │ AutoFormField (object)                              │ │ │\n│ │ │ └── Accordion with nested fields                    │ │ │\n│ │ └─────────────────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────────────────┐ │ │\n│ │ │ AutoFormField (array)                               │ │ │\n│ │ │ └── Array wrapper with add/remove buttons           │ │ │\n│ │ └─────────────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ Submit Button (AutoFormSubmit)                          │ │\n│ └─────────────────────────────────────────────────────────┘ │\n│ [Custom children content]                                   │\n└─────────────────────────────────────────────────────────────┘\n\nField Type Mapping:\n- z.string() → Input/Textarea\n- z.number() → Input[type=\"number\"]\n- z.boolean() → Checkbox/Switch\n- z.date() → DatePicker\n- z.enum() → Select\n- z.object() → Accordion section\n- z.array() → Array field wrapper\n```\n\n**Component Hierarchy:**\n\n1.  **AutoForm** (Root): Main form container with react-hook-form provider\n2.  **AutoFormField**: Individual field wrapper that determines field type\n3.  **Field Components**: Generated based on Zod schema type\n4.  **AutoFormSubmit**: Optional submit button component\n\n**Key Features:**\n\n*   **Schema-driven**: Automatically infers field types from Zod schema\n*   **Validation**: Uses Zod validation rules for form validation\n*   **Dependencies**: Supports conditional field visibility\n*   **Customization**: fieldConfig allows per-field customization\n*   **Nested Objects**: Creates accordion sections for object schemas\n*   **Arrays**: Supports dynamic array fields with add/remove\n\n## Usage\n\n```\n\"use client\";\nimport AutoForm, { AutoFormSubmit } from \"./components/ui/auto-form\";\nimport * as z from \"zod\";\n\n// Define your form schema using zod\nconst formSchema = z.object({\n  username: z\n    .string({\n      required_error: \"Username is required.\",\n    })\n    // You can use zod's built-in validation as normal\n    .min(2, {\n      message: \"Username must be at least 2 characters.\",\n    }),\n\n  password: z\n    .string({\n      required_error: \"Password is required.\",\n    })\n    // Use the \"describe\" method to set the label\n    // If no label is set, the field name will be used\n    // and un-camel-cased\n    .describe(\"Your secure password\")\n    .min(8, {\n      message: \"Password must be at least 8 characters.\",\n    }),\n\n  favouriteNumber: z.coerce // When using numbers and dates, you must use coerce\n    .number({\n      invalid_type_error: \"Favourite number must be a number.\",\n    })\n    .min(1, {\n      message: \"Favourite number must be at least 1.\",\n    })\n    .max(10, {\n      message: \"Favourite number must be at most 10.\",\n    })\n    .default(5) // You can set a default value\n    .optional(),\n\n  acceptTerms: z\n    .boolean()\n    .describe(\"Accept terms and conditions.\")\n    .refine((value) => value, {\n      message: \"You must accept the terms and conditions.\",\n      path: [\"acceptTerms\"],\n    }),\n\n  // Date will show a date picker\n  birthday: z.coerce.date().optional(),\n\n  sendMeMails: z.boolean().optional(),\n\n  // Enum will show a select\n  color: z.enum([\"red\", \"green\", \"blue\"]),\n\n  // Create sub-objects to create accordion sections\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    zip: z.string(),\n  }),\n});\n\nfunction App() {\n  return (\n    <AutoForm\n      // Pass the schema to the form\n      formSchema={formSchema}\n      // You can add additional config for each field\n      // to customize the UI\n      fieldConfig={{\n        password: {\n          // Use \"inputProps\" to pass props to the input component\n          // You can use any props that the component accepts\n          inputProps: {\n            type: \"password\",\n            placeholder: \"••••••••\",\n          },\n        },\n        favouriteNumber: {\n          // Set a \"description\" that will be shown below the field\n          description: \"Your favourite number between 1 and 10.\",\n        },\n        acceptTerms: {\n          inputProps: {\n            required: true,\n          },\n          // You can use JSX in the description\n          description: (\n            <>\n              I agree to the{\" \"}\n              <a\n                href=\"#\"\n                className=\"text-primary underline\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  alert(\"Terms and conditions clicked.\");\n                }}\n              >\n                terms and conditions\n              </a>\n              .\n            </>\n          ),\n        },\n\n        birthday: {\n          description: \"We need your birthday to send you a gift.\",\n        },\n\n        sendMeMails: {\n          // Booleans use a checkbox by default, you can use a switch instead\n          fieldType: \"switch\",\n        },\n      }}\n      // Optionally, define dependencies between fields\n      dependencies={[\n        {\n          // Hide \"color\" when \"sendMeMails\" is not checked as we only need to\n          // know the color when we send mails\n          sourceField: \"sendMeMails\",\n          type: DependencyType.HIDES,\n          targetField: \"color\",\n          when: (sendMeMails) => !sendMeMails,\n        },\n      ]}\n    >\n      {/* \n      Pass in a AutoFormSubmit or a button with type=\"submit\".\n      Alternatively, you can not pass a submit button\n      to create auto-saving forms etc.\n      */}\n      <AutoFormSubmit>Send now</AutoFormSubmit>\n\n      {/*\n      All children passed to the form will be rendered below the form.\n      */}\n      <p className=\"text-gray-500 text-sm\">\n        By submitting this form, you agree to our{\" \"}\n        <a href=\"#\" className=\"text-primary underline\">\n          terms and conditions\n        </a>\n        .\n      </p>\n    </AutoForm>\n  );\n}\n```\n\n### Validations\n\nYour form schema can use any of zod's validation methods including refine.\n\n### Descriptions\n\nYou can use the `describe` method to set a label for each field. If no label is set, the field name will be used and un-camel-cased.\n\n```\nconst formSchema = z.object({\n  username: z.string().describe('Your username'),\n  someValue: z.string(), // Will be \"Some Value\"\n})\n```\n\nYou can also configure the label with [`fieldConfig`](#label) too.\n\n### Optional fields\n\nBy default, all fields are required. You can make a field optional by using the `optional` method.\n\n```\nconst formSchema = z.object({\n  username: z.string().optional(),\n})\n```\n\n### Default values\n\nYou can set a default value for a field using the `default` method.\n\n```\nconst formSchema = z.object({\n  favouriteNumber: z.number().default(5),\n})\n```\n\nIf you want to set default value of date, convert it to Date first using `new Date(val)`.\n\n### Sub-objects\n\nYou can nest objects to create accordion sections.\n\n```\nconst formSchema = z.object({\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    zip: z.string(),\n\n    // You can nest objects as deep as you want\n    nested: z.object({\n      foo: z.string(),\n      bar: z.string(),\n\n      nested: z.object({\n        foo: z.string(),\n        bar: z.string(),\n      }),\n    }),\n  }),\n})\n```\n\nLike with normal objects, you can use the `describe` method to set a label and description for the section:\n\n```\nconst formSchema = z.object({\n  address: z\n    .object({\n      street: z.string(),\n      city: z.string(),\n      zip: z.string(),\n    })\n    .describe('Your address'),\n})\n```\n\n### Select/Enums\n\nAutoForm supports `enum` and `nativeEnum` to create select fields.\n\n```\nconst formSchema = z.object({\n  color: z.enum(['red', 'green', 'blue']),\n})\n\nenum BreadTypes {\n  // For native enums, you can alternatively define a backed enum to set a custom label\n  White = 'White bread',\n  Brown = 'Brown bread',\n  Wholegrain = 'Wholegrain bread',\n  Other,\n}\n// Keep in mind that zod will validate and return the enum labels, not the enum values!\nconst formSchema = z.object({\n  bread: z.nativeEnum(BreadTypes),\n})\n```\n\n### Arrays\n\nAutoForm supports arrays _of objects_. Because inferring things like field labels from arrays of strings/numbers/etc. is difficult, only objects are supported.\n\n```\nconst formSchema = z.object({\n  guestListName: z.string(),\n  invitedGuests: z\n    .array(\n      // Define the fields for each item\n      z.object({\n        name: z.string(),\n        age: z.number(),\n      })\n    )\n    // Optionally set a custom label - otherwise this will be inferred from the field name\n    .describe('Guests invited to the party'),\n})\n```\n\nArrays are not supported as the root element of the form schema.\n\nYou also can set default value of an array using .default(), but please make sure the array element has same structure with the schema.\n\n```\nconst formSchema = z.object({\n  guestListName: z.string(),\n  invitedGuests: z\n    .array(\n      // Define the fields for each item\n      z.object({\n        name: z.string(),\n        age: z.number(),\n      })\n    )\n    .describe('Guests invited to the party')\n    .default([\n      { name: 'John', age: 24, },\n      { name: 'Jane', age: 20, },\n    ]),\n})\n```\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/form) for the form component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.537Z",
      "componentName": "auto-form",
      "demoCode": "\"use client\";\nimport AutoForm, { AutoFormSubmit } from \"./components/ui/auto-form\";\nimport * as z from \"zod\";\n\n// Define your form schema using zod\nconst formSchema = z.object({\n  username: z\n    .string({\n      required_error: \"Username is required.\",\n    })\n    // You can use zod's built-in validation as normal\n    .min(2, {\n      message: \"Username must be at least 2 characters.\",\n    }),\n\n  password: z\n    .string({\n      required_error: \"Password is required.\",\n    })\n    // Use the \"describe\" method to set the label\n    // If no label is set, the field name will be used\n    // and un-camel-cased\n    .describe(\"Your secure password\")\n    .min(8, {\n      message: \"Password must be at least 8 characters.\",\n    }),\n\n  favouriteNumber: z.coerce // When using numbers and dates, you must use coerce\n    .number({\n      invalid_type_error: \"Favourite number must be a number.\",\n    })\n    .min(1, {\n      message: \"Favourite number must be at least 1.\",\n    })\n    .max(10, {\n      message: \"Favourite number must be at most 10.\",\n    })\n    .default(5) // You can set a default value\n    .optional(),\n\n  acceptTerms: z\n    .boolean()\n    .describe(\"Accept terms and conditions.\")\n    .refine((value) => value, {\n      message: \"You must accept the terms and conditions.\",\n      path: [\"acceptTerms\"],\n    }),\n\n  // Date will show a date picker\n  birthday: z.coerce.date().optional(),\n\n  sendMeMails: z.boolean().optional(),\n\n  // Enum will show a select\n  color: z.enum([\"red\", \"green\", \"blue\"]),\n\n  // Create sub-objects to create accordion sections\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    zip: z.string(),\n  }),\n});\n\nfunction App() {\n  return (\n    <AutoForm\n      // Pass the schema to the form\n      formSchema={formSchema}\n      // You can add additional config for each field\n      // to customize the UI\n      fieldConfig={{\n        password: {\n          // Use \"inputProps\" to pass props to the input component\n          // You can use any props that the component accepts\n          inputProps: {\n            type: \"password\",\n            placeholder: \"••••••••\",\n          },\n        },\n        favouriteNumber: {\n          // Set a \"description\" that will be shown below the field\n          description: \"Your favourite number between 1 and 10.\",\n        },\n        acceptTerms: {\n          inputProps: {\n            required: true,\n          },\n          // You can use JSX in the description\n          description: (\n            <>\n              I agree to the{\" \"}\n              <a\n                href=\"#\"\n                className=\"text-primary underline\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  alert(\"Terms and conditions clicked.\");\n                }}\n              >\n                terms and conditions\n              </a>\n              .\n            </>\n          ),\n        },\n\n        birthday: {\n          description: \"We need your birthday to send you a gift.\",\n        },\n\n        sendMeMails: {\n          // Booleans use a checkbox by default, you can use a switch instead\n          fieldType: \"switch\",\n        },\n      }}\n      // Optionally, define dependencies between fields\n      dependencies={[\n        {\n          // Hide \"color\" when \"sendMeMails\" is not checked as we only need to\n          // know the color when we send mails\n          sourceField: \"sendMeMails\",\n          type: DependencyType.HIDES,\n          targetField: \"color\",\n          when: (sendMeMails) => !sendMeMails,\n        },\n      ]}\n    >\n      {/* \n      Pass in a AutoFormSubmit or a button with type=\"submit\".\n      Alternatively, you can not pass a submit button\n      to create auto-saving forms etc.\n      */}\n      <AutoFormSubmit>Send now</AutoFormSubmit>\n\n      {/*\n      All children passed to the form will be rendered below the form.\n      */}\n      <p className=\"text-gray-500 text-sm\">\n        By submitting this form, you agree to our{\" \"}\n        <a href=\"#\" className=\"text-primary underline\">\n          terms and conditions\n        </a>\n        .\n      </p>\n    </AutoForm>\n  );\n}",
      "metadata": {
        "description": "Automatically generate a form from Zod schema.",
        "dependencies": [
          "zod"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-avatar-group",
      "url": "https://redpanda-ui-registry.netlify.app/docs/avatar-group",
      "title": "Avatar Group",
      "content": "Avatar GroupAn animated avatar group that displays overlapping user images and smoothly shifts each avatar forward on hover to highlight it.Made by imskyleenEdit on GitHubPowered byAnimate UIMotion\nAvatarGroup\nAn animated avatar group built with TailwindCSS and Motion, where avatars gently shift forward on hover to highlight each user.\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\n<AvatarGroup>\n  {AVATARS.map((avatar, index) => (\n    <Avatar key={index}>\n      <AvatarImage src={avatar.src} />\n      <AvatarFallback>{avatar.fallback}</AvatarFallback>\n      <AvatarGroupTooltip>\n        <p>{avatar.tooltip}</p>\n      </AvatarGroupTooltip>\n    </Avatar>\n  ))}\n</AvatarGroup>\nWhen to use\nUse AvatarGroup to display multiple users in a compact, visually appealing way with interactive hover effects:\n\nUse AvatarGroup when:\n\nShowing team members or project collaborators\nDisplaying recent activity participants\nBuilding user lists with limited space\nCreating interactive user showcases\nIndicating multiple users in shared contexts\n\nDon't use AvatarGroup when:\n\nShowing a single user (use Avatar instead)\nBuilding full user directories (use a proper list layout)\nDisplaying users that don't have relationships\nThe avatars don't need overlapping or hover effects\n\nAnatomy\nThe AvatarGroup component creates an overlapping layout with interactive hover animations:\nAvatarGroup Container\n┌─────────────────────────────────────────────────────────────────┐\n│ TooltipProvider (hover delay management)                       │\n│ ┌─────────────────────────────────────────────────────────────┐ │\n│ │ Group Container (flex, -space-x-2)                         │ │\n│ │ ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐                     │ │\n│ │ │Avatar│  │Avatar│  │Avatar│  │Avatar│                     │ │\n│ │ │  1   │  │  2   │  │  3   │  │  4   │                     │ │\n│ │ │z-1   │  │z-2   │  │z-3   │  │z-4   │                     │ │\n│ │ └──────┘  └──────┘  └──────┘  └──────┘                     │ │\n│ │     ↑         ↑         ↑         ↑                        │ │\n│ │   On hover: translates up (-30% by default)                │ │\n│ └─────────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────────┘\n\nHover Behavior:\n- Mouse enters avatar → Avatar moves up with spring animation\n- Tooltip appears above the moved avatar\n- Mouse leaves → Avatar returns to original position\n- Tooltip disappears\nComponent Hierarchy:\n\nAvatarGroup (Root): Container managing layout and animation settings\nTooltipProvider: Manages tooltip delay and interactions\nAvatarContainer: Individual wrapper for each avatar with hover logic\nAvatar: The actual avatar component (image + fallback)\nAvatarGroupTooltip: Tooltip content shown on hover\n\nKey Features:\n\nOverlapping Layout: Uses negative margin (-space-x-2) for overlap\nZ-Index Management: Each avatar has increasing z-index for proper stacking\nHover Animation: Spring-based upward translation on hover\nTooltip Integration: Built-in tooltip system with customizable content\nResponsive: Adapts to different avatar sizes\n\nAnimation Properties:\n\nDefault Transition: Spring animation (stiffness: 400, damping: 30)\nDefault Translate: -30% upward movement\nHover States: Smooth enter/exit animations\nTouch Support: Works on mobile with tap events\n\nExamples\nBottom translation\nPreviewCodeOpen in v0Loading component...\nProps\nAvatarGroup\nPropTypeDefaultchildrenReact.ReactElement[]-className?string-transition?Transition{ type: 'spring', stiffness: 300, damping: 17 }invertOverlap?boolean-translate?string | number-30%tooltipProps?TooltipProps{ side: 'top', sideOffset: 20 }\nAvatarGroupTooltip\nPropTypeDefaultchildrenReact.ReactNode-\nCredits\n\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Avatar Group\n\nAn animated avatar group that displays overlapping user images and smoothly shifts each avatar forward on hover to highlight it.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/avatar-group.mdx)\n\nPowered by\n\n[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/radix/avatar-group)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\n## AvatarGroup\n\nAn animated avatar group built with TailwindCSS and Motion, where avatars gently shift forward on hover to highlight each user.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/avatar-group-demo.json)\n\nLoading component...\n\n### Installation\n\nCLI\n\n### Usage\n\n```\n<AvatarGroup>\n  {AVATARS.map((avatar, index) => (\n    <Avatar key={index}>\n      <AvatarImage src={avatar.src} />\n      <AvatarFallback>{avatar.fallback}</AvatarFallback>\n      <AvatarGroupTooltip>\n        <p>{avatar.tooltip}</p>\n      </AvatarGroupTooltip>\n    </Avatar>\n  ))}\n</AvatarGroup>\n```\n\n## When to use\n\nUse AvatarGroup to display multiple users in a compact, visually appealing way with interactive hover effects:\n\n**Use AvatarGroup when:**\n\n*   Showing team members or project collaborators\n*   Displaying recent activity participants\n*   Building user lists with limited space\n*   Creating interactive user showcases\n*   Indicating multiple users in shared contexts\n\n**Don't use AvatarGroup when:**\n\n*   Showing a single user (use Avatar instead)\n*   Building full user directories (use a proper list layout)\n*   Displaying users that don't have relationships\n*   The avatars don't need overlapping or hover effects\n\n## Anatomy\n\nThe AvatarGroup component creates an overlapping layout with interactive hover animations:\n\n```\nAvatarGroup Container\n┌─────────────────────────────────────────────────────────────────┐\n│ TooltipProvider (hover delay management)                       │\n│ ┌─────────────────────────────────────────────────────────────┐ │\n│ │ Group Container (flex, -space-x-2)                         │ │\n│ │ ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐                     │ │\n│ │ │Avatar│  │Avatar│  │Avatar│  │Avatar│                     │ │\n│ │ │  1   │  │  2   │  │  3   │  │  4   │                     │ │\n│ │ │z-1   │  │z-2   │  │z-3   │  │z-4   │                     │ │\n│ │ └──────┘  └──────┘  └──────┘  └──────┘                     │ │\n│ │     ↑         ↑         ↑         ↑                        │ │\n│ │   On hover: translates up (-30% by default)                │ │\n│ └─────────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────────┘\n\nHover Behavior:\n- Mouse enters avatar → Avatar moves up with spring animation\n- Tooltip appears above the moved avatar\n- Mouse leaves → Avatar returns to original position\n- Tooltip disappears\n```\n\n**Component Hierarchy:**\n\n1.  **AvatarGroup** (Root): Container managing layout and animation settings\n2.  **TooltipProvider**: Manages tooltip delay and interactions\n3.  **AvatarContainer**: Individual wrapper for each avatar with hover logic\n4.  **Avatar**: The actual avatar component (image + fallback)\n5.  **AvatarGroupTooltip**: Tooltip content shown on hover\n\n**Key Features:**\n\n*   **Overlapping Layout**: Uses negative margin (-space-x-2) for overlap\n*   **Z-Index Management**: Each avatar has increasing z-index for proper stacking\n*   **Hover Animation**: Spring-based upward translation on hover\n*   **Tooltip Integration**: Built-in tooltip system with customizable content\n*   **Responsive**: Adapts to different avatar sizes\n\n**Animation Properties:**\n\n*   **Default Transition**: Spring animation (stiffness: 400, damping: 30)\n*   **Default Translate**: -30% upward movement\n*   **Hover States**: Smooth enter/exit animations\n*   **Touch Support**: Works on mobile with tap events\n\n### Examples\n\n#### Bottom translation\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/avatar-group-bottom-demo.json)\n\nLoading component...\n\n### Props\n\n#### AvatarGroup\n\nProp\n\nType\n\nDefault\n\n`children`\n\n`React.ReactElement[]`\n\n\\-\n\n`className?`\n\n`string`\n\n\\-\n\n`transition?`\n\n`Transition`\n\n`{ type: 'spring', stiffness: 300, damping: 17 }`\n\n`invertOverlap?`\n\n`boolean`\n\n\\-\n\n`translate?`\n\n`string | number`\n\n`-30%`\n\n`tooltipProps?`\n\n`TooltipProps`\n\n`{ side: 'top', sideOffset: 20 }`\n\n#### AvatarGroupTooltip\n\nProp\n\nType\n\nDefault\n\n`children`\n\n`React.ReactNode`\n\n\\-\n\n## Credits\n\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.084Z",
      "componentName": "avatar-group",
      "demoCode": "<AvatarGroup>\n  {AVATARS.map((avatar, index) => (\n    <Avatar key={index}>\n      <AvatarImage src={avatar.src} />\n      <AvatarFallback>{avatar.fallback}</AvatarFallback>\n      <AvatarGroupTooltip>\n        <p>{avatar.tooltip}</p>\n      </AvatarGroupTooltip>\n    </Avatar>\n  ))}\n</AvatarGroup>",
      "metadata": {
        "description": "An animated avatar group that displays overlapping user images and smoothly shifts each avatar forward on hover to highlight it."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-avatar",
      "url": "https://redpanda-ui-registry.netlify.app/docs/avatar",
      "title": "Avatar",
      "content": "AvatarAn image element with a fallback for representing the user.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nBasic Example\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/redpanda-ui/avatar\"\n\n<Avatar>\n  <AvatarImage src=\"https://github.com/malinskibeniamin.png\" alt=\"@malinskibeniamin\" />\n  <AvatarFallback>BM</AvatarFallback>\n</Avatar>\nDifferent Sizes\n// Small avatar\n<Avatar className=\"h-6 w-6\">\n  <AvatarImage src=\"/user-small.jpg\" alt=\"User\" />\n  <AvatarFallback className=\"text-xs\">U</AvatarFallback>\n</Avatar>\n\n// Default avatar (32px)\n<Avatar>\n  <AvatarImage src=\"/user-default.jpg\" alt=\"User\" />\n  <AvatarFallback>JD</AvatarFallback>\n</Avatar>\n\n// Large avatar\n<Avatar className=\"h-12 w-12\">\n  <AvatarImage src=\"/user-large.jpg\" alt=\"User\" />\n  <AvatarFallback>JD</AvatarFallback>\n</Avatar>\n\n// Extra large avatar\n<Avatar className=\"h-16 w-16\">\n  <AvatarImage src=\"/user-xl.jpg\" alt=\"User\" />\n  <AvatarFallback className=\"text-lg\">JD</AvatarFallback>\n</Avatar>\nFallback Examples\n// Text initials\n<Avatar>\n  <AvatarImage src=\"/broken-link.jpg\" alt=\"User\" />\n  <AvatarFallback>JD</AvatarFallback>\n</Avatar>\n\n// Icon fallback\n<Avatar>\n  <AvatarImage src=\"/broken-link.jpg\" alt=\"User\" />\n  <AvatarFallback>\n    <User className=\"h-4 w-4\" />\n  </AvatarFallback>\n</Avatar>\n\n// Custom background\n<Avatar>\n  <AvatarImage src=\"/broken-link.jpg\" alt=\"User\" />\n  <AvatarFallback className=\"bg-red-500 text-white\">AD</AvatarFallback>\n</Avatar>\nStatus Indicators\n<div className=\"relative\">\n  <Avatar>\n    <AvatarImage src=\"/user.jpg\" alt=\"User\" />\n    <AvatarFallback>JD</AvatarFallback>\n  </Avatar>\n  {/* Online status */}\n  <span className=\"absolute bottom-0 right-0 block h-3 w-3 rounded-full bg-green-500 ring-2 ring-white\" />\n</div>\n\n<div className=\"relative\">\n  <Avatar>\n    <AvatarImage src=\"/user.jpg\" alt=\"User\" />\n    <AvatarFallback>JD</AvatarFallback>\n  </Avatar>\n  {/* Away status */}\n  <span className=\"absolute bottom-0 right-0 block h-3 w-3 rounded-full bg-yellow-500 ring-2 ring-white\" />\n</div>\nWhen to use\nUse Avatar to represent users or entities with their profile image and a fallback option:\n\nUse Avatar when:\n\nDisplaying user profile pictures in interfaces\nShowing author information in comments or posts\nRepresenting team members or contacts\nBuilding user lists or member directories\nCreating user account interfaces\n\nDon't use Avatar when:\n\nDisplaying non-user related images (use Image instead)\nBuilding image galleries (use Image)\nShowing logos or brand images (use Image)\nThe image doesn't represent a person or entity\n\nAnatomy\nThe Avatar component uses a layered approach with automatic fallback handling:\nAvatar Container (32px × 32px by default)\n┌─────────────────────────────────────────────────┐\n│ Avatar Root (relative, rounded-full)            │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ AvatarImage (absolute, fills container)     │ │\n│ │ - Loads asynchronously                      │ │\n│ │ - Hidden if fails to load                   │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ AvatarFallback (backup content)             │ │\n│ │ - Shows when image fails/loading            │ │\n│ │ - Text initials or icon                     │ │\n│ │ - Centered content                          │ │\n│ └─────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────┘\n\nFallback Logic:\n1. Show AvatarImage if available and loads successfully\n2. Show AvatarFallback if image fails or while loading\n3. AvatarFallback always rendered but hidden when image loads\nComponent Hierarchy:\n\nAvatar (Root): Container with circular shape and sizing\nAvatarImage: Primary image that loads asynchronously\nAvatarFallback: Backup content (initials, icon, or text)\n\nKey Features:\n\nAutomatic Fallback: Seamlessly switches between image and fallback\nLoading States: Handles image loading gracefully\nResponsive: Easily customizable sizes with CSS classes\nAccessible: Proper alt text and semantic structure\nCircular Shape: Default rounded-full styling\n\nCommon Patterns:\n\nUser Initials: First letter of first and last name\nIcon Fallback: Generic user icon when no initials available\nCustom Colors: Different background colors for visual variety\nStatus Indicators: Overlay elements for online/offline status\nSize Variants: Small (24px), Default (32px), Large (48px), XL (64px)\n\nProps\nDocsAPI Reference\nCredits\n\nWe use Radix UI for the avatar component.\nWe take our inspiration from Shadcn UI for the avatar style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Avatar\n\nAn image element with a fallback for representing the user.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/avatar.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/avatar)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/avatar)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/avatar-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n### Basic Example\n\n```\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/redpanda-ui/avatar\"\n\n<Avatar>\n  <AvatarImage src=\"https://github.com/malinskibeniamin.png\" alt=\"@malinskibeniamin\" />\n  <AvatarFallback>BM</AvatarFallback>\n</Avatar>\n```\n\n### Different Sizes\n\n```\n// Small avatar\n<Avatar className=\"h-6 w-6\">\n  <AvatarImage src=\"/user-small.jpg\" alt=\"User\" />\n  <AvatarFallback className=\"text-xs\">U</AvatarFallback>\n</Avatar>\n\n// Default avatar (32px)\n<Avatar>\n  <AvatarImage src=\"/user-default.jpg\" alt=\"User\" />\n  <AvatarFallback>JD</AvatarFallback>\n</Avatar>\n\n// Large avatar\n<Avatar className=\"h-12 w-12\">\n  <AvatarImage src=\"/user-large.jpg\" alt=\"User\" />\n  <AvatarFallback>JD</AvatarFallback>\n</Avatar>\n\n// Extra large avatar\n<Avatar className=\"h-16 w-16\">\n  <AvatarImage src=\"/user-xl.jpg\" alt=\"User\" />\n  <AvatarFallback className=\"text-lg\">JD</AvatarFallback>\n</Avatar>\n```\n\n### Fallback Examples\n\n```\n// Text initials\n<Avatar>\n  <AvatarImage src=\"/broken-link.jpg\" alt=\"User\" />\n  <AvatarFallback>JD</AvatarFallback>\n</Avatar>\n\n// Icon fallback\n<Avatar>\n  <AvatarImage src=\"/broken-link.jpg\" alt=\"User\" />\n  <AvatarFallback>\n    <User className=\"h-4 w-4\" />\n  </AvatarFallback>\n</Avatar>\n\n// Custom background\n<Avatar>\n  <AvatarImage src=\"/broken-link.jpg\" alt=\"User\" />\n  <AvatarFallback className=\"bg-red-500 text-white\">AD</AvatarFallback>\n</Avatar>\n```\n\n### Status Indicators\n\n```\n<div className=\"relative\">\n  <Avatar>\n    <AvatarImage src=\"/user.jpg\" alt=\"User\" />\n    <AvatarFallback>JD</AvatarFallback>\n  </Avatar>\n  {/* Online status */}\n  <span className=\"absolute bottom-0 right-0 block h-3 w-3 rounded-full bg-green-500 ring-2 ring-white\" />\n</div>\n\n<div className=\"relative\">\n  <Avatar>\n    <AvatarImage src=\"/user.jpg\" alt=\"User\" />\n    <AvatarFallback>JD</AvatarFallback>\n  </Avatar>\n  {/* Away status */}\n  <span className=\"absolute bottom-0 right-0 block h-3 w-3 rounded-full bg-yellow-500 ring-2 ring-white\" />\n</div>\n```\n\n## When to use\n\nUse Avatar to represent users or entities with their profile image and a fallback option:\n\n**Use Avatar when:**\n\n*   Displaying user profile pictures in interfaces\n*   Showing author information in comments or posts\n*   Representing team members or contacts\n*   Building user lists or member directories\n*   Creating user account interfaces\n\n**Don't use Avatar when:**\n\n*   Displaying non-user related images (use Image instead)\n*   Building image galleries (use Image)\n*   Showing logos or brand images (use Image)\n*   The image doesn't represent a person or entity\n\n## Anatomy\n\nThe Avatar component uses a layered approach with automatic fallback handling:\n\n```\nAvatar Container (32px × 32px by default)\n┌─────────────────────────────────────────────────┐\n│ Avatar Root (relative, rounded-full)            │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ AvatarImage (absolute, fills container)     │ │\n│ │ - Loads asynchronously                      │ │\n│ │ - Hidden if fails to load                   │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ AvatarFallback (backup content)             │ │\n│ │ - Shows when image fails/loading            │ │\n│ │ - Text initials or icon                     │ │\n│ │ - Centered content                          │ │\n│ └─────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────┘\n\nFallback Logic:\n1. Show AvatarImage if available and loads successfully\n2. Show AvatarFallback if image fails or while loading\n3. AvatarFallback always rendered but hidden when image loads\n```\n\n**Component Hierarchy:**\n\n1.  **Avatar** (Root): Container with circular shape and sizing\n2.  **AvatarImage**: Primary image that loads asynchronously\n3.  **AvatarFallback**: Backup content (initials, icon, or text)\n\n**Key Features:**\n\n*   **Automatic Fallback**: Seamlessly switches between image and fallback\n*   **Loading States**: Handles image loading gracefully\n*   **Responsive**: Easily customizable sizes with CSS classes\n*   **Accessible**: Proper alt text and semantic structure\n*   **Circular Shape**: Default rounded-full styling\n\n**Common Patterns:**\n\n*   **User Initials**: First letter of first and last name\n*   **Icon Fallback**: Generic user icon when no initials available\n*   **Custom Colors**: Different background colors for visual variety\n*   **Status Indicators**: Overlay elements for online/offline status\n*   **Size Variants**: Small (24px), Default (32px), Large (48px), XL (64px)\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/avatar)[API Reference](https://www.radix-ui.com/primitives/docs/components/avatar#api-reference)\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/avatar) for the avatar component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/avatar) for the avatar style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.576Z",
      "componentName": "avatar",
      "demoCode": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/redpanda-ui/avatar\"\n\n<Avatar>\n  <AvatarImage src=\"https://github.com/malinskibeniamin.png\" alt=\"@malinskibeniamin\" />\n  <AvatarFallback>BM</AvatarFallback>\n</Avatar>",
      "metadata": {
        "description": "An image element with a fallback for representing the user.",
        "dependencies": [
          "@/components/redpanda-ui/avatar"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-badge",
      "url": "https://redpanda-ui-registry.netlify.app/docs/badge",
      "title": "Badge",
      "content": "BadgeDisplays a badge or a component that looks like a badge.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nBasic Examples\nimport { Badge } from \"@/components/redpanda-ui/badge\"\n\n// Default badge\n<Badge>Default</Badge>\n\n// Different variants\n<Badge variant=\"secondary\">Secondary</Badge>\n<Badge variant=\"outline\">Outline</Badge>\n<Badge variant=\"destructive\">Destructive</Badge>\nStatus Indicators\n<div className=\"flex gap-2\">\n  <Badge variant=\"default\">Active</Badge>\n  <Badge variant=\"secondary\">Pending</Badge>\n  <Badge variant=\"outline\">Draft</Badge>\n  <Badge variant=\"destructive\">Error</Badge>\n</div>\nWith Icons\nimport { CheckCircle, AlertCircle, Clock, X } from \"lucide-react\"\n\n<div className=\"flex gap-2 flex-wrap\">\n  <Badge variant=\"default\">\n    <CheckCircle />Completed\n  </Badge>\n  <Badge variant=\"secondary\">\n    <Clock />In Progress\n  </Badge>\n  <Badge variant=\"outline\">\n    <AlertCircle />Warning\n  </Badge>\n  <Badge variant=\"destructive\">\n    <X />Failed\n  </Badge>\n</div>\nAs Link\nimport { Link } from \"next/link\"\n\n<Badge asChild>\n  <Link href=\"/category/react\">React</Link>\n</Badge>\nCount Badges\n<div className=\"flex gap-4\">\n  <div className=\"relative\">\n    <span>Notifications</span>\n    <Badge className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs\">\n      3\n    </Badge>\n  </div>\n  \n  <div className=\"relative\">\n    <span>Messages</span>\n    <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs\">\n      12\n    </Badge>\n  </div>\n</div>\nWhen to use\nUse Badge to highlight status, categories, or metadata in a compact, visually distinct way:\n\nUse Badge when:\n\nDisplaying status information (Active, Pending, Complete)\nShowing categories or tags\nIndicating counts or numbers\nHighlighting important metadata\nCreating filterable tags or labels\n\nDon't use Badge when:\n\nContent is too long (use a label or text instead)\nYou need complex interactive elements (use Button instead)\nInformation is not supplementary (use primary text instead)\nBadge would be the only way to convey critical information\n\nAnatomy\nThe Badge component is a simple, flexible inline element with variant-based styling:\nBadge Container\n┌─────────────────────────────────────────────────┐\n│ Badge Element (span or Slot)                        │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ [Icon] Text Content                           │ │\n│ │ - Icons automatically sized (12px)             │ │\n│ │ - Text truncated if too long                   │ │\n│ │ - Consistent padding (8px x 4px)               │ │\n│ └─────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────┘\n\nVariant Styles:\ndefault    - Primary background, white text\nsecondary  - Muted background, dark text  \noutline    - Border only, inherit text color\ndestructive - Red background, white text\nComponent Structure:\n\nBadge (Root): Main container with variant-based styling\nContent: Text and optional icons with automatic sizing\nSlot Support: Can wrap other components with asChild prop\n\nKey Features:\n\nVariants: Four built-in styles for different use cases\nIcon Support: Automatic icon sizing and spacing\nResponsive: Truncates long text gracefully\nAccessible: Proper focus states and ARIA support\nComposable: Works as wrapper for links and buttons\n\nStyling Details:\n\nSize: Small text (12px) with minimal padding\nShape: Rounded corners for modern appearance\nColors: Theme-aware with proper contrast ratios\nHover States: Interactive when used with asChild\nFocus: Visible focus rings for accessibility\n\nCredits\n\nWe take our inspiration from Shadcn UI for the badge component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Badge\n\nDisplays a badge or a component that looks like a badge.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/badge.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/badge)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/badge-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n### Basic Examples\n\n```\nimport { Badge } from \"@/components/redpanda-ui/badge\"\n\n// Default badge\n<Badge>Default</Badge>\n\n// Different variants\n<Badge variant=\"secondary\">Secondary</Badge>\n<Badge variant=\"outline\">Outline</Badge>\n<Badge variant=\"destructive\">Destructive</Badge>\n```\n\n### Status Indicators\n\n```\n<div className=\"flex gap-2\">\n  <Badge variant=\"default\">Active</Badge>\n  <Badge variant=\"secondary\">Pending</Badge>\n  <Badge variant=\"outline\">Draft</Badge>\n  <Badge variant=\"destructive\">Error</Badge>\n</div>\n```\n\n### With Icons\n\n```\nimport { CheckCircle, AlertCircle, Clock, X } from \"lucide-react\"\n\n<div className=\"flex gap-2 flex-wrap\">\n  <Badge variant=\"default\">\n    <CheckCircle />Completed\n  </Badge>\n  <Badge variant=\"secondary\">\n    <Clock />In Progress\n  </Badge>\n  <Badge variant=\"outline\">\n    <AlertCircle />Warning\n  </Badge>\n  <Badge variant=\"destructive\">\n    <X />Failed\n  </Badge>\n</div>\n```\n\n### As Link\n\n```\nimport { Link } from \"next/link\"\n\n<Badge asChild>\n  <Link href=\"/category/react\">React</Link>\n</Badge>\n```\n\n### Count Badges\n\n```\n<div className=\"flex gap-4\">\n  <div className=\"relative\">\n    <span>Notifications</span>\n    <Badge className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs\">\n      3\n    </Badge>\n  </div>\n  \n  <div className=\"relative\">\n    <span>Messages</span>\n    <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs\">\n      12\n    </Badge>\n  </div>\n</div>\n```\n\n## When to use\n\nUse Badge to highlight status, categories, or metadata in a compact, visually distinct way:\n\n**Use Badge when:**\n\n*   Displaying status information (Active, Pending, Complete)\n*   Showing categories or tags\n*   Indicating counts or numbers\n*   Highlighting important metadata\n*   Creating filterable tags or labels\n\n**Don't use Badge when:**\n\n*   Content is too long (use a label or text instead)\n*   You need complex interactive elements (use Button instead)\n*   Information is not supplementary (use primary text instead)\n*   Badge would be the only way to convey critical information\n\n## Anatomy\n\nThe Badge component is a simple, flexible inline element with variant-based styling:\n\n```\nBadge Container\n┌─────────────────────────────────────────────────┐\n│ Badge Element (span or Slot)                        │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ [Icon] Text Content                           │ │\n│ │ - Icons automatically sized (12px)             │ │\n│ │ - Text truncated if too long                   │ │\n│ │ - Consistent padding (8px x 4px)               │ │\n│ └─────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────┘\n\nVariant Styles:\ndefault    - Primary background, white text\nsecondary  - Muted background, dark text  \noutline    - Border only, inherit text color\ndestructive - Red background, white text\n```\n\n**Component Structure:**\n\n1.  **Badge** (Root): Main container with variant-based styling\n2.  **Content**: Text and optional icons with automatic sizing\n3.  **Slot Support**: Can wrap other components with asChild prop\n\n**Key Features:**\n\n*   **Variants**: Four built-in styles for different use cases\n*   **Icon Support**: Automatic icon sizing and spacing\n*   **Responsive**: Truncates long text gracefully\n*   **Accessible**: Proper focus states and ARIA support\n*   **Composable**: Works as wrapper for links and buttons\n\n**Styling Details:**\n\n*   **Size**: Small text (12px) with minimal padding\n*   **Shape**: Rounded corners for modern appearance\n*   **Colors**: Theme-aware with proper contrast ratios\n*   **Hover States**: Interactive when used with asChild\n*   **Focus**: Visible focus rings for accessibility\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/badge) for the badge component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.721Z",
      "componentName": "badge",
      "demoCode": "import { Badge } from \"@/components/redpanda-ui/badge\"\n\n// Default badge\n<Badge>Default</Badge>\n\n// Different variants\n<Badge variant=\"secondary\">Secondary</Badge>\n<Badge variant=\"outline\">Outline</Badge>\n<Badge variant=\"destructive\">Destructive</Badge>",
      "metadata": {
        "description": "Displays a badge or a component that looks like a badge.",
        "dependencies": [
          "@/components/redpanda-ui/badge",
          "lucide-react",
          "next/link"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-banner",
      "url": "https://redpanda-ui-registry.netlify.app/docs/banner",
      "title": "Banner",
      "content": "BannerAdd a banner to your site.Made by malinskibeniaminEdit on GitHubPowered byFumadocsOrigin UI\nPreviewCodeAn example banner representation for suspended organization.\nInstallation\nCLI\nWhen to use\nUse Banner for important site-wide announcements that need immediate user attention:\n\nUse Banner when:\n\nAnnouncing system maintenance or downtime\nCommunicating critical security updates\nPromoting important new features\nDisplaying legal notices or policy changes\nShowing account status issues\n\nDon't use Banner when:\n\nMessage is user-specific (use alerts or notifications)\nContent is promotional but not critical\nInformation is page-specific (use inline alerts)\nMessage changes frequently\n\nAnatomy\nThe Banner component provides a persistent notification area:\nBanner Container (full-width, top of page)\n┌─────────────────────────────────────────────────────────────┐\n│ Banner Wrapper                                              │\n│ ├── Icon (optional)                                         │\n│ ├── Message Content                                         │\n│ └── Dismiss Button (optional)                               │\n└─────────────────────────────────────────────────────────────┘\nKey Features:\n\nPersistent: Stays visible across page navigation\nDismissible: Optional close functionality\nResponsive: Adapts to different screen sizes\nAccessible: Proper ARIA labels and keyboard support\n\nUsage\nimport { Banner } from '@/components/redpanda-ui/banner';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Banner>Hello World</Banner>\n        {children}\n      </body>\n    </html>\n  );\n}\nCredits\n\nWe use Fumadocs as inspiration for the banner component.\nWe use Origin UI as inspiration for the banner style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Banner\n\nAdd a banner to your site.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/banner.mdx)\n\nPowered by\n\n[![Fumadocs](https://img.logo.dev/fumadocs.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Fumadocs](https://fumadocs.dev/docs/ui/components/banner)[![Origin UI](https://img.logo.dev/originui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Origin UI](https://originui.com/banner)\n\nPreview\n\nCode\n\nAn example banner representation for suspended organization.\n\n## Installation\n\nCLI\n\n## When to use\n\nUse Banner for important site-wide announcements that need immediate user attention:\n\n**Use Banner when:**\n\n*   Announcing system maintenance or downtime\n*   Communicating critical security updates\n*   Promoting important new features\n*   Displaying legal notices or policy changes\n*   Showing account status issues\n\n**Don't use Banner when:**\n\n*   Message is user-specific (use alerts or notifications)\n*   Content is promotional but not critical\n*   Information is page-specific (use inline alerts)\n*   Message changes frequently\n\n## Anatomy\n\nThe Banner component provides a persistent notification area:\n\n```\nBanner Container (full-width, top of page)\n┌─────────────────────────────────────────────────────────────┐\n│ Banner Wrapper                                              │\n│ ├── Icon (optional)                                         │\n│ ├── Message Content                                         │\n│ └── Dismiss Button (optional)                               │\n└─────────────────────────────────────────────────────────────┘\n```\n\n**Key Features:**\n\n*   **Persistent**: Stays visible across page navigation\n*   **Dismissible**: Optional close functionality\n*   **Responsive**: Adapts to different screen sizes\n*   **Accessible**: Proper ARIA labels and keyboard support\n\n## Usage\n\n```\nimport { Banner } from '@/components/redpanda-ui/banner';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Banner>Hello World</Banner>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n## Credits\n\n*   We use [Fumadocs](https://fumadocs.dev/docs/ui/components/banner) as inspiration for the banner component.\n*   We use [Origin UI](https://originui.com/banner) as inspiration for the banner style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.256Z",
      "componentName": "banner",
      "demoCode": "import { Banner } from '@/components/redpanda-ui/banner';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Banner>Hello World</Banner>\n        {children}\n      </body>\n    </html>\n  );\n}",
      "metadata": {
        "description": "Add a banner to your site.",
        "dependencies": [
          "@/components/redpanda-ui/banner"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-breadcrumb",
      "url": "https://redpanda-ui-registry.netlify.app/docs/breadcrumb",
      "title": "Breadcrumb",
      "content": "BreadcrumbDisplays the path to the current resource using a hierarchy of links.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UILucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\nWhen to use\nUse Breadcrumb to help users understand their current location within a site hierarchy and navigate back to parent levels:\n\nUse Breadcrumb when:\n\nSite has 3 or more hierarchical levels\nUsers need to understand their current location\nContent is organized in clear categories\nUsers frequently navigate between levels\nBuilding e-commerce or documentation sites\n\nDon't use Breadcrumb when:\n\nSite has flat structure (1-2 levels)\nNavigation path is not hierarchical\nCurrent page is the home/landing page\nUsers rarely need to backtrack\nPrimary navigation is sufficient\n\nAnatomy\nThe Breadcrumb component creates a horizontal navigation trail with clear hierarchy:\nBreadcrumb Container\n┌─────────────────────────────────────────────────────────────┐\n│ BreadcrumbList (nav element)                                │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ BreadcrumbItem → BreadcrumbSeparator → BreadcrumbItem   │ │\n│ │ ┌─────────────┐   ┌───────────────┐   ┌───────────────┐ │ │\n│ │ │BreadcrumbLink│   │ ChevronRight  │   │BreadcrumbPage │ │ │\n│ │ │  (clickable) │   │  (separator)  │   │ (current page)│ │ │\n│ │ └─────────────┘   └───────────────┘   └───────────────┘ │ │\n│ └─────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────┘\n\nAdvanced Patterns:\n- BreadcrumbEllipsis for collapsed long paths\n- DropdownMenu integration for category navigation\n- Responsive with Drawer on mobile\nComponent Hierarchy:\n\nBreadcrumb (Root): Main navigation wrapper with semantic meaning\nBreadcrumbList: Ordered list container for screen readers\nBreadcrumbItem: Individual breadcrumb step wrapper\nBreadcrumbLink: Clickable navigation link (for parent pages)\nBreadcrumbPage: Current page indicator (non-clickable)\nBreadcrumbSeparator: Visual divider between items\nBreadcrumbEllipsis: Collapsed state for long breadcrumbs\n\nKey Features:\n\nSemantic HTML: Uses <nav> and <ol> for accessibility\nKeyboard Navigation: Full keyboard support for links\nScreen Reader Support: Proper ARIA labels and structure\nCustomizable Separators: Icons or custom components\nResponsive: Collapsible with ellipsis and dropdowns\nFramework Integration: Works with Next.js Link and other routers\n\nExamples\nCustom separator\nUse a custom component as children for <BreadcrumbSeparator /> to create a custom separator.\nPreviewCodeOpen in v0Loading component...\nimport { Slash } from \"lucide-react\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <Slash />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n\nDropdown\nYou can compose <BreadcrumbItem /> with a <DropdownMenu /> to create a dropdown in the breadcrumb.\nPreviewCodeOpen in v0Loading component...\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\n...\n\n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>\n\nCollapsed\nWe provide a <BreadcrumbEllipsis /> component to show a collapsed state when the breadcrumb is too long.\nPreviewCodeOpen in v0Loading component...\nimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n\nLink component\nTo use a custom link component from your routing library, you can use the asChild prop on <BreadcrumbLink />.\nPreviewCodeOpen in v0Loading component...\nimport { Link } from \"next/link\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n\nCard component\nYou can wrap the breadcrumbs in a Card component to make them stand out more.\nPreviewCodeOpen in v0Loading component...\n<Card className=\"py-2\">\n  <CardContent>\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">\n            <Home className=\"size-4\" />\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  </CardContent>\n</Card>\n\nResponsive\nHere's an example of a responsive breadcrumb that composes <BreadcrumbItem /> with <BreadcrumbEllipsis />, <DropdownMenu />, and <Drawer />.\nIt displays a dropdown on desktop and a drawer on mobile.\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use Radix UI for the slot component.\nWe take our inspiration from Shadcn UI for the breadcrumb style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Breadcrumb\n\nDisplays the path to the current resource using a hierarchy of links.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/breadcrumb.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/breadcrumb)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n```\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\n```\n\n```\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n## When to use\n\nUse Breadcrumb to help users understand their current location within a site hierarchy and navigate back to parent levels:\n\n**Use Breadcrumb when:**\n\n*   Site has 3 or more hierarchical levels\n*   Users need to understand their current location\n*   Content is organized in clear categories\n*   Users frequently navigate between levels\n*   Building e-commerce or documentation sites\n\n**Don't use Breadcrumb when:**\n\n*   Site has flat structure (1-2 levels)\n*   Navigation path is not hierarchical\n*   Current page is the home/landing page\n*   Users rarely need to backtrack\n*   Primary navigation is sufficient\n\n## Anatomy\n\nThe Breadcrumb component creates a horizontal navigation trail with clear hierarchy:\n\n```\nBreadcrumb Container\n┌─────────────────────────────────────────────────────────────┐\n│ BreadcrumbList (nav element)                                │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ BreadcrumbItem → BreadcrumbSeparator → BreadcrumbItem   │ │\n│ │ ┌─────────────┐   ┌───────────────┐   ┌───────────────┐ │ │\n│ │ │BreadcrumbLink│   │ ChevronRight  │   │BreadcrumbPage │ │ │\n│ │ │  (clickable) │   │  (separator)  │   │ (current page)│ │ │\n│ │ └─────────────┘   └───────────────┘   └───────────────┘ │ │\n│ └─────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────┘\n\nAdvanced Patterns:\n- BreadcrumbEllipsis for collapsed long paths\n- DropdownMenu integration for category navigation\n- Responsive with Drawer on mobile\n```\n\n**Component Hierarchy:**\n\n1.  **Breadcrumb** (Root): Main navigation wrapper with semantic meaning\n2.  **BreadcrumbList**: Ordered list container for screen readers\n3.  **BreadcrumbItem**: Individual breadcrumb step wrapper\n4.  **BreadcrumbLink**: Clickable navigation link (for parent pages)\n5.  **BreadcrumbPage**: Current page indicator (non-clickable)\n6.  **BreadcrumbSeparator**: Visual divider between items\n7.  **BreadcrumbEllipsis**: Collapsed state for long breadcrumbs\n\n**Key Features:**\n\n*   **Semantic HTML**: Uses `<nav>` and `<ol>` for accessibility\n*   **Keyboard Navigation**: Full keyboard support for links\n*   **Screen Reader Support**: Proper ARIA labels and structure\n*   **Customizable Separators**: Icons or custom components\n*   **Responsive**: Collapsible with ellipsis and dropdowns\n*   **Framework Integration**: Works with Next.js Link and other routers\n\n## Examples\n\n### Custom separator\n\nUse a custom component as `children` for `<BreadcrumbSeparator />` to create a custom separator.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-separator-demo.json)\n\nLoading component...\n\n```\nimport { Slash } from \"lucide-react\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <Slash />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n* * *\n\n### Dropdown\n\nYou can compose `<BreadcrumbItem />` with a `<DropdownMenu />` to create a dropdown in the breadcrumb.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-dropdown-demo.json)\n\nLoading component...\n\n```\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\n...\n\n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>\n```\n\n* * *\n\n### Collapsed\n\nWe provide a `<BreadcrumbEllipsis />` component to show a collapsed state when the breadcrumb is too long.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-ellipsis-demo.json)\n\nLoading component...\n\n```\nimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n* * *\n\n### Link component\n\nTo use a custom link component from your routing library, you can use the `asChild` prop on `<BreadcrumbLink />`.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-link-demo.json)\n\nLoading component...\n\n```\nimport { Link } from \"next/link\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n* * *\n\n### Card component\n\nYou can wrap the breadcrumbs in a Card component to make them stand out more.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-card-demo.json)\n\nLoading component...\n\n```\n<Card className=\"py-2\">\n  <CardContent>\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">\n            <Home className=\"size-4\" />\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  </CardContent>\n</Card>\n```\n\n* * *\n\n### Responsive\n\nHere's an example of a responsive breadcrumb that composes `<BreadcrumbItem />` with `<BreadcrumbEllipsis />`, `<DropdownMenu />`, and `<Drawer />`.\n\nIt displays a dropdown on desktop and a drawer on mobile.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/breadcrumb-responsive-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot) for the slot component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/breadcrumb) for the breadcrumb style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.790Z",
      "componentName": "breadcrumb",
      "demoCode": "<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>",
      "metadata": {
        "description": "Displays the path to the current resource using a hierarchy of links.",
        "dependencies": [
          "lucide-react",
          "@/components/ui/breadcrumb",
          "next/link"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-button",
      "url": "https://redpanda-ui-registry.netlify.app/docs/button",
      "title": "Button",
      "content": "ButtonDisplays a button or a component that looks like a button.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Button component supports multiple variants and sizes to fit different use cases in your application:\nimport { Button } from \"@/components/redpanda-ui/button\"\n\n// Basic usage\n<Button>Click me</Button>\n\n// With variants\n<Button variant=\"outline\">Outline Button</Button>\n<Button variant=\"destructive\">Delete</Button>\n<Button variant=\"ghost\">Ghost Button</Button>\n\n// With sizes\n<Button size=\"sm\">Small</Button>\n<Button size=\"lg\">Large</Button>\n<Button size=\"icon\">\n  <Plus className=\"h-4 w-4\" />\n</Button>\n\n// Loading state\n<Button disabled>\n  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n  Loading...\n</Button>\n\n// As a link wrapper\n<Button asChild>\n  <Link href=\"/dashboard\">Go to Dashboard</Link>\n</Button>\nWhen to use\nUse this decision tree to determine when to use the Button component and which variant is most appropriate:\n\nVariant Guidelines\n\nDefault: Primary actions like \"Submit\", \"Save\", \"Continue\"\nDestructive: Actions that delete or remove data like \"Delete\", \"Remove\", \"Cancel subscription\"\nOutline: Secondary actions that need emphasis like \"Edit\", \"Settings\", \"View details\"\nSecondary: Alternative actions like \"Cancel\", \"Back\", \"Skip\"\nGhost: Subtle actions in lists or cards like \"More options\", \"Expand\", navigation items\nLink: Actions that behave like links, typically for navigation\nDashed: Placeholder or \"add new\" actions like \"Add item\", \"Create new\"\n\nLink\nYou can use the buttonVariants helper to create a link that looks like a button.\nimport { buttonVariants } from \"@/components/ui/button\"\n<Link className={buttonVariants({ variant: \"outline\" })}>Click here</Link>\nAlternatively, you can set the asChild parameter and nest the link component from any router, including TanStack/React Router/Next.js/Remix paradigms.\n<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>\nAnatomy\nThe Button component is built with composition in mind, using Radix UI's Slot primitive for flexibility:\nButton Component Structure:\n┌─────────────────────────────────────┐\n│ Button Container                    │\n│ ┌─────────────────────────────────┐ │\n│ │ Slot/HTML button element        │ │\n│ │ ┌─────────────────────────────┐ │ │\n│ │ │ Content Area                │ │ │\n│ │ │ [Icon] [Text] [Icon]        │ │ │\n│ │ │                             │ │ │\n│ │ │ - Icons: auto-sized (4×4)   │ │ │\n│ │ │ - Text: inherits font style │ │ │\n│ │ │ - Gap: 0.5rem between items │ │ │\n│ │ └─────────────────────────────┘ │ │\n│ └─────────────────────────────────┘ │\n│                                     │\n│ Properties:                         │\n│ - variant: styling theme            │\n│ - size: dimensions & padding        │\n│ - asChild: render as child element  │\n│ - disabled: interaction state       │\n└─────────────────────────────────────┘\nComponent Composition\n\nBase: Uses either <button> element or Radix UI Slot for custom components\nStyling: CSS classes via class-variance-authority for consistent theming\nAccessibility: Built-in focus states, disabled states, and ARIA support\nIcons: Automatically sized and positioned with proper spacing\nContent: Flexible content area supporting text, icons, or custom elements\n\nExamples\nPrimary\nPreviewCodeOpen in v0Loading component...\nSecondary\nPreviewCodeOpen in v0Loading component...\nDestructive\nPreviewCodeOpen in v0Loading component...\nOutline\nPreviewCodeOpen in v0Loading component...\nGhost\nPreviewCodeOpen in v0Loading component...\nDashed\nPreviewCodeOpen in v0Loading component...\nLink\nPreviewCodeOpen in v0Loading component...\nIcon\nPreviewCodeOpen in v0Loading component...\nWith Icon\nPreviewCodeOpen in v0Loading component...\nLoading\nPreviewCodeOpen in v0Loading component...\nAs Child\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use Radix UI for the slot component.\nWe take our inspiration from Shadcn UI for the button style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Button\n\nDisplays a button or a component that looks like a button.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/button.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/button)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Button component supports multiple variants and sizes to fit different use cases in your application:\n\n```\nimport { Button } from \"@/components/redpanda-ui/button\"\n\n// Basic usage\n<Button>Click me</Button>\n\n// With variants\n<Button variant=\"outline\">Outline Button</Button>\n<Button variant=\"destructive\">Delete</Button>\n<Button variant=\"ghost\">Ghost Button</Button>\n\n// With sizes\n<Button size=\"sm\">Small</Button>\n<Button size=\"lg\">Large</Button>\n<Button size=\"icon\">\n  <Plus className=\"h-4 w-4\" />\n</Button>\n\n// Loading state\n<Button disabled>\n  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n  Loading...\n</Button>\n\n// As a link wrapper\n<Button asChild>\n  <Link href=\"/dashboard\">Go to Dashboard</Link>\n</Button>\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Button component and which variant is most appropriate:\n\n### Variant Guidelines\n\n*   **Default**: Primary actions like \"Submit\", \"Save\", \"Continue\"\n*   **Destructive**: Actions that delete or remove data like \"Delete\", \"Remove\", \"Cancel subscription\"\n*   **Outline**: Secondary actions that need emphasis like \"Edit\", \"Settings\", \"View details\"\n*   **Secondary**: Alternative actions like \"Cancel\", \"Back\", \"Skip\"\n*   **Ghost**: Subtle actions in lists or cards like \"More options\", \"Expand\", navigation items\n*   **Link**: Actions that behave like links, typically for navigation\n*   **Dashed**: Placeholder or \"add new\" actions like \"Add item\", \"Create new\"\n\n## Link\n\nYou can use the `buttonVariants` helper to create a link that looks like a button.\n\n```\nimport { buttonVariants } from \"@/components/ui/button\"\n```\n\n```\n<Link className={buttonVariants({ variant: \"outline\" })}>Click here</Link>\n```\n\nAlternatively, you can set the `asChild` parameter and nest the link component from any router, including TanStack/React Router/Next.js/Remix paradigms.\n\n```\n<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>\n```\n\n## Anatomy\n\nThe Button component is built with composition in mind, using Radix UI's Slot primitive for flexibility:\n\n```\nButton Component Structure:\n┌─────────────────────────────────────┐\n│ Button Container                    │\n│ ┌─────────────────────────────────┐ │\n│ │ Slot/HTML button element        │ │\n│ │ ┌─────────────────────────────┐ │ │\n│ │ │ Content Area                │ │ │\n│ │ │ [Icon] [Text] [Icon]        │ │ │\n│ │ │                             │ │ │\n│ │ │ - Icons: auto-sized (4×4)   │ │ │\n│ │ │ - Text: inherits font style │ │ │\n│ │ │ - Gap: 0.5rem between items │ │ │\n│ │ └─────────────────────────────┘ │ │\n│ └─────────────────────────────────┘ │\n│                                     │\n│ Properties:                         │\n│ - variant: styling theme            │\n│ - size: dimensions & padding        │\n│ - asChild: render as child element  │\n│ - disabled: interaction state       │\n└─────────────────────────────────────┘\n```\n\n### Component Composition\n\n*   **Base**: Uses either `<button>` element or Radix UI Slot for custom components\n*   **Styling**: CSS classes via `class-variance-authority` for consistent theming\n*   **Accessibility**: Built-in focus states, disabled states, and ARIA support\n*   **Icons**: Automatically sized and positioned with proper spacing\n*   **Content**: Flexible content area supporting text, icons, or custom elements\n\n## Examples\n\n### Primary\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-demo.json)\n\nLoading component...\n\n### Secondary\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-secondary-demo.json)\n\nLoading component...\n\n### Destructive\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-destructive-demo.json)\n\nLoading component...\n\n### Outline\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-outline-demo.json)\n\nLoading component...\n\n### Ghost\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-ghost-demo.json)\n\nLoading component...\n\n### Dashed\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-dashed-demo.json)\n\nLoading component...\n\n### Link\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-link-demo.json)\n\nLoading component...\n\n### Icon\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-icon-demo.json)\n\nLoading component...\n\n### With Icon\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-with-icon-demo.json)\n\nLoading component...\n\n### Loading\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-loading-demo.json)\n\nLoading component...\n\n### As Child\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/button-as-child-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot) for the slot component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/button) for the button style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.888Z",
      "componentName": "button",
      "demoCode": "import { Button } from \"@/components/redpanda-ui/button\"\n\n// Basic usage\n<Button>Click me</Button>\n\n// With variants\n<Button variant=\"outline\">Outline Button</Button>\n<Button variant=\"destructive\">Delete</Button>\n<Button variant=\"ghost\">Ghost Button</Button>\n\n// With sizes\n<Button size=\"sm\">Small</Button>\n<Button size=\"lg\">Large</Button>\n<Button size=\"icon\">\n  <Plus className=\"h-4 w-4\" />\n</Button>\n\n// Loading state\n<Button disabled>\n  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n  Loading...\n</Button>\n\n// As a link wrapper\n<Button asChild>\n  <Link href=\"/dashboard\">Go to Dashboard</Link>\n</Button>",
      "metadata": {
        "description": "Displays a button or a component that looks like a button.",
        "dependencies": [
          "@/components/redpanda-ui/button",
          "@/components/ui/button"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-calendar",
      "url": "https://redpanda-ui-registry.netlify.app/docs/calendar",
      "title": "Calendar",
      "content": "CalendarA date field component that allows users to enter and edit date.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UILucideReact Day Picker\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Calendar component is built on react-day-picker and supports various modes and configurations for different date selection needs:\nimport { Calendar } from \"@/components/redpanda-ui/calendar\"\nimport { useState } from \"react\"\n\n// Single date selection\nconst [date, setDate] = useState<Date | undefined>(new Date())\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n)\n\n// Date range selection\nconst [dateRange, setDateRange] = useState<DateRange | undefined>()\n\nreturn (\n  <Calendar\n    mode=\"range\"\n    selected={dateRange}\n    onSelect={setDateRange}\n    numberOfMonths={2}\n    className=\"rounded-md border\"\n  />\n)\n\n// Multiple date selection\nconst [dates, setDates] = useState<Date[]>([])\n\nreturn (\n  <Calendar\n    mode=\"multiple\"\n    selected={dates}\n    onSelect={setDates}\n    className=\"rounded-md border\"\n  />\n)\n\n// With disabled dates\nconst isDateDisabled = (date: Date) => {\n  return date < new Date() || date.getDay() === 0 || date.getDay() === 6\n}\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    disabled={isDateDisabled}\n    className=\"rounded-md border\"\n  />\n)\nWhen to use\nUse this decision tree to determine when to use the Calendar component and which configuration is most appropriate:\n\nMode Guidelines\n\nSingle mode: Birthdate selection, appointment dates, event dates\nRange mode: Hotel bookings, vacation planning, reporting periods\nMultiple mode: Available dates, blackout dates, recurring events\n\nCalendar vs DatePicker\n\nUse Calendar when: You have space for inline display, users need to see surrounding dates context, visual date exploration is important\nUse DatePicker when: Space is limited, part of a form, simple date input without exploration needs\n\nAnatomy\nThe Calendar component is built on react-day-picker with custom styling and components:\nCalendar Component Structure:\n┌─────────────────────────────────────────┐\n│ Calendar Root Container                 │\n│ ┌─────────────────────────────────────┐ │\n│ │ Navigation Bar                      │ │\n│ │ [◀ Prev] [Month Year] [Next ▶]      │ │\n│ │                                     │ │\n│ │ - Dropdown: month/year selection    │ │\n│ │ - Buttons: navigation controls      │ │\n│ └─────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────┐ │\n│ │ Weekday Headers                     │ │\n│ │ [Mon] [Tue] [Wed] [Thu] [Fri] [Sat] │ │\n│ └─────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────┐ │\n│ │ Date Grid                           │ │\n│ │ [30] [31] [ 1] [ 2] [ 3] [ 4] [ 5]  │ │\n│ │ [ 6] [ 7] [ 8] [ 9] [10] [11] [12]  │ │\n│ │ [13] [14] [15] [16] [17] [18] [19]  │ │\n│ │ [20] [21] [22] [23] [24] [25] [26]  │ │\n│ │ [27] [28] [29] [30] [31] [ 1] [ 2]  │ │\n│ │                                     │ │\n│ │ - Day buttons: individual dates     │ │\n│ │ - States: selected, today, disabled │ │\n│ │ - Range: start, middle, end         │ │\n│ └─────────────────────────────────────┘ │\n│                                         │\n│ Multi-month layout (when enabled):     │\n│ [Month 1] [Month 2] [Month 3]           │\n└─────────────────────────────────────────┘\nComponent Composition\n\nDayPicker Root: Base component from react-day-picker with custom theming\nNavigation: Custom chevron icons and dropdown selectors\nDay Buttons: Custom Button components with selection states\nWeekday Headers: Localized day name labels\nDate Grid: Responsive grid layout with proper spacing\nRange Selection: Visual indicators for start, middle, and end dates\nAccessibility: Full keyboard navigation and screen reader support\n\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nPopover DatePicker\nPreviewCodeOpen in v0Loading component...\nBooked\nPreviewCodeOpen in v0Loading component...\nCustom Days\nPreviewCodeOpen in v0Loading component...\nDisabled Days\nPreviewCodeOpen in v0Loading component...\nDisabled Weekends\nPreviewCodeOpen in v0Loading component...\nEvent Slots\nPreviewCodeOpen in v0Loading component...\nForm\nPreviewCodeOpen in v0Loading component...\nLittle Date\nPreviewCodeOpen in v0Loading component...\nLocalized\nPreviewCodeOpen in v0Loading component...\nMonth Day Dropdown\nPreviewCodeOpen in v0Loading component...\nMulti Month Multi Select\nPreviewCodeOpen in v0Loading component...\nMulti Month Range\nPreviewCodeOpen in v0Loading component...\nPresets\nPreviewCodeOpen in v0Loading component...\nRange Minimum and Maximum Days\nPreviewCodeOpen in v0Loading component...\nRange Minimum Days\nPreviewCodeOpen in v0Loading component...\nSingle Month Range\nPreviewCodeOpen in v0Loading component...\nSize\nPreviewCodeOpen in v0Loading component...\nStart End Month\nPreviewCodeOpen in v0Loading component...\nTime Picker\nPreviewCodeOpen in v0Loading component...\nTime Picker Inline\nPreviewCodeOpen in v0Loading component...\nTime Presets\nPreviewCodeOpen in v0Loading component...\nToday\nPreviewCodeOpen in v0Loading component...\nWeek Numbers\nPreviewCodeOpen in v0Loading component...\nProps\nDocsAPI Reference\nDate Picker\nYou can use the <Calendar> component to build a date picker. See the Date Picker page for more information.\nCredits\n\nWe use react-day-picker for the calendar component.\nWe take our inspiration from Shadcn UI for the calendar style.\nWe took many components from Shadcn UI Blocks for the calendar component.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Calendar\n\nA date field component that allows users to enter and edit date.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/calendar.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/calendar)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)[![React Day Picker](https://img.logo.dev/daypicker.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)React Day Picker](https://daypicker.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Calendar component is built on react-day-picker and supports various modes and configurations for different date selection needs:\n\n```\nimport { Calendar } from \"@/components/redpanda-ui/calendar\"\nimport { useState } from \"react\"\n\n// Single date selection\nconst [date, setDate] = useState<Date | undefined>(new Date())\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n)\n\n// Date range selection\nconst [dateRange, setDateRange] = useState<DateRange | undefined>()\n\nreturn (\n  <Calendar\n    mode=\"range\"\n    selected={dateRange}\n    onSelect={setDateRange}\n    numberOfMonths={2}\n    className=\"rounded-md border\"\n  />\n)\n\n// Multiple date selection\nconst [dates, setDates] = useState<Date[]>([])\n\nreturn (\n  <Calendar\n    mode=\"multiple\"\n    selected={dates}\n    onSelect={setDates}\n    className=\"rounded-md border\"\n  />\n)\n\n// With disabled dates\nconst isDateDisabled = (date: Date) => {\n  return date < new Date() || date.getDay() === 0 || date.getDay() === 6\n}\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    disabled={isDateDisabled}\n    className=\"rounded-md border\"\n  />\n)\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Calendar component and which configuration is most appropriate:\n\n### Mode Guidelines\n\n*   **Single mode**: Birthdate selection, appointment dates, event dates\n*   **Range mode**: Hotel bookings, vacation planning, reporting periods\n*   **Multiple mode**: Available dates, blackout dates, recurring events\n\n### Calendar vs DatePicker\n\n*   **Use Calendar when**: You have space for inline display, users need to see surrounding dates context, visual date exploration is important\n*   **Use DatePicker when**: Space is limited, part of a form, simple date input without exploration needs\n\n## Anatomy\n\nThe Calendar component is built on react-day-picker with custom styling and components:\n\n```\nCalendar Component Structure:\n┌─────────────────────────────────────────┐\n│ Calendar Root Container                 │\n│ ┌─────────────────────────────────────┐ │\n│ │ Navigation Bar                      │ │\n│ │ [◀ Prev] [Month Year] [Next ▶]      │ │\n│ │                                     │ │\n│ │ - Dropdown: month/year selection    │ │\n│ │ - Buttons: navigation controls      │ │\n│ └─────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────┐ │\n│ │ Weekday Headers                     │ │\n│ │ [Mon] [Tue] [Wed] [Thu] [Fri] [Sat] │ │\n│ └─────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────┐ │\n│ │ Date Grid                           │ │\n│ │ [30] [31] [ 1] [ 2] [ 3] [ 4] [ 5]  │ │\n│ │ [ 6] [ 7] [ 8] [ 9] [10] [11] [12]  │ │\n│ │ [13] [14] [15] [16] [17] [18] [19]  │ │\n│ │ [20] [21] [22] [23] [24] [25] [26]  │ │\n│ │ [27] [28] [29] [30] [31] [ 1] [ 2]  │ │\n│ │                                     │ │\n│ │ - Day buttons: individual dates     │ │\n│ │ - States: selected, today, disabled │ │\n│ │ - Range: start, middle, end         │ │\n│ └─────────────────────────────────────┘ │\n│                                         │\n│ Multi-month layout (when enabled):     │\n│ [Month 1] [Month 2] [Month 3]           │\n└─────────────────────────────────────────┘\n```\n\n### Component Composition\n\n*   **DayPicker Root**: Base component from react-day-picker with custom theming\n*   **Navigation**: Custom chevron icons and dropdown selectors\n*   **Day Buttons**: Custom Button components with selection states\n*   **Weekday Headers**: Localized day name labels\n*   **Date Grid**: Responsive grid layout with proper spacing\n*   **Range Selection**: Visual indicators for start, middle, and end dates\n*   **Accessibility**: Full keyboard navigation and screen reader support\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-demo.json)\n\nLoading component...\n\n### Popover DatePicker\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/popover-datepicker-demo.json)\n\nLoading component...\n\n### Booked\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-booked-demo.json)\n\nLoading component...\n\n### Custom Days\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-custom-days-demo.json)\n\nLoading component...\n\n### Disabled Days\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-disabled-days-demo.json)\n\nLoading component...\n\n### Disabled Weekends\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-disabled-weekends-demo.json)\n\nLoading component...\n\n### Event Slots\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-event-slots-demo.json)\n\nLoading component...\n\n### Form\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-form-demo.json)\n\nLoading component...\n\n### Little Date\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-little-date-demo.json)\n\nLoading component...\n\n### Localized\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-localized-demo.json)\n\nLoading component...\n\n### Month Day Dropdown\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-month-day-dropdown-demo.json)\n\nLoading component...\n\n### Multi Month Multi Select\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-multi-month-multi-select-demo.json)\n\nLoading component...\n\n### Multi Month Range\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-multi-month-range-demo.json)\n\nLoading component...\n\n### Presets\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-presets-demo.json)\n\nLoading component...\n\n### Range Minimum and Maximum Days\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-range-minimum-and-maximum-demo.json)\n\nLoading component...\n\n### Range Minimum Days\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-range-minimum-demo.json)\n\nLoading component...\n\n### Single Month Range\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-single-month-range-demo.json)\n\nLoading component...\n\n### Size\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-size-demo.json)\n\nLoading component...\n\n### Start End Month\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-start-end-month-demo.json)\n\nLoading component...\n\n### Time Picker\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-time-picker-demo.json)\n\nLoading component...\n\n### Time Picker Inline\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-time-picker-inline-demo.json)\n\nLoading component...\n\n### Time Presets\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-time-presets-demo.json)\n\nLoading component...\n\n### Today\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-today-demo.json)\n\nLoading component...\n\n### Week Numbers\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/calendar-week-numbers-demo.json)\n\nLoading component...\n\n## Props\n\n[Docs](https://daypicker.dev/)[API Reference](https://daypicker.dev/docs/anatomy)\n\n## Date Picker\n\nYou can use the `<Calendar>` component to build a date picker. See the [Date Picker](/docs/date-picker) page for more information.\n\n## Credits\n\n*   We use [react-day-picker](https://daypicker.dev/) for the calendar component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/calendar) for the calendar style.\n*   We took many components from [Shadcn UI Blocks](https://ui.shadcn.com/blocks/calendar) for the calendar component.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.267Z",
      "componentName": "calendar",
      "demoCode": "import { Calendar } from \"@/components/redpanda-ui/calendar\"\nimport { useState } from \"react\"\n\n// Single date selection\nconst [date, setDate] = useState<Date | undefined>(new Date())\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n)\n\n// Date range selection\nconst [dateRange, setDateRange] = useState<DateRange | undefined>()\n\nreturn (\n  <Calendar\n    mode=\"range\"\n    selected={dateRange}\n    onSelect={setDateRange}\n    numberOfMonths={2}\n    className=\"rounded-md border\"\n  />\n)\n\n// Multiple date selection\nconst [dates, setDates] = useState<Date[]>([])\n\nreturn (\n  <Calendar\n    mode=\"multiple\"\n    selected={dates}\n    onSelect={setDates}\n    className=\"rounded-md border\"\n  />\n)\n\n// With disabled dates\nconst isDateDisabled = (date: Date) => {\n  return date < new Date() || date.getDay() === 0 || date.getDay() === 6\n}\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    disabled={isDateDisabled}\n    className=\"rounded-md border\"\n  />\n)",
      "metadata": {
        "description": "A date field component that allows users to enter and edit date.",
        "dependencies": [
          "@/components/redpanda-ui/calendar",
          "react"
        ]
      },
      "isComponent": true,
      "isBlock": true
    },
    {
      "id": "-card",
      "url": "https://redpanda-ui-registry.netlify.app/docs/card",
      "title": "Card",
      "content": "CardDisplays a card with header, content, and footer.Made by shadcnEdit on GitHubPowered byShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Card component provides a flexible container for grouping related content and actions. It supports multiple sizes, variants, and includes specialized form helpers for common use cases.\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  CardForm,\n  CardField,\n} from \"@/components/redpanda-ui/card\"\nWhen to use\nUse this decision tree to determine when to use the Card component:\n\nUse Card when:\n\nGrouping related information and actions\nCreating forms with consistent layout\nDisplaying structured content with header/footer\nBuilding dashboard widgets or panels\nContaining interactive elements that belong together\n\nDon't use Card for:\n\nSingle pieces of information (use Typography)\nNavigation elements (use Navigation components)\nModal overlays (use Dialog/Sheet)\nSimple dividers (use Separator)\n\nAnatomy\nThe Card component is built with a flexible system of sub-components that work together:\nCard Component Structure:\n┌─────────────────────────────────────────────────────┐\n│ <Card> (Container with padding, border, background) │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardHeader> (Optional)                         │ │\n│ │ ┌─────────────────┐ ┌─────────────────────────┐ │ │\n│ │ │ Left Content    │ │ <CardAction> (Optional) │ │ │\n│ │ │ ┌─────────────┐ │ │ - Buttons/Icons         │ │ │\n│ │ │ │<CardTitle>  │ │ │ - Menu triggers         │ │ │\n│ │ │ └─────────────┘ │ │                         │ │ │\n│ │ │ ┌─────────────┐ │ │                         │ │ │\n│ │ │ │<CardDesc>   │ │ │                         │ │ │\n│ │ │ └─────────────┘ │ │                         │ │ │\n│ │ └─────────────────┘ └─────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardContent> (Main content area)               │ │\n│ │                                                 │ │\n│ │ For forms:                                      │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ <CardForm> (Grid layout)                    │ │ │\n│ │ │ ┌─────────────┐ ┌─────────────────────────┐ │ │ │\n│ │ │ │ <CardField> │ │ <CardField>             │ │ │ │\n│ │ │ │ [Label]     │ │ [Label]                 │ │ │ │\n│ │ │ │ [Input]     │ │ [Select/Textarea/etc]   │ │ │ │\n│ │ │ └─────────────┘ └─────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardFooter> (Actions/Navigation)               │ │\n│ │ [Button] [Button] ... [Button]                  │ │\n│ │ (justification: start|center|end|between)       │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nSize System:\n• sm: Max-width 384px, compact padding (px-12 py-8)\n• md: Max-width 448px, standard padding (px-16 py-12)\n• lg: Max-width 512px, generous padding (px-20 py-16)\n• xl: Max-width 576px, spacious padding (px-24 py-20)\n• full: Full width, standard padding (px-16 py-12)\n\nVariant System:\n• default: Standard card with border and shadow\n• elevated: Enhanced shadow for prominence\n• outlined: Thicker border, less shadow\n• ghost: Transparent background, no border/shadow\n\nForm Helpers:\n• CardForm: Automatic grid layout with consistent spacing\n• CardField: Vertical label/input layout with proper spacing\nBasic Card\n<Card size=\"md\">\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\nForm Card (Simplified Layout)\n<Card size=\"sm\">\n  <CardHeader>\n    <CardTitle>Contact Form</CardTitle>\n    <CardDescription>Get in touch with us</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <CardForm>\n      <CardField>\n        <Label htmlFor=\"name\">Name</Label>\n        <Input id=\"name\" placeholder=\"Your name\" />\n      </CardField>\n      <CardField>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input id=\"email\" type=\"email\" placeholder=\"your@email.com\" />\n      </CardField>\n    </CardForm>\n  </CardContent>\n  <CardFooter>\n    <Button>Submit</Button>\n  </CardFooter>\n</Card>\nVariants\nCard Sizes\nThe Card component supports multiple sizes to fit different use cases:\n<Card size=\"sm\">Small card (max-w-sm, p-4)</Card>\n<Card size=\"md\">Medium card (max-w-md, p-6)</Card>\n<Card size=\"lg\">Large card (max-w-lg, p-8)</Card>\n<Card size=\"xl\">Extra large card (max-w-xl, p-10)</Card>\n<Card size=\"full\">Full width card (w-full, p-6)</Card>\nCard Variants\n<Card variant=\"default\">Default styling</Card>\n<Card variant=\"elevated\">Enhanced shadow</Card>\n<Card variant=\"outlined\">Thicker border</Card>\n<Card variant=\"ghost\">No background or border</Card>\nFooter Layouts\n<CardFooter justify=\"between\">Buttons on sides</CardFooter>\n<CardFooter justify=\"end\">Buttons on right</CardFooter>\n<CardFooter direction=\"column\">Stacked buttons</CardFooter>\nForm Helpers\nThe CardForm and CardField components eliminate the need for manual layout classes:\n\nCardForm: Provides consistent grid layout and spacing for form elements\nCardField: Handles label and input spacing automatically\n\n// Before (manual layout)\n<div className=\"grid w-full items-center gap-4\">\n  <div className=\"flex flex-col space-y-1.5\">\n    <Label>Name</Label>\n    <Input />\n  </div>\n</div>\n\n// After (automatic layout)\n<CardForm>\n  <CardField>\n    <Label>Name</Label>\n    <Input />\n  </CardField>\n</CardForm>\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nLogin example\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe take our inspiration from Shadcn UI for the card component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Card\n\nDisplays a card with header, content, and footer.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/card.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/card)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/card-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Card component provides a flexible container for grouping related content and actions. It supports multiple sizes, variants, and includes specialized form helpers for common use cases.\n\n```\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  CardForm,\n  CardField,\n} from \"@/components/redpanda-ui/card\"\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Card component:\n\n**Use Card when:**\n\n*   Grouping related information and actions\n*   Creating forms with consistent layout\n*   Displaying structured content with header/footer\n*   Building dashboard widgets or panels\n*   Containing interactive elements that belong together\n\n**Don't use Card for:**\n\n*   Single pieces of information (use Typography)\n*   Navigation elements (use Navigation components)\n*   Modal overlays (use Dialog/Sheet)\n*   Simple dividers (use Separator)\n\n## Anatomy\n\nThe Card component is built with a flexible system of sub-components that work together:\n\n```\nCard Component Structure:\n┌─────────────────────────────────────────────────────┐\n│ <Card> (Container with padding, border, background) │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardHeader> (Optional)                         │ │\n│ │ ┌─────────────────┐ ┌─────────────────────────┐ │ │\n│ │ │ Left Content    │ │ <CardAction> (Optional) │ │ │\n│ │ │ ┌─────────────┐ │ │ - Buttons/Icons         │ │ │\n│ │ │ │<CardTitle>  │ │ │ - Menu triggers         │ │ │\n│ │ │ └─────────────┘ │ │                         │ │ │\n│ │ │ ┌─────────────┐ │ │                         │ │ │\n│ │ │ │<CardDesc>   │ │ │                         │ │ │\n│ │ │ └─────────────┘ │ │                         │ │ │\n│ │ └─────────────────┘ └─────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardContent> (Main content area)               │ │\n│ │                                                 │ │\n│ │ For forms:                                      │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ <CardForm> (Grid layout)                    │ │ │\n│ │ │ ┌─────────────┐ ┌─────────────────────────┐ │ │ │\n│ │ │ │ <CardField> │ │ <CardField>             │ │ │ │\n│ │ │ │ [Label]     │ │ [Label]                 │ │ │ │\n│ │ │ │ [Input]     │ │ [Select/Textarea/etc]   │ │ │ │\n│ │ │ └─────────────┘ └─────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardFooter> (Actions/Navigation)               │ │\n│ │ [Button] [Button] ... [Button]                  │ │\n│ │ (justification: start|center|end|between)       │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nSize System:\n• sm: Max-width 384px, compact padding (px-12 py-8)\n• md: Max-width 448px, standard padding (px-16 py-12)\n• lg: Max-width 512px, generous padding (px-20 py-16)\n• xl: Max-width 576px, spacious padding (px-24 py-20)\n• full: Full width, standard padding (px-16 py-12)\n\nVariant System:\n• default: Standard card with border and shadow\n• elevated: Enhanced shadow for prominence\n• outlined: Thicker border, less shadow\n• ghost: Transparent background, no border/shadow\n\nForm Helpers:\n• CardForm: Automatic grid layout with consistent spacing\n• CardField: Vertical label/input layout with proper spacing\n```\n\n### Basic Card\n\n```\n<Card size=\"md\">\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\n```\n\n### Form Card (Simplified Layout)\n\n```\n<Card size=\"sm\">\n  <CardHeader>\n    <CardTitle>Contact Form</CardTitle>\n    <CardDescription>Get in touch with us</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <CardForm>\n      <CardField>\n        <Label htmlFor=\"name\">Name</Label>\n        <Input id=\"name\" placeholder=\"Your name\" />\n      </CardField>\n      <CardField>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input id=\"email\" type=\"email\" placeholder=\"your@email.com\" />\n      </CardField>\n    </CardForm>\n  </CardContent>\n  <CardFooter>\n    <Button>Submit</Button>\n  </CardFooter>\n</Card>\n```\n\n## Variants\n\n### Card Sizes\n\nThe Card component supports multiple sizes to fit different use cases:\n\n```\n<Card size=\"sm\">Small card (max-w-sm, p-4)</Card>\n<Card size=\"md\">Medium card (max-w-md, p-6)</Card>\n<Card size=\"lg\">Large card (max-w-lg, p-8)</Card>\n<Card size=\"xl\">Extra large card (max-w-xl, p-10)</Card>\n<Card size=\"full\">Full width card (w-full, p-6)</Card>\n```\n\n### Card Variants\n\n```\n<Card variant=\"default\">Default styling</Card>\n<Card variant=\"elevated\">Enhanced shadow</Card>\n<Card variant=\"outlined\">Thicker border</Card>\n<Card variant=\"ghost\">No background or border</Card>\n```\n\n### Footer Layouts\n\n```\n<CardFooter justify=\"between\">Buttons on sides</CardFooter>\n<CardFooter justify=\"end\">Buttons on right</CardFooter>\n<CardFooter direction=\"column\">Stacked buttons</CardFooter>\n```\n\n## Form Helpers\n\nThe `CardForm` and `CardField` components eliminate the need for manual layout classes:\n\n*   **CardForm**: Provides consistent grid layout and spacing for form elements\n*   **CardField**: Handles label and input spacing automatically\n\n```\n// Before (manual layout)\n<div className=\"grid w-full items-center gap-4\">\n  <div className=\"flex flex-col space-y-1.5\">\n    <Label>Name</Label>\n    <Input />\n  </div>\n</div>\n\n// After (automatic layout)\n<CardForm>\n  <CardField>\n    <Label>Name</Label>\n    <Input />\n  </CardField>\n</CardForm>\n```\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/card-demo.json)\n\nLoading component...\n\n### Login example\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/card-login-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/card) for the card component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.938Z",
      "componentName": "card",
      "demoCode": "Card Component Structure:\n┌─────────────────────────────────────────────────────┐\n│ <Card> (Container with padding, border, background) │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardHeader> (Optional)                         │ │\n│ │ ┌─────────────────┐ ┌─────────────────────────┐ │ │\n│ │ │ Left Content    │ │ <CardAction> (Optional) │ │ │\n│ │ │ ┌─────────────┐ │ │ - Buttons/Icons         │ │ │\n│ │ │ │<CardTitle>  │ │ │ - Menu triggers         │ │ │\n│ │ │ └─────────────┘ │ │                         │ │ │\n│ │ │ ┌─────────────┐ │ │                         │ │ │\n│ │ │ │<CardDesc>   │ │ │                         │ │ │\n│ │ │ └─────────────┘ │ │                         │ │ │\n│ │ └─────────────────┘ └─────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardContent> (Main content area)               │ │\n│ │                                                 │ │\n│ │ For forms:                                      │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ <CardForm> (Grid layout)                    │ │ │\n│ │ │ ┌─────────────┐ ┌─────────────────────────┐ │ │ │\n│ │ │ │ <CardField> │ │ <CardField>             │ │ │ │\n│ │ │ │ [Label]     │ │ [Label]                 │ │ │ │\n│ │ │ │ [Input]     │ │ [Select/Textarea/etc]   │ │ │ │\n│ │ │ └─────────────┘ └─────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <CardFooter> (Actions/Navigation)               │ │\n│ │ [Button] [Button] ... [Button]                  │ │\n│ │ (justification: start|center|end|between)       │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nSize System:\n• sm: Max-width 384px, compact padding (px-12 py-8)\n• md: Max-width 448px, standard padding (px-16 py-12)\n• lg: Max-width 512px, generous padding (px-20 py-16)\n• xl: Max-width 576px, spacious padding (px-24 py-20)\n• full: Full width, standard padding (px-16 py-12)\n\nVariant System:\n• default: Standard card with border and shadow\n• elevated: Enhanced shadow for prominence\n• outlined: Thicker border, less shadow\n• ghost: Transparent background, no border/shadow\n\nForm Helpers:\n• CardForm: Automatic grid layout with consistent spacing\n• CardField: Vertical label/input layout with proper spacing",
      "metadata": {
        "description": "Displays a card with header, content, and footer."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-chart",
      "url": "https://redpanda-ui-registry.netlify.app/docs/chart",
      "title": "Chart",
      "content": "ChartBeautiful charts. Built using Recharts. Copy and paste into your apps.Made by shadcnEdit on GitHubPowered byShadcn UIRecharts\nNote: All up-to-date charts can be found here\nIntroducing Charts. A collection of chart components that you can copy and paste into your apps.\nCharts are designed to look great out of the box. They work well with the other components and are fully customizable to fit your project using the Redpanda UI color system.\nBrowse the Charts Library.\nWhen to use\nUse this decision tree to determine when to use Chart components and which type is most appropriate for your data:\n\nChart Type Guidelines\n\nBar/Column Charts: Comparing quantities across categories, showing rankings or changes over time\nLine Charts: Showing trends over time, continuous data, multiple data series comparisons\nArea Charts: Cumulative values over time, showing volume and trends together\nPie/Donut Charts: Parts of a whole, percentages, composition (limit to 5-6 segments max)\nScatter Plots: Correlations between two variables, distributions, outlier identification\nRadar Charts: Comparing multiple variables across categories, performance metrics\n\nCharts vs Other Components\n\nUse Charts when: You need to visualize quantitative data, show trends, or help users understand relationships between data points\nUse Tables when: Users need to see exact values, perform calculations, or work with detailed records\nUse Progress/Meters when: Showing simple completion status or single metric progress\nUse Statistics Cards when: Displaying key metrics without requiring trend analysis\n\nAnatomy\nThe Chart system is built with composable components using Recharts and a configuration-driven approach:\nChart Component Architecture:\n┌─────────────────────────────────────────────┐\n│ ChartContainer (Context Provider)           │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ChartStyle (Dynamic CSS Generation)     │ │\n│ │ - Generates --color-KEY variables       │ │\n│ │ - Theme-aware color mapping             │ │\n│ │ - Scoped to chart instance              │ │\n│ └─────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ResponsiveContainer (Recharts)          │ │\n│ │ ┌─────────────────────────────────────┐ │ │\n│ │ │ Chart Type (Bar/Line/Area/Pie)      │ │ │\n│ │ │ ┌─────────────────────────────────┐ │ │ │\n│ │ │ │ Data Elements                   │ │ │ │\n│ │ │ │ - Bar, Line, Area segments      │ │ │ │\n│ │ │ │ - Uses var(--color-KEY) refs    │ │ │ │\n│ │ │ └─────────────────────────────────┘ │ │ │\n│ │ │ ┌─────────────────────────────────┐ │ │ │\n│ │ │ │ CartesianGrid (optional)        │ │ │ │\n│ │ │ │ - Background grid lines         │ │ │ │\n│ │ │ └─────────────────────────────────┘ │ │ │\n│ │ │ ┌─────────────────────────────────┐ │ │ │\n│ │ │ │ XAxis / YAxis (optional)        │ │ │ │\n│ │ │ │ - Labeled axes with formatting  │ │ │ │\n│ │ │ └─────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ChartTooltip (Custom Component)         │ │\n│ │ - Appears on hover/focus                │ │\n│ │ - Uses config for labels/colors         │ │\n│ │ - Supports icons and custom formatting  │ │\n│ └─────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ChartLegend (Custom Component)          │ │\n│ │ - Shows data series labels              │ │\n│ │ - Color indicators match chart          │ │\n│ │ - Positioned above/below chart          │ │\n│ └─────────────────────────────────────────┘ │\n└─────────────────────────────────────────────┘\n\nChartConfig Structure:\n{\n  dataKey: {\n    label: \"Human Label\",           // For tooltips/legends\n    icon: IconComponent,            // Optional icon\n    color: \"var(--chart-1)\",        // Theme color reference\n    // OR\n    theme: {                        // Custom theming\n      light: \"#color1\",\n      dark: \"#color2\"\n    }\n  }\n}\nComponent Composition\n\nChartContainer: Root wrapper providing theme context and responsive sizing\nChartConfig: Configuration object defining labels, colors, and icons for data keys\nChartStyle: Dynamic CSS generation for theme-aware color variables\nRecharts Integration: Direct use of Recharts components (Bar, Line, Area, etc.)\nCustom Components: ChartTooltip, ChartLegend for consistent theming\nColor System: Automatic color resolution from CSS variables or theme objects\nAccessibility: Built-in screen reader support via accessibilityLayer prop\n\nComponent\nWe use Recharts under the hood.\nWe designed the chart component with composition in mind. You build your charts using Recharts components and only bring in custom components, such as ChartTooltip, when and where you need it.\nimport { Bar, BarChart } from \"recharts\"\n\nimport { ChartContainer, ChartTooltipContent } from \"@/components/ui/charts\"\n\nexport function MyChart() {\n  return (\n    <ChartContainer>\n      <BarChart data={data}>\n        <Bar dataKey=\"value\" />\n        <ChartTooltip content={<ChartTooltipContent />} />\n      </BarChart>\n    </ChartContainer>\n  )\n}\nWe do not wrap Recharts. This means you're not locked into an abstraction. When a new Recharts version is released, you can follow the official upgrade path to upgrade your charts.\nThe components are yours.\nInstallation\nCLI\nChart Color System\nThe Redpanda UI theme includes a cohesive chart color system defined in theme.css. The colors are built using OKLCH format for better perceptual uniformity and maintain the warm color palette (hue ~28.2) for brand consistency.\nCurrent Chart Colors\nThese colors are already included in your theme.css file:\ntheme.css:root {\n  /* Chart colors using OKLCH format */\n  --chart-1: oklch(0.551 0.15 28.2);\n  --chart-2: oklch(0.776 0.09 28.2);\n  --chart-3: oklch(0.668 0.12 28.2);\n  --chart-4: oklch(0.888 0.08 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\n\n.dark {\n  /* Dark mode chart colors */\n  --chart-1: oklch(0.776 0.09 28.2);\n  --chart-2: oklch(0.668 0.12 28.2);\n  --chart-3: oklch(0.888 0.08 28.2);\n  --chart-4: oklch(0.551 0.15 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\nColor Characteristics\nThe chart colors follow the Redpanda UI design system:\n\nConsistent hue: All colors use hue 28.2 for visual harmony\nVarying lightness and chroma: Creates distinction while maintaining cohesion\nOKLCH format: Ensures perceptual uniformity across different displays\nAutomatic dark mode: Dark mode reorders colors for optimal contrast\n\nUsage in Chart Config\nReference these colors in your chart configuration:\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\", // Uses OKLCH color directly\n  },\n  mobile: {\n    label: \"Mobile\", \n    color: \"var(--chart-2)\",\n  },\n  tablet: {\n    label: \"Tablet\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig\nYour First Chart\nLet's build your first chart. We'll build a bar chart, add a grid, axis, tooltip and legend.\nStart by defining your dataThe following data represents the number of desktop and mobile users for each month.Note: Your data can be in any shape. You are not limited to the shape of the data below. Use the dataKey prop to map your data to the chart.const chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]Define your chart configThe chart config holds configuration for the chart. This is where you place human-readable strings, such as labels, icons and color tokens for theming.import { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfigBuild your chartYou can now build your chart using Recharts components.Important: Remember to set a min-h-[VALUE] on the ChartContainer component. This is required for the chart be responsive.PreviewCodeOpen in v0Loading component...\nAdd a Grid\nLet's add a grid to the chart.\nImport the CartesianGrid component.import { Bar, BarChart, CartesianGrid } from \"recharts\"Add the CartesianGrid component to your chart.<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>PreviewCodeOpen in v0Loading component...\nAdd an Axis\nTo add an x-axis to the chart, we'll use the XAxis component.\nImport the XAxis component.import { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"Add the XAxis component to your chart.<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>PreviewCodeOpen in v0Loading component...\nAdd Tooltip\nSo far we've only used components from Recharts. They look great out of the box thanks to some customization in the chart component.\nTo add a tooltip, we'll use the custom ChartTooltip and ChartTooltipContent components from chart.\nImport the ChartTooltip and ChartTooltipContent components.import { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"Add the components to your chart.<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <ChartTooltip content={<ChartTooltipContent />} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>PreviewCodeOpen in v0Loading component...Hover to see the tooltips. Easy, right? Two components, and we've got a beautiful tooltip.\nAdd Legend\nWe'll do the same for the legend. We'll use the ChartLegend and ChartLegendContent components from chart.\nImport the ChartLegend and ChartLegendContent components.import { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"Add the components to your chart.<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <ChartTooltip content={<ChartTooltipContent />} />\n    <ChartLegend content={<ChartLegendContent />} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>PreviewCodeOpen in v0Loading component...\nDone. You've built your first chart! What's next?\n\nThemes and Colors\nTooltip\nLegend\n\nChart Config\nThe chart config is where you define the labels, icons and colors for a chart.\nIt is intentionally decoupled from chart data.\nThis allows you to share config and color tokens between charts. It can also works independently for cases where your data or color tokens live remotely or in a different format.\nimport { Monitor } from \"lucide-react\"\n\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    icon: Monitor,\n    // Reference Redpanda UI chart colors\n    color: \"var(--chart-1)\",\n    // OR use custom colors in any format\n    color: \"#2563eb\",\n    // OR use theme object with light and dark keys\n    theme: {\n      light: \"var(--chart-1)\",\n      dark: \"var(--chart-2)\",\n    },\n  },\n} satisfies ChartConfig\nTheming\nCharts has built-in support for theming using the Redpanda UI color system. You can use the predefined CSS variables (recommended) or custom color values in any color format, such as hex, hsl or oklch.\nCSS Variables (Recommended)\nThe Redpanda UI theme includes optimized chart colors that automatically work with light and dark modes.\nUse the predefined chart colors from theme.csstheme.css:root {\n  /* These colors are already defined in your theme.css */\n  --chart-1: oklch(0.551 0.15 28.2);\n  --chart-2: oklch(0.776 0.09 28.2);\n  --chart-3: oklch(0.668 0.12 28.2);\n  --chart-4: oklch(0.888 0.08 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\n\n.dark {\n  /* Dark mode variants automatically applied */\n  --chart-1: oklch(0.776 0.09 28.2);\n  --chart-2: oklch(0.668 0.12 28.2);\n  --chart-3: oklch(0.888 0.08 28.2);\n  --chart-4: oklch(0.551 0.15 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}Reference colors in your chartConfigconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\", // Direct OKLCH reference\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\nCustom Colors\nYou can also define your colors directly in the chart config using any color format.\nHex Colors\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"#2563eb\",\n  },\n} satisfies ChartConfig\nOKLCH Colors\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"oklch(0.65 0.2 280)\", // Custom OKLCH color\n  },\n} satisfies ChartConfig\nHSL Colors with CSS Variables\n// Define in theme.css\n:root {\n  --custom-chart-1: 220 70% 50%;\n}\n\n// Use in chart config\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--custom-chart-1))\",\n  },\n} satisfies ChartConfig\nUsing Colors\nTo use the theme colors in your chart, reference the colors using the format var(--color-KEY).\nComponents\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" />\nChart Data\nconst chartData = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\nTailwind\n<LabelList className=\"fill-[--color-desktop]\" />\nBrand Consistency\nFor maximum brand consistency, use the predefined chart colors which follow the Redpanda UI design system:\nconst chartConfig = {\n  primary: { label: \"Primary\", color: \"var(--chart-1)\" },\n  secondary: { label: \"Secondary\", color: \"var(--chart-2)\" },\n  tertiary: { label: \"Tertiary\", color: \"var(--chart-3)\" },\n  quaternary: { label: \"Quaternary\", color: \"var(--chart-4)\" },\n  quinary: { label: \"Quinary\", color: \"var(--chart-5)\" },\n} satisfies ChartConfig\nTooltip\nA chart tooltip contains a label, name, indicator and value. You can use a combination of these to customize your tooltip.\nPreviewCodeOpen in v0Loading component...\nYou can turn on/off any of these using the hideLabel, hideIndicator props and customize the indicator style using the indicator prop.\nUse labelKey and nameKey to use a custom key for the tooltip label and name.\nChart comes with the <ChartTooltip> and <ChartTooltipContent> components. You can use these two components to add custom tooltips to your chart.\nimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\n<ChartTooltip content={<ChartTooltipContent />} />\nProps\nUse the following props to customize the tooltip.\nPropTypeDescriptionlabelKeystringThe config or data key to use for the label.nameKeystringThe config or data key to use for the name.indicatordot line or dashedThe indicator style for the tooltip.hideLabelbooleanWhether to hide the label.hideIndicatorbooleanWhether to hide the indicator.\nColors\nColors are automatically referenced from the chart config using the Redpanda UI color system.\nCustom\nTo use a custom key for tooltip label and names, use the labelKey and nameKey props.\nconst chartData = [\n  { browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Total Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n<ChartTooltip\n  content={<ChartTooltipContent labelKey=\"visitors\" nameKey=\"browser\" />}\n/>\nThis will use Total Visitors for label and Chrome and Safari for the tooltip names.\nLegend\nYou can use the custom <ChartLegend> and <ChartLegendContent> components to add a legend to your chart.\nimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\n<ChartLegend content={<ChartLegendContent />} />\nColors\nColors are automatically referenced from the chart config using the Redpanda UI color system.\nCustom\nTo use a custom key for legend names, use the nameKey prop.\nconst chartData = [\n  { browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\n\nconst chartConfig = {\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n<ChartLegend content={<ChartLegendContent nameKey=\"browser\" />} />\nThis will use Chrome and Safari for the legend names.\nAccessibility\nYou can turn on the accessibilityLayer prop to add an accessible layer to your chart.\nThis prop adds keyboard access and screen reader support to your charts.\n<LineChart accessibilityLayer />\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nWith Filter (dates)\nPreviewCodeOpen in v0Loading component...\nColor Reference\nPredefined Chart Colors\nVariableLight ModeDark ModeUsage--chart-1oklch(0.551 0.15 28.2)oklch(0.776 0.09 28.2)Primary chart color--chart-2oklch(0.776 0.09 28.2)oklch(0.668 0.12 28.2)Secondary chart color--chart-3oklch(0.668 0.12 28.2)oklch(0.888 0.08 28.2)Tertiary chart color--chart-4oklch(0.888 0.08 28.2)oklch(0.551 0.15 28.2)Quaternary chart color--chart-5oklch(0.448 0.18 28.2)oklch(0.448 0.18 28.2)Accent chart color\nAll colors use the Redpanda UI warm color palette (hue 28.2) and are defined in theme.css.\nCredits\n\nWe take our inspiration from Shadcn UI for the chart component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Chart\n\nBeautiful charts. Built using Recharts. Copy and paste into your apps.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/chart.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/chart)[![Recharts](https://img.logo.dev/recharts.org?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Recharts](https://recharts.org/en-US)\n\n**Note:** All up-to-date charts can be found [here](https://ui.shadcn.com/charts)\n\nIntroducing **Charts**. A collection of chart components that you can copy and paste into your apps.\n\nCharts are designed to look great out of the box. They work well with the other components and are fully customizable to fit your project using the Redpanda UI color system.\n\n[Browse the Charts Library](/charts).\n\n## When to use\n\nUse this decision tree to determine when to use Chart components and which type is most appropriate for your data:\n\n### Chart Type Guidelines\n\n*   **Bar/Column Charts**: Comparing quantities across categories, showing rankings or changes over time\n*   **Line Charts**: Showing trends over time, continuous data, multiple data series comparisons\n*   **Area Charts**: Cumulative values over time, showing volume and trends together\n*   **Pie/Donut Charts**: Parts of a whole, percentages, composition (limit to 5-6 segments max)\n*   **Scatter Plots**: Correlations between two variables, distributions, outlier identification\n*   **Radar Charts**: Comparing multiple variables across categories, performance metrics\n\n### Charts vs Other Components\n\n*   **Use Charts when**: You need to visualize quantitative data, show trends, or help users understand relationships between data points\n*   **Use Tables when**: Users need to see exact values, perform calculations, or work with detailed records\n*   **Use Progress/Meters when**: Showing simple completion status or single metric progress\n*   **Use Statistics Cards when**: Displaying key metrics without requiring trend analysis\n\n## Anatomy\n\nThe Chart system is built with composable components using Recharts and a configuration-driven approach:\n\n```\nChart Component Architecture:\n┌─────────────────────────────────────────────┐\n│ ChartContainer (Context Provider)           │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ChartStyle (Dynamic CSS Generation)     │ │\n│ │ - Generates --color-KEY variables       │ │\n│ │ - Theme-aware color mapping             │ │\n│ │ - Scoped to chart instance              │ │\n│ └─────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ResponsiveContainer (Recharts)          │ │\n│ │ ┌─────────────────────────────────────┐ │ │\n│ │ │ Chart Type (Bar/Line/Area/Pie)      │ │ │\n│ │ │ ┌─────────────────────────────────┐ │ │ │\n│ │ │ │ Data Elements                   │ │ │ │\n│ │ │ │ - Bar, Line, Area segments      │ │ │ │\n│ │ │ │ - Uses var(--color-KEY) refs    │ │ │ │\n│ │ │ └─────────────────────────────────┘ │ │ │\n│ │ │ ┌─────────────────────────────────┐ │ │ │\n│ │ │ │ CartesianGrid (optional)        │ │ │ │\n│ │ │ │ - Background grid lines         │ │ │ │\n│ │ │ └─────────────────────────────────┘ │ │ │\n│ │ │ ┌─────────────────────────────────┐ │ │ │\n│ │ │ │ XAxis / YAxis (optional)        │ │ │ │\n│ │ │ │ - Labeled axes with formatting  │ │ │ │\n│ │ │ └─────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ChartTooltip (Custom Component)         │ │\n│ │ - Appears on hover/focus                │ │\n│ │ - Uses config for labels/colors         │ │\n│ │ - Supports icons and custom formatting  │ │\n│ └─────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────┐ │\n│ │ ChartLegend (Custom Component)          │ │\n│ │ - Shows data series labels              │ │\n│ │ - Color indicators match chart          │ │\n│ │ - Positioned above/below chart          │ │\n│ └─────────────────────────────────────────┘ │\n└─────────────────────────────────────────────┘\n\nChartConfig Structure:\n{\n  dataKey: {\n    label: \"Human Label\",           // For tooltips/legends\n    icon: IconComponent,            // Optional icon\n    color: \"var(--chart-1)\",        // Theme color reference\n    // OR\n    theme: {                        // Custom theming\n      light: \"#color1\",\n      dark: \"#color2\"\n    }\n  }\n}\n```\n\n### Component Composition\n\n*   **ChartContainer**: Root wrapper providing theme context and responsive sizing\n*   **ChartConfig**: Configuration object defining labels, colors, and icons for data keys\n*   **ChartStyle**: Dynamic CSS generation for theme-aware color variables\n*   **Recharts Integration**: Direct use of Recharts components (Bar, Line, Area, etc.)\n*   **Custom Components**: ChartTooltip, ChartLegend for consistent theming\n*   **Color System**: Automatic color resolution from CSS variables or theme objects\n*   **Accessibility**: Built-in screen reader support via accessibilityLayer prop\n\n## Component\n\nWe use [Recharts](https://recharts.org/) under the hood.\n\nWe designed the `chart` component with composition in mind. **You build your charts using Recharts components and only bring in custom components, such as `ChartTooltip`, when and where you need it**.\n\n```\nimport { Bar, BarChart } from \"recharts\"\n\nimport { ChartContainer, ChartTooltipContent } from \"@/components/ui/charts\"\n\nexport function MyChart() {\n  return (\n    <ChartContainer>\n      <BarChart data={data}>\n        <Bar dataKey=\"value\" />\n        <ChartTooltip content={<ChartTooltipContent />} />\n      </BarChart>\n    </ChartContainer>\n  )\n}\n```\n\nWe do not wrap Recharts. This means you're not locked into an abstraction. When a new Recharts version is released, you can follow the official upgrade path to upgrade your charts.\n\n**The components are yours**.\n\n## Installation\n\nCLI\n\n## Chart Color System\n\nThe Redpanda UI theme includes a cohesive chart color system defined in `theme.css`. The colors are built using OKLCH format for better perceptual uniformity and maintain the warm color palette (hue ~28.2) for brand consistency.\n\n### Current Chart Colors\n\nThese colors are already included in your `theme.css` file:\n\ntheme.css\n\n```\n:root {\n  /* Chart colors using OKLCH format */\n  --chart-1: oklch(0.551 0.15 28.2);\n  --chart-2: oklch(0.776 0.09 28.2);\n  --chart-3: oklch(0.668 0.12 28.2);\n  --chart-4: oklch(0.888 0.08 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\n\n.dark {\n  /* Dark mode chart colors */\n  --chart-1: oklch(0.776 0.09 28.2);\n  --chart-2: oklch(0.668 0.12 28.2);\n  --chart-3: oklch(0.888 0.08 28.2);\n  --chart-4: oklch(0.551 0.15 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\n```\n\n### Color Characteristics\n\nThe chart colors follow the Redpanda UI design system:\n\n*   **Consistent hue**: All colors use hue `28.2` for visual harmony\n*   **Varying lightness and chroma**: Creates distinction while maintaining cohesion\n*   **OKLCH format**: Ensures perceptual uniformity across different displays\n*   **Automatic dark mode**: Dark mode reorders colors for optimal contrast\n\n### Usage in Chart Config\n\nReference these colors in your chart configuration:\n\n```\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\", // Uses OKLCH color directly\n  },\n  mobile: {\n    label: \"Mobile\", \n    color: \"var(--chart-2)\",\n  },\n  tablet: {\n    label: \"Tablet\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig\n```\n\n## Your First Chart\n\nLet's build your first chart. We'll build a bar chart, add a grid, axis, tooltip and legend.\n\nStart by defining your data\n\nThe following data represents the number of desktop and mobile users for each month.\n\n**Note:** Your data can be in any shape. You are not limited to the shape of the data below. Use the `dataKey` prop to map your data to the chart.\n\n```\nconst chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n```\n\nDefine your chart config\n\nThe chart config holds configuration for the chart. This is where you place human-readable strings, such as labels, icons and color tokens for theming.\n\n```\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n```\n\nBuild your chart\n\nYou can now build your chart using Recharts components.\n\n**Important:** Remember to set a `min-h-[VALUE]` on the `ChartContainer` component. This is required for the chart be responsive.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-demo.json)\n\nLoading component...\n\n### Add a Grid\n\nLet's add a grid to the chart.\n\nImport the `CartesianGrid` component.\n\n```\nimport { Bar, BarChart, CartesianGrid } from \"recharts\"\n```\n\nAdd the `CartesianGrid` component to your chart.\n\n```\n<ChartContainer config={chartConfig} className=\"min-h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>\n```\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-grid-demo.json)\n\nLoading component...\n\n### Add an Axis\n\nTo add an x-axis to the chart, we'll use the `XAxis` component.\n\nImport the `XAxis` component.\n\n```\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\n```\n\nAdd the `XAxis` component to your chart.\n\n```\n<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>\n```\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-axis-demo.json)\n\nLoading component...\n\n### Add Tooltip\n\nSo far we've only used components from Recharts. They look great out of the box thanks to some customization in the `chart` component.\n\nTo add a tooltip, we'll use the custom `ChartTooltip` and `ChartTooltipContent` components from `chart`.\n\nImport the `ChartTooltip` and `ChartTooltipContent` components.\n\n```\nimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\n```\n\nAdd the components to your chart.\n\n```\n<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <ChartTooltip content={<ChartTooltipContent />} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>\n```\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-tooltip-demo.json)\n\nLoading component...\n\nHover to see the tooltips. Easy, right? Two components, and we've got a beautiful tooltip.\n\n### Add Legend\n\nWe'll do the same for the legend. We'll use the `ChartLegend` and `ChartLegendContent` components from `chart`.\n\nImport the `ChartLegend` and `ChartLegendContent` components.\n\n```\nimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\n```\n\nAdd the components to your chart.\n\n```\n<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <ChartTooltip content={<ChartTooltipContent />} />\n    <ChartLegend content={<ChartLegendContent />} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>\n```\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-legend-demo.json)\n\nLoading component...\n\nDone. You've built your first chart! What's next?\n\n*   [Themes and Colors](/docs/chart#theming)\n*   [Tooltip](/docs/chart#tooltip)\n*   [Legend](/docs/chart#legend)\n\n## Chart Config\n\nThe chart config is where you define the labels, icons and colors for a chart.\n\nIt is intentionally decoupled from chart data.\n\nThis allows you to share config and color tokens between charts. It can also works independently for cases where your data or color tokens live remotely or in a different format.\n\n```\nimport { Monitor } from \"lucide-react\"\n\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    icon: Monitor,\n    // Reference Redpanda UI chart colors\n    color: \"var(--chart-1)\",\n    // OR use custom colors in any format\n    color: \"#2563eb\",\n    // OR use theme object with light and dark keys\n    theme: {\n      light: \"var(--chart-1)\",\n      dark: \"var(--chart-2)\",\n    },\n  },\n} satisfies ChartConfig\n```\n\n## Theming\n\nCharts has built-in support for theming using the Redpanda UI color system. You can use the predefined CSS variables (recommended) or custom color values in any color format, such as hex, hsl or oklch.\n\n### CSS Variables (Recommended)\n\nThe Redpanda UI theme includes optimized chart colors that automatically work with light and dark modes.\n\nUse the predefined chart colors from `theme.css`\n\ntheme.css\n\n```\n:root {\n  /* These colors are already defined in your theme.css */\n  --chart-1: oklch(0.551 0.15 28.2);\n  --chart-2: oklch(0.776 0.09 28.2);\n  --chart-3: oklch(0.668 0.12 28.2);\n  --chart-4: oklch(0.888 0.08 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\n\n.dark {\n  /* Dark mode variants automatically applied */\n  --chart-1: oklch(0.776 0.09 28.2);\n  --chart-2: oklch(0.668 0.12 28.2);\n  --chart-3: oklch(0.888 0.08 28.2);\n  --chart-4: oklch(0.551 0.15 28.2);\n  --chart-5: oklch(0.448 0.18 28.2);\n}\n```\n\nReference colors in your `chartConfig`\n\n```\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\", // Direct OKLCH reference\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n```\n\n### Custom Colors\n\nYou can also define your colors directly in the chart config using any color format.\n\n#### Hex Colors\n\n```\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"#2563eb\",\n  },\n} satisfies ChartConfig\n```\n\n#### OKLCH Colors\n\n```\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"oklch(0.65 0.2 280)\", // Custom OKLCH color\n  },\n} satisfies ChartConfig\n```\n\n#### HSL Colors with CSS Variables\n\n```\n// Define in theme.css\n:root {\n  --custom-chart-1: 220 70% 50%;\n}\n\n// Use in chart config\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--custom-chart-1))\",\n  },\n} satisfies ChartConfig\n```\n\n### Using Colors\n\nTo use the theme colors in your chart, reference the colors using the format `var(--color-KEY)`.\n\n#### Components\n\n```\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" />\n```\n\n#### Chart Data\n\n```\nconst chartData = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\n```\n\n#### Tailwind\n\n```\n<LabelList className=\"fill-[--color-desktop]\" />\n```\n\n### Brand Consistency\n\nFor maximum brand consistency, use the predefined chart colors which follow the Redpanda UI design system:\n\n```\nconst chartConfig = {\n  primary: { label: \"Primary\", color: \"var(--chart-1)\" },\n  secondary: { label: \"Secondary\", color: \"var(--chart-2)\" },\n  tertiary: { label: \"Tertiary\", color: \"var(--chart-3)\" },\n  quaternary: { label: \"Quaternary\", color: \"var(--chart-4)\" },\n  quinary: { label: \"Quinary\", color: \"var(--chart-5)\" },\n} satisfies ChartConfig\n```\n\n## Tooltip\n\nA chart tooltip contains a label, name, indicator and value. You can use a combination of these to customize your tooltip.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-tooltip-demo.json)\n\nLoading component...\n\nYou can turn on/off any of these using the `hideLabel`, `hideIndicator` props and customize the indicator style using the `indicator` prop.\n\nUse `labelKey` and `nameKey` to use a custom key for the tooltip label and name.\n\nChart comes with the `<ChartTooltip>` and `<ChartTooltipContent>` components. You can use these two components to add custom tooltips to your chart.\n\n```\nimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\n```\n\n```\n<ChartTooltip content={<ChartTooltipContent />} />\n```\n\n### Props\n\nUse the following props to customize the tooltip.\n\nProp\n\nType\n\nDescription\n\n`labelKey`\n\nstring\n\nThe config or data key to use for the label.\n\n`nameKey`\n\nstring\n\nThe config or data key to use for the name.\n\n`indicator`\n\n`dot` `line` or `dashed`\n\nThe indicator style for the tooltip.\n\n`hideLabel`\n\nboolean\n\nWhether to hide the label.\n\n`hideIndicator`\n\nboolean\n\nWhether to hide the indicator.\n\n### Colors\n\nColors are automatically referenced from the chart config using the Redpanda UI color system.\n\n### Custom\n\nTo use a custom key for tooltip label and names, use the `labelKey` and `nameKey` props.\n\n```\nconst chartData = [\n  { browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Total Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n```\n\n```\n<ChartTooltip\n  content={<ChartTooltipContent labelKey=\"visitors\" nameKey=\"browser\" />}\n/>\n```\n\nThis will use `Total Visitors` for label and `Chrome` and `Safari` for the tooltip names.\n\n## Legend\n\nYou can use the custom `<ChartLegend>` and `<ChartLegendContent>` components to add a legend to your chart.\n\n```\nimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\n```\n\n```\n<ChartLegend content={<ChartLegendContent />} />\n```\n\n### Colors\n\nColors are automatically referenced from the chart config using the Redpanda UI color system.\n\n### Custom\n\nTo use a custom key for legend names, use the `nameKey` prop.\n\n```\nconst chartData = [\n  { browser: \"chrome\", visitors: 187, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\n\nconst chartConfig = {\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n```\n\n```\n<ChartLegend content={<ChartLegendContent nameKey=\"browser\" />} />\n```\n\nThis will use `Chrome` and `Safari` for the legend names.\n\n## Accessibility\n\nYou can turn on the `accessibilityLayer` prop to add an accessible layer to your chart.\n\nThis prop adds keyboard access and screen reader support to your charts.\n\n```\n<LineChart accessibilityLayer />\n```\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-demo.json)\n\nLoading component...\n\n### With Filter (dates)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/chart-bar-filter-demo.json)\n\nLoading component...\n\n## Color Reference\n\n### Predefined Chart Colors\n\nVariable\n\nLight Mode\n\nDark Mode\n\nUsage\n\n`--chart-1`\n\n`oklch(0.551 0.15 28.2)`\n\n`oklch(0.776 0.09 28.2)`\n\nPrimary chart color\n\n`--chart-2`\n\n`oklch(0.776 0.09 28.2)`\n\n`oklch(0.668 0.12 28.2)`\n\nSecondary chart color\n\n`--chart-3`\n\n`oklch(0.668 0.12 28.2)`\n\n`oklch(0.888 0.08 28.2)`\n\nTertiary chart color\n\n`--chart-4`\n\n`oklch(0.888 0.08 28.2)`\n\n`oklch(0.551 0.15 28.2)`\n\nQuaternary chart color\n\n`--chart-5`\n\n`oklch(0.448 0.18 28.2)`\n\n`oklch(0.448 0.18 28.2)`\n\nAccent chart color\n\nAll colors use the Redpanda UI warm color palette (hue 28.2) and are defined in `theme.css`.\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/chart) for the chart component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.652Z",
      "componentName": "chart",
      "demoCode": "import { Bar, BarChart } from \"recharts\"\n\nimport { ChartContainer, ChartTooltipContent } from \"@/components/ui/charts\"\n\nexport function MyChart() {\n  return (\n    <ChartContainer>\n      <BarChart data={data}>\n        <Bar dataKey=\"value\" />\n        <ChartTooltip content={<ChartTooltipContent />} />\n      </BarChart>\n    </ChartContainer>\n  )\n}",
      "metadata": {
        "description": "Beautiful charts. Built using Recharts. Copy and paste into your apps.",
        "dependencies": [
          "recharts",
          "@/components/ui/charts",
          "@/components/ui/chart",
          "lucide-react"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-checkbox",
      "url": "https://redpanda-ui-registry.netlify.app/docs/checkbox",
      "title": "Checkbox",
      "content": "CheckboxA control that allows the user to toggle between checked and not checked.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UIMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Checkbox component provides a visually appealing checkbox with smooth animations and comprehensive accessibility support.\nimport { Checkbox } from \"@/components/redpanda-ui/checkbox\"\n\n// Basic checkbox\n<Checkbox id=\"terms\" />\n\n// Controlled checkbox\nconst [checked, setChecked] = useState(false)\n<Checkbox\n  id=\"newsletter\"\n  checked={checked}\n  onCheckedChange={setChecked}\n/>\n\n// With label\n<div className=\"flex items-center space-x-2\">\n  <Checkbox id=\"terms\" />\n  <label htmlFor=\"terms\" className=\"text-sm font-medium\">\n    Accept terms and conditions\n  </label>\n</div>\n\n// Disabled checkbox\n<Checkbox id=\"disabled\" disabled />\n\n// With indeterminate state\n<Checkbox id=\"indeterminate\" checked=\"indeterminate\" />\nWhen to use\nUse this decision tree to determine when to use the Checkbox component:\n\nUse Checkbox when:\n\nUsers need to select multiple options from a list\nConfirming agreement (terms, privacy policy)\nEnabling/disabling individual features or settings\nCreating multi-select forms\nBuilding data tables with row selection\nCollecting binary preferences (yes/no, on/off)\n\nDon't use Checkbox for:\n\nSingle choice from multiple options (use Radio Group)\nImmediate toggle actions (use Switch)\nNavigation or triggering actions (use Button)\nComplex multi-step selections (use Multi-Select)\n\nAnatomy\nThe Checkbox component combines Radix UI primitives with Motion animations:\nCheckbox Component Structure:\n┌─────────────────────────────────────────────────────┐\n│ <CheckboxPrimitive.Root> (Radix primitive)         │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <motion.button> (Interactive element)           │ │\n│ │                                                 │ │\n│ │ Styles Applied:                                 │ │\n│ │ • Size (20x20px)                                │ │\n│ │ • Border (2px, changes on state)                │ │\n│ │ • Background (transparent → filled)             │ │\n│ │ • Focus ring (for accessibility)                │ │\n│ │ • Motion effects (scale on hover/tap)           │ │\n│ │                                                 │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ <CheckboxPrimitive.Indicator>               │ │ │\n│ │ │ ┌─────────────────────────────────────────┐ │ │ │\n│ │ │ │ <motion.svg> (Checkmark icon)           │ │ │ │\n│ │ │ │                                         │ │ │ │\n│ │ │ │ ┌─────────────────────────────────────┐ │ │ │ │\n│ │ │ │ │ <motion.path> (Animated path)       │ │ │ │ │\n│ │ │ │ │                                     │ │ │ │ │\n│ │ │ │ │ Animation States:                   │ │ │ │ │\n│ │ │ │ │ • unchecked: pathLength=0, opacity=0│ │ │ │ │\n│ │ │ │ │ • checked: pathLength=1, opacity=1  │ │ │ │ │\n│ │ │ │ │ • Duration: 0.2s with 0.2s delay   │ │ │ │ │\n│ │ │ │ └─────────────────────────────────────┘ │ │ │ │\n│ │ │ └─────────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nState Management:\n• Controlled: Uses checked prop with onCheckedChange\n• Uncontrolled: Uses defaultChecked prop\n• Internal state: Tracks check state for animations\n• Supports indeterminate state for partial selections\n\nAccessibility Features:\n• Keyboard navigation (Space to toggle)\n• Focus management with visible focus ring\n• Screen reader support via Radix primitives\n• ARIA attributes automatically applied\n• Label association through id/htmlFor\n\nAnimation System:\n• Motion library integration for smooth interactions\n• Scale animations on hover (1.05x) and tap (0.95x)\n• Checkmark draws in with pathLength animation\n• 500ms color transition for state changes\n• Staggered timing: background first, then checkmark\n\nMotion Props Support:\n• All HTMLMotionProps<'button'> supported\n• Custom animation overrides via motionProps\n• Gesture recognition for enhanced interactions\nProps\nDocsAPI Reference\nAnimate UI Props\nCheckbox\nPropTypeDefaultmotionProps?HTMLMotionProps<'button'>-\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nDays of the week (Maintenance window)\nPreviewCodeOpen in v0Loading component...\nForm\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use Radix UI for the checkbox component.\nWe take our inspiration from Shadcn UI for the checkbox style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Checkbox\n\nA control that allows the user to toggle between checked and not checked.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/checkbox.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/checkbox)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/checkbox)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/radix/checkbox)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/checkbox-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Checkbox component provides a visually appealing checkbox with smooth animations and comprehensive accessibility support.\n\n```\nimport { Checkbox } from \"@/components/redpanda-ui/checkbox\"\n\n// Basic checkbox\n<Checkbox id=\"terms\" />\n\n// Controlled checkbox\nconst [checked, setChecked] = useState(false)\n<Checkbox\n  id=\"newsletter\"\n  checked={checked}\n  onCheckedChange={setChecked}\n/>\n\n// With label\n<div className=\"flex items-center space-x-2\">\n  <Checkbox id=\"terms\" />\n  <label htmlFor=\"terms\" className=\"text-sm font-medium\">\n    Accept terms and conditions\n  </label>\n</div>\n\n// Disabled checkbox\n<Checkbox id=\"disabled\" disabled />\n\n// With indeterminate state\n<Checkbox id=\"indeterminate\" checked=\"indeterminate\" />\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Checkbox component:\n\n**Use Checkbox when:**\n\n*   Users need to select multiple options from a list\n*   Confirming agreement (terms, privacy policy)\n*   Enabling/disabling individual features or settings\n*   Creating multi-select forms\n*   Building data tables with row selection\n*   Collecting binary preferences (yes/no, on/off)\n\n**Don't use Checkbox for:**\n\n*   Single choice from multiple options (use Radio Group)\n*   Immediate toggle actions (use Switch)\n*   Navigation or triggering actions (use Button)\n*   Complex multi-step selections (use Multi-Select)\n\n## Anatomy\n\nThe Checkbox component combines Radix UI primitives with Motion animations:\n\n```\nCheckbox Component Structure:\n┌─────────────────────────────────────────────────────┐\n│ <CheckboxPrimitive.Root> (Radix primitive)         │\n│ ┌─────────────────────────────────────────────────┐ │\n│ │ <motion.button> (Interactive element)           │ │\n│ │                                                 │ │\n│ │ Styles Applied:                                 │ │\n│ │ • Size (20x20px)                                │ │\n│ │ • Border (2px, changes on state)                │ │\n│ │ • Background (transparent → filled)             │ │\n│ │ • Focus ring (for accessibility)                │ │\n│ │ • Motion effects (scale on hover/tap)           │ │\n│ │                                                 │ │\n│ │ ┌─────────────────────────────────────────────┐ │ │\n│ │ │ <CheckboxPrimitive.Indicator>               │ │ │\n│ │ │ ┌─────────────────────────────────────────┐ │ │ │\n│ │ │ │ <motion.svg> (Checkmark icon)           │ │ │ │\n│ │ │ │                                         │ │ │ │\n│ │ │ │ ┌─────────────────────────────────────┐ │ │ │ │\n│ │ │ │ │ <motion.path> (Animated path)       │ │ │ │ │\n│ │ │ │ │                                     │ │ │ │ │\n│ │ │ │ │ Animation States:                   │ │ │ │ │\n│ │ │ │ │ • unchecked: pathLength=0, opacity=0│ │ │ │ │\n│ │ │ │ │ • checked: pathLength=1, opacity=1  │ │ │ │ │\n│ │ │ │ │ • Duration: 0.2s with 0.2s delay   │ │ │ │ │\n│ │ │ │ └─────────────────────────────────────┘ │ │ │ │\n│ │ │ └─────────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────┘\n\nState Management:\n• Controlled: Uses checked prop with onCheckedChange\n• Uncontrolled: Uses defaultChecked prop\n• Internal state: Tracks check state for animations\n• Supports indeterminate state for partial selections\n\nAccessibility Features:\n• Keyboard navigation (Space to toggle)\n• Focus management with visible focus ring\n• Screen reader support via Radix primitives\n• ARIA attributes automatically applied\n• Label association through id/htmlFor\n\nAnimation System:\n• Motion library integration for smooth interactions\n• Scale animations on hover (1.05x) and tap (0.95x)\n• Checkmark draws in with pathLength animation\n• 500ms color transition for state changes\n• Staggered timing: background first, then checkmark\n\nMotion Props Support:\n• All HTMLMotionProps<'button'> supported\n• Custom animation overrides via motionProps\n• Gesture recognition for enhanced interactions\n```\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/checkbox)[API Reference](https://www.radix-ui.com/primitives/docs/components/checkbox#api-reference)\n\n### Animate UI Props\n\n#### Checkbox\n\nProp\n\nType\n\nDefault\n\n`motionProps?`\n\n`HTMLMotionProps<'button'>`\n\n\\-\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/checkbox-demo.json)\n\nLoading component...\n\n### Days of the week (Maintenance window)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/checkbox-days-demo.json)\n\nLoading component...\n\n### Form\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/checkbox-form-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/checkbox) for the checkbox component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/checkbox) for the checkbox style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.681Z",
      "componentName": "checkbox",
      "demoCode": "import { Checkbox } from \"@/components/redpanda-ui/checkbox\"\n\n// Basic checkbox\n<Checkbox id=\"terms\" />\n\n// Controlled checkbox\nconst [checked, setChecked] = useState(false)\n<Checkbox\n  id=\"newsletter\"\n  checked={checked}\n  onCheckedChange={setChecked}\n/>\n\n// With label\n<div className=\"flex items-center space-x-2\">\n  <Checkbox id=\"terms\" />\n  <label htmlFor=\"terms\" className=\"text-sm font-medium\">\n    Accept terms and conditions\n  </label>\n</div>\n\n// Disabled checkbox\n<Checkbox id=\"disabled\" disabled />\n\n// With indeterminate state\n<Checkbox id=\"indeterminate\" checked=\"indeterminate\" />",
      "metadata": {
        "description": "A control that allows the user to toggle between checked and not checked.",
        "dependencies": [
          "@/components/redpanda-ui/checkbox"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-choicebox",
      "url": "https://redpanda-ui-registry.netlify.app/docs/choicebox",
      "title": "Choicebox",
      "content": "ChoiceboxChoiceboxes are a great way to show radio or checkbox options with a card style.Made by haydenbleaselEdit on GitHubPowered byRadix UIShadcn UIKibo UIMotionLucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Choicebox component provides a card-style radio group that makes options more visually prominent and easier to understand at a glance.\nimport {\n  Choicebox,\n  ChoiceboxItem,\n  ChoiceboxItemHeader,\n  ChoiceboxItemTitle,\n  ChoiceboxItemSubtitle,\n  ChoiceboxItemDescription,\n  ChoiceboxItemContent,\n  ChoiceboxItemIndicator,\n} from \"@/components/redpanda-ui/choicebox\"\n\n// Basic choicebox\n<Choicebox defaultValue=\"option1\">\n  <ChoiceboxItem value=\"option1\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>Option 1</ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        This is the first option with a description\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n  <ChoiceboxItem value=\"option2\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>Option 2</ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        This is the second option\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n</Choicebox>\n\n// With subtitles and controlled state\nconst [value, setValue] = useState(\"premium\")\n\n<Choicebox value={value} onValueChange={setValue}>\n  <ChoiceboxItem value=\"basic\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>\n        Basic Plan\n        <ChoiceboxItemSubtitle>$9/month</ChoiceboxItemSubtitle>\n      </ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        Perfect for getting started with basic features\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n  <ChoiceboxItem value=\"premium\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>\n        Premium Plan\n        <ChoiceboxItemSubtitle>$29/month</ChoiceboxItemSubtitle>\n      </ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        Full access to all features and priority support\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n</Choicebox>\nWhen to use\nUse this decision tree to determine when to use the Choicebox component:\n\nUse Choicebox when:\n\nOptions require detailed descriptions or explanations\nVisual hierarchy and prominence are important\nPresenting pricing plans, feature tiers, or service levels\nUsers need to compare options side-by-side\nEach option has multiple pieces of information (title, subtitle, description)\nBuilding settings panels where options need context\nCreating forms where visual appeal enhances user experience\n\nDon't use Choicebox for:\n\nSimple yes/no choices (use Radio Group or Switch)\nMultiple selections (use Checkbox or Multi-Select)\nLong lists of options (use Select or Combobox)\nNavigation choices (use Tabs or Navigation Menu)\nWhen space is extremely limited\n\nAnatomy\nThe Choicebox component builds on Radio Group with enhanced card-style presentation:\nChoicebox Component Structure:\n┌─────────────────────────────────────────────────────────────┐\n│ <Choicebox> (RadioGroup wrapper)                           │\n│                                                             │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ <ChoiceboxItem> (RadioGroupPrimitive.Item + Card)      │ │\n│ │                                                         │ │\n│ │ Layout: Flex Row (justify-between)                     │ │\n│ │ ┌─────────────────────────────┐ ┌─────────────────────┐ │ │\n│ │ │ <ChoiceboxItemHeader>       │ │ <ChoiceboxItemContent>│ │ │\n│ │ │ (CardHeader - flex-1)       │ │ (Radio indicator)     │ │ │\n│ │ │                             │ │                       │ │ │\n│ │ │ ┌─────────────────────────┐ │ │ ┌─────────────────────┐ │ │\n│ │ │ │ <ChoiceboxItemTitle>    │ │ │ │ Circle container    │ │ │\n│ │ │ │ (CardTitle + flex gap)  │ │ │ │ (4x4, rounded-full) │ │ │\n│ │ │ │                         │ │ │ │                     │ │ │\n│ │ │ │ ┌─────────────────────┐ │ │ │ │ ┌─────────────────┐ │ │ │\n│ │ │ │ │ Title Text          │ │ │ │ │ │<ChoiceboxItem  │ │ │ │\n│ │ │ │ └─────────────────────┘ │ │ │ │ │Indicator>      │ │ │ │\n│ │ │ │ ┌─────────────────────┐ │ │ │ │ │                 │ │ │ │\n│ │ │ │ │<ChoiceboxItemSub    │ │ │ │ │ │<motion.div>    │ │ │ │\n│ │ │ │ │title> (Optional)    │ │ │ │ │ │<Circle> (filled)│ │ │ │\n│ │ │ │ └─────────────────────┘ │ │ │ │ │                 │ │ │ │\n│ │ │ └─────────────────────────┘ │ │ │ └─────────────────┘ │ │ │\n│ │ │ ┌─────────────────────────┐ │ │ └─────────────────────┘ │ │\n│ │ │ │<ChoiceboxItemDescription│ │ │                         │ │\n│ │ │ │> (CardDescription)      │ │ │                         │ │\n│ │ │ └─────────────────────────┘ │ │                         │ │\n│ │ └─────────────────────────────┘ └─────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────────────┐ │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ <ChoiceboxItem> (Additional items...)                  │ │\n│ │ ... (Same structure as above)                          │ │\n│ └─────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────┘\n\nComponent Hierarchy:\n• Choicebox (RadioGroup): Manages selection state\n• ChoiceboxItem (Card + RadioItem): Individual option container\n• ChoiceboxItemHeader (CardHeader): Content area (titles, descriptions)\n• ChoiceboxItemTitle (CardTitle): Main option name\n• ChoiceboxItemSubtitle (span): Secondary text (price, status, etc.)\n• ChoiceboxItemDescription (CardDescription): Detailed explanation\n• ChoiceboxItemContent (CardContent): Radio indicator container\n• ChoiceboxItemIndicator: Animated selection indicator\n\nState Management:\n• Built on Radix Radio Group primitives\n• Supports controlled (value/onValueChange) and uncontrolled (defaultValue)\n• Selection state automatically managed across all items\n• Focus and keyboard navigation handled automatically\n\nVisual States:\n• Default: Neutral border and background\n• Hover: Selected color border at 50% opacity\n• Selected: Selected color border, selected background tint (5% opacity)\n• Disabled: Reduced opacity, no interactions\n• Focus: Ring outline for accessibility\n\nAnimation Features:\n• Motion library integration for indicator\n• Spring animation on selection (scale from 0 to 1)\n• Smooth color transitions on state changes\n• Customizable transition timing via props\nFeatures\n\nCard-style radio and checkbox options\nCustomizable header, title, and description for each option\nAccessible keyboard navigation\nVisual feedback for selected and hover states\nSupport for disabled states\nCustomizable styling through className props\nFlexible layout with inline and block options\nClear visual hierarchy with title and subtitle support\nConsistent styling with the design system\nSupport for custom content and indicators\n\nExamples\nInline Choiceboxes\nPreviewCodeOpen in v0Loading component...\nForm\nPreviewCodeOpen in v0Loading component...\nProps\nDocsAPI Reference\nCredits\n\nWe use Kibo UI for the choice box component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Choicebox\n\nChoiceboxes are a great way to show radio or checkbox options with a card style.\n\nMade by [haydenbleasel](https://github.com/haydenbleasel)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/choicebox.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/radio-group)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/radio-group)[![Kibo UI](https://img.logo.dev/kibo-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Kibo UI](https://www.kibo-ui.com/components/choicebox)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/choicebox-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Choicebox component provides a card-style radio group that makes options more visually prominent and easier to understand at a glance.\n\n```\nimport {\n  Choicebox,\n  ChoiceboxItem,\n  ChoiceboxItemHeader,\n  ChoiceboxItemTitle,\n  ChoiceboxItemSubtitle,\n  ChoiceboxItemDescription,\n  ChoiceboxItemContent,\n  ChoiceboxItemIndicator,\n} from \"@/components/redpanda-ui/choicebox\"\n\n// Basic choicebox\n<Choicebox defaultValue=\"option1\">\n  <ChoiceboxItem value=\"option1\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>Option 1</ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        This is the first option with a description\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n  <ChoiceboxItem value=\"option2\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>Option 2</ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        This is the second option\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n</Choicebox>\n\n// With subtitles and controlled state\nconst [value, setValue] = useState(\"premium\")\n\n<Choicebox value={value} onValueChange={setValue}>\n  <ChoiceboxItem value=\"basic\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>\n        Basic Plan\n        <ChoiceboxItemSubtitle>$9/month</ChoiceboxItemSubtitle>\n      </ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        Perfect for getting started with basic features\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n  <ChoiceboxItem value=\"premium\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>\n        Premium Plan\n        <ChoiceboxItemSubtitle>$29/month</ChoiceboxItemSubtitle>\n      </ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        Full access to all features and priority support\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n</Choicebox>\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Choicebox component:\n\n**Use Choicebox when:**\n\n*   Options require detailed descriptions or explanations\n*   Visual hierarchy and prominence are important\n*   Presenting pricing plans, feature tiers, or service levels\n*   Users need to compare options side-by-side\n*   Each option has multiple pieces of information (title, subtitle, description)\n*   Building settings panels where options need context\n*   Creating forms where visual appeal enhances user experience\n\n**Don't use Choicebox for:**\n\n*   Simple yes/no choices (use Radio Group or Switch)\n*   Multiple selections (use Checkbox or Multi-Select)\n*   Long lists of options (use Select or Combobox)\n*   Navigation choices (use Tabs or Navigation Menu)\n*   When space is extremely limited\n\n## Anatomy\n\nThe Choicebox component builds on Radio Group with enhanced card-style presentation:\n\n```\nChoicebox Component Structure:\n┌─────────────────────────────────────────────────────────────┐\n│ <Choicebox> (RadioGroup wrapper)                           │\n│                                                             │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ <ChoiceboxItem> (RadioGroupPrimitive.Item + Card)      │ │\n│ │                                                         │ │\n│ │ Layout: Flex Row (justify-between)                     │ │\n│ │ ┌─────────────────────────────┐ ┌─────────────────────┐ │ │\n│ │ │ <ChoiceboxItemHeader>       │ │ <ChoiceboxItemContent>│ │ │\n│ │ │ (CardHeader - flex-1)       │ │ (Radio indicator)     │ │ │\n│ │ │                             │ │                       │ │ │\n│ │ │ ┌─────────────────────────┐ │ │ ┌─────────────────────┐ │ │\n│ │ │ │ <ChoiceboxItemTitle>    │ │ │ │ Circle container    │ │ │\n│ │ │ │ (CardTitle + flex gap)  │ │ │ │ (4x4, rounded-full) │ │ │\n│ │ │ │                         │ │ │ │                     │ │ │\n│ │ │ │ ┌─────────────────────┐ │ │ │ │ ┌─────────────────┐ │ │ │\n│ │ │ │ │ Title Text          │ │ │ │ │ │<ChoiceboxItem  │ │ │ │\n│ │ │ │ └─────────────────────┘ │ │ │ │ │Indicator>      │ │ │ │\n│ │ │ │ ┌─────────────────────┐ │ │ │ │ │                 │ │ │ │\n│ │ │ │ │<ChoiceboxItemSub    │ │ │ │ │ │<motion.div>    │ │ │ │\n│ │ │ │ │title> (Optional)    │ │ │ │ │ │<Circle> (filled)│ │ │ │\n│ │ │ │ └─────────────────────┘ │ │ │ │ │                 │ │ │ │\n│ │ │ └─────────────────────────┘ │ │ │ └─────────────────┘ │ │ │\n│ │ │ ┌─────────────────────────┐ │ │ └─────────────────────┘ │ │\n│ │ │ │<ChoiceboxItemDescription│ │ │                         │ │\n│ │ │ │> (CardDescription)      │ │ │                         │ │\n│ │ │ └─────────────────────────┘ │ │                         │ │\n│ │ └─────────────────────────────┘ └─────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────────────┐ │\n│ ┌─────────────────────────────────────────────────────────┐ │\n│ │ <ChoiceboxItem> (Additional items...)                  │ │\n│ │ ... (Same structure as above)                          │ │\n│ └─────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────┘\n\nComponent Hierarchy:\n• Choicebox (RadioGroup): Manages selection state\n• ChoiceboxItem (Card + RadioItem): Individual option container\n• ChoiceboxItemHeader (CardHeader): Content area (titles, descriptions)\n• ChoiceboxItemTitle (CardTitle): Main option name\n• ChoiceboxItemSubtitle (span): Secondary text (price, status, etc.)\n• ChoiceboxItemDescription (CardDescription): Detailed explanation\n• ChoiceboxItemContent (CardContent): Radio indicator container\n• ChoiceboxItemIndicator: Animated selection indicator\n\nState Management:\n• Built on Radix Radio Group primitives\n• Supports controlled (value/onValueChange) and uncontrolled (defaultValue)\n• Selection state automatically managed across all items\n• Focus and keyboard navigation handled automatically\n\nVisual States:\n• Default: Neutral border and background\n• Hover: Selected color border at 50% opacity\n• Selected: Selected color border, selected background tint (5% opacity)\n• Disabled: Reduced opacity, no interactions\n• Focus: Ring outline for accessibility\n\nAnimation Features:\n• Motion library integration for indicator\n• Spring animation on selection (scale from 0 to 1)\n• Smooth color transitions on state changes\n• Customizable transition timing via props\n```\n\n## Features\n\n*   Card-style radio and checkbox options\n*   Customizable header, title, and description for each option\n*   Accessible keyboard navigation\n*   Visual feedback for selected and hover states\n*   Support for disabled states\n*   Customizable styling through className props\n*   Flexible layout with inline and block options\n*   Clear visual hierarchy with title and subtitle support\n*   Consistent styling with the design system\n*   Support for custom content and indicators\n\n## Examples\n\n### Inline Choiceboxes\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/choicebox-inline-demo.json)\n\nLoading component...\n\n### Form\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/choicebox-form-demo.json)\n\nLoading component...\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/radio-group)[API Reference](https://www.radix-ui.com/primitives/docs/components/radio-group#api-reference)\n\n## Credits\n\n*   We use [Kibo UI](https://www.kibo-ui.com/components/choicebox) for the choice box component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.980Z",
      "componentName": "choicebox",
      "demoCode": "import {\n  Choicebox,\n  ChoiceboxItem,\n  ChoiceboxItemHeader,\n  ChoiceboxItemTitle,\n  ChoiceboxItemSubtitle,\n  ChoiceboxItemDescription,\n  ChoiceboxItemContent,\n  ChoiceboxItemIndicator,\n} from \"@/components/redpanda-ui/choicebox\"\n\n// Basic choicebox\n<Choicebox defaultValue=\"option1\">\n  <ChoiceboxItem value=\"option1\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>Option 1</ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        This is the first option with a description\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n  <ChoiceboxItem value=\"option2\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>Option 2</ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        This is the second option\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n</Choicebox>\n\n// With subtitles and controlled state\nconst [value, setValue] = useState(\"premium\")\n\n<Choicebox value={value} onValueChange={setValue}>\n  <ChoiceboxItem value=\"basic\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>\n        Basic Plan\n        <ChoiceboxItemSubtitle>$9/month</ChoiceboxItemSubtitle>\n      </ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        Perfect for getting started with basic features\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n  <ChoiceboxItem value=\"premium\">\n    <ChoiceboxItemHeader>\n      <ChoiceboxItemTitle>\n        Premium Plan\n        <ChoiceboxItemSubtitle>$29/month</ChoiceboxItemSubtitle>\n      </ChoiceboxItemTitle>\n      <ChoiceboxItemDescription>\n        Full access to all features and priority support\n      </ChoiceboxItemDescription>\n    </ChoiceboxItemHeader>\n    <ChoiceboxItemContent>\n      <ChoiceboxItemIndicator />\n    </ChoiceboxItemContent>\n  </ChoiceboxItem>\n</Choicebox>",
      "metadata": {
        "description": "Choiceboxes are a great way to show radio or checkbox options with a card style."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-cli",
      "url": "https://redpanda-ui-registry.netlify.app/docs/cli",
      "title": "CLI",
      "content": "CLIUse the fumadocs/cli to add components to your project.Edit on GitHubNote: We rely on the fumadocs/cli to\nadd components to your project.\nconfiguration\nNOTE: You only need to do this once.\n1. Create a cli.json file\nCreate a cli.json file at the root of your application or project.\n{\n  \"baseDir\": \"./src/components/redpanda-ui\",\n  \"commands\": {}\n}\nReplace the baseDir with the path to the directory where you would like the UI registry components to be located.\n2. Install and configure Tailwind CSS\nThe UI Registry uses Tailwind CSS for styling. You'll need to configure the Tailwind compiler in your project.\nbun add tailwindcss tw-animate-css\nbun add @tailwindcss/postcss -D\nThen, create a postcss.config.mjs file at the root of your application or project.\nexport default {\n  plugins: {\n    '@tailwindcss/postcss': {\n      content: ['./src/**/*.{js,ts,jsx,tsx}'],\n    },\n  },\n};\n3. Import the UI registry styles\nbunx @fumadocs/cli add --dir https://redpanda-ui-registry.netlify.app/r theme\nCreate a globals.css file within your project's src directory and add the following:\n@import \"./components/redpanda-ui/style/theme.css\"; // or wherever you specified in the `baseDir` + `/style/theme.css`\n@import \"tailwindcss\";\n@import \"tw-animate-css\";\nIt's important that you add these imports in this order 👆.\nadd\nUse the add command to add components and dependencies to your project.\nbunx @fumadocs/cli add --dir https://redpanda-ui-registry.netlify.app/r button\nYou can add as many components as you want, eg:\nbunx @fumadocs/cli add --dir https://redpanda-ui-registry.netlify.app/r card accordion calendar\nupdate\nThe add command can also be used to update components.Built by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# CLI\n\nUse the fumadocs/cli to add components to your project.\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/cli.mdx)\n\n**Note:** We rely on the [fumadocs/cli](https://github.com/fuma-nama/fumadocs/blob/dev/packages/cli/) to add components to your project.\n\n## configuration\n\n**NOTE:** You only need to do this once.\n\n### 1\\. Create a `cli.json` file\n\nCreate a `cli.json` file at the root of your application or project.\n\n```\n{\n  \"baseDir\": \"./src/components/redpanda-ui\",\n  \"commands\": {}\n}\n```\n\nReplace the `baseDir` with the path to the directory where you would like the UI registry components to be located.\n\n### 2\\. Install and configure Tailwind CSS\n\nThe UI Registry uses Tailwind CSS for styling. You'll need to configure the Tailwind compiler in your project.\n\n```\nbun add tailwindcss tw-animate-css\nbun add @tailwindcss/postcss -D\n```\n\nThen, create a `postcss.config.mjs` file at the root of your application or project.\n\n```\nexport default {\n  plugins: {\n    '@tailwindcss/postcss': {\n      content: ['./src/**/*.{js,ts,jsx,tsx}'],\n    },\n  },\n};\n```\n\n### 3\\. Import the UI registry styles\n\n```\nbunx @fumadocs/cli add --dir https://redpanda-ui-registry.netlify.app/r theme\n```\n\nCreate a `globals.css` file within your project's `src` directory and add the following:\n\n```\n@import \"./components/redpanda-ui/style/theme.css\"; // or wherever you specified in the `baseDir` + `/style/theme.css`\n@import \"tailwindcss\";\n@import \"tw-animate-css\";\n```\n\nIt's important that you add these imports in this order 👆.\n\n## add\n\nUse the `add` command to add components and dependencies to your project.\n\n```\nbunx @fumadocs/cli add --dir https://redpanda-ui-registry.netlify.app/r button\n```\n\nYou can add as many components as you want, eg:\n\n```\nbunx @fumadocs/cli add --dir https://redpanda-ui-registry.netlify.app/r card accordion calendar\n```\n\n## update\n\nThe add command can also be used to update components.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.320Z",
      "componentName": "cli",
      "metadata": {
        "description": "Use the fumadocs/cli to add components to your project."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-code-block-dynamic",
      "url": "https://redpanda-ui-registry.netlify.app/docs/code-block-dynamic",
      "title": "Code Block (Dynamic)",
      "content": "Code Block (Dynamic)A codeblock that also highlights code. Based on Shiki 式 syntax highlighterMade by malinskibeniaminEdit on GitHubPowered byFumadocsShikiHast\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Dynamic Code Block component provides server-side syntax highlighting using Shiki, with better performance and more accurate highlighting than client-side solutions:\nimport { \n  CodeBlock, \n  Pre, \n  DynamicCodeBlock \n} from '@/components/redpanda-ui/code-block-dynamic';\n\n// Basic usage with automatic syntax highlighting\nconst sampleCode = `function greetUser(name: string): string {\n  return \\`Hello, \\${name}! Welcome to Redpanda UI.\\`;\n}`;\n\nexport function Example() {\n  return (\n    <DynamicCodeBlock\n      lang=\"typescript\"\n      code={sampleCode}\n      options={{\n        title: \"greet.ts\",\n        icon: \"📄\",\n        allowCopy: true,\n        theme: { light: \"github-light\", dark: \"github-dark\" }\n      }}\n    />\n  );\n}\n\n// Advanced usage with custom theming and line numbers\nexport function AdvancedExample() {\n  return (\n    <DynamicCodeBlock\n      lang=\"typescript\"\n      code={sampleCode}\n      options={{\n        title: \"greet.ts\",\n        icon: \"📄\",\n        allowCopy: true,\n        keepBackground: true,\n        'data-line-numbers': true,\n        'data-line-numbers-start': 1,\n        themes: {\n          light: \"catppuccin-latte\",\n          dark: \"catppuccin-mocha\"\n        },\n        components: {\n          // Custom component overrides\n          pre: (props) => <Pre className=\"custom-pre\" {...props} />\n        }\n      }}\n    />\n  );\n}\n\n// Manual CodeBlock usage for custom highlighting\nexport function ManualExample() {\n  return (\n    <CodeBlock \n      title=\"config.json\" \n      icon=\"⚙️\"\n      allowCopy={true}\n      keepBackground={false}\n      data-line-numbers={true}\n    >\n      <Pre>\n        <code className=\"language-json\">\n          {JSON.stringify({ theme: \"dark\", fontSize: 14 }, null, 2)}\n        </code>\n      </Pre>\n    </CodeBlock>\n  );\n}\nWhen to use\nUse this decision tree to determine when to use the Dynamic Code Block component over the regular Code Block:\n\nUse Cases\n\nDocumentation sites: Technical documentation with accurate syntax highlighting\nCode tutorials: Step-by-step programming guides with proper code display\nAPI references: Code examples with language-specific highlighting\nBlog posts: Technical articles with multiple code examples\nCode showcases: Portfolio or demonstration code with professional presentation\n\nDynamic Code Block vs Regular Code Block\n\nUse Dynamic Code Block when: You need server-side syntax highlighting, accurate language support, custom themes, or better performance with many code blocks\nUse regular Code Block when: Client-side highlighting is sufficient, you have simple highlighting needs, or you're not using SSR\nUse inline <code> when: Short code snippets within text content\nUse Code Editor when: Users need to edit or interact with the code\n\nAnatomy\nThe Dynamic Code Block component extends the regular Code Block with Shiki-powered syntax highlighting:\nDynamic Code Block Architecture:\n┌─────────────────────────────────────────────────┐\n│ DynamicCodeBlock (Wrapper Component)            │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ useShiki Hook                               │ │\n│ │ - Server-side syntax highlighting           │ │\n│ │ - Theme management (light/dark)             │ │\n│ │ - Language detection and parsing            │ │\n│ │ - Component transformation                  │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ Loading Fallback                            │ │\n│ │ - Plain text display during SSR            │ │\n│ │ - Line-by-line structure preserved         │ │\n│ │ - Prevents layout shift                     │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ CodeBlock (Enhanced Container)              │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ Header (with enhanced styling)          │ │ │\n│ │ │ [Icon] Title Text [CopyButton]          │ │ │\n│ │ │ - keepBackground option                 │ │ │\n│ │ │ - Custom icon support                   │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ Viewport (Scroll Container)             │ │ │\n│ │ │ ┌─────────────────────────────────────┐ │ │ │\n│ │ │ │ Pre (Syntax Highlighted)            │ │ │ │\n│ │ │ │ ┌─────────────────────────────────┐ │ │ │ │\n│ │ │ │ │ Line Elements                   │ │ │ │ │\n│ │ │ │ │ - span.line containers          │ │ │ │ │\n│ │ │ │ │ - Token-based highlighting      │ │ │ │ │  \n│ │ │ │ │ - Line number support           │ │ │ │ │\n│ │ │ │ │ - Counter-based numbering       │ │ │ │ │\n│ │ │ │ └─────────────────────────────────┘ │ │ │ │\n│ │ │ └─────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ CopyButton (Enhanced)                       │ │\n│ │ - Animated check/copy icons                 │ │\n│ │ - Smart text extraction                     │ │\n│ │ - Hover state management                    │ │\n│ │ - Accessibility features                    │ │\n│ └─────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────┘\n\nShiki Integration Flow:\n┌─────────────────────────────────────┐\n│ Code String + Language              │\n│ ↓                                   │\n│ Shiki Highlighter                   │\n│ - Tokenizes syntax                  │\n│ - Applies theme colors              │\n│ - Generates HAST tree               │\n│ ↓                                   │\n│ HAST to JSX Runtime                 │\n│ - Converts to React elements        │\n│ - Preserves syntax structure        │ \n│ - Applies custom components         │\n│ ↓                                   │\n│ Rendered Highlighted Code           │\n└─────────────────────────────────────┘\nComponent Composition\n\nDynamicCodeBlock: Main wrapper orchestrating syntax highlighting\nuseShiki Hook: Custom hook managing Shiki highlighting and SSR\nCodeBlock: Enhanced container with dynamic theme support\nPre: Structured preformatted text element with line support\nCopyButton: Advanced copy functionality with visual feedback\nTheme Management: Automatic light/dark theme switching\nLine Numbers: CSS counter-based line numbering system\nComponent Override: Customizable rendering via components prop\nPerformance: Server-side rendering with client hydration\n\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use Fumadocs as inspiration for the dynamic code block component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Code Block (Dynamic)\n\nA codeblock that also highlights code. Based on Shiki 式 syntax highlighter\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/code-block-dynamic.mdx)\n\nPowered by\n\n[![Fumadocs](https://img.logo.dev/fumadocs.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Fumadocs](https://fumadocs.dev/docs/ui/components/dynamic-codeblock)[![Shiki](https://img.logo.dev/shiki.style?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shiki](https://shiki.style/)[![Hast](https://img.logo.dev/unifiedjs.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Hast](https://unifiedjs.com/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-block-dynamic-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Dynamic Code Block component provides server-side syntax highlighting using Shiki, with better performance and more accurate highlighting than client-side solutions:\n\n```\nimport { \n  CodeBlock, \n  Pre, \n  DynamicCodeBlock \n} from '@/components/redpanda-ui/code-block-dynamic';\n\n// Basic usage with automatic syntax highlighting\nconst sampleCode = `function greetUser(name: string): string {\n  return \\`Hello, \\${name}! Welcome to Redpanda UI.\\`;\n}`;\n\nexport function Example() {\n  return (\n    <DynamicCodeBlock\n      lang=\"typescript\"\n      code={sampleCode}\n      options={{\n        title: \"greet.ts\",\n        icon: \"📄\",\n        allowCopy: true,\n        theme: { light: \"github-light\", dark: \"github-dark\" }\n      }}\n    />\n  );\n}\n\n// Advanced usage with custom theming and line numbers\nexport function AdvancedExample() {\n  return (\n    <DynamicCodeBlock\n      lang=\"typescript\"\n      code={sampleCode}\n      options={{\n        title: \"greet.ts\",\n        icon: \"📄\",\n        allowCopy: true,\n        keepBackground: true,\n        'data-line-numbers': true,\n        'data-line-numbers-start': 1,\n        themes: {\n          light: \"catppuccin-latte\",\n          dark: \"catppuccin-mocha\"\n        },\n        components: {\n          // Custom component overrides\n          pre: (props) => <Pre className=\"custom-pre\" {...props} />\n        }\n      }}\n    />\n  );\n}\n\n// Manual CodeBlock usage for custom highlighting\nexport function ManualExample() {\n  return (\n    <CodeBlock \n      title=\"config.json\" \n      icon=\"⚙️\"\n      allowCopy={true}\n      keepBackground={false}\n      data-line-numbers={true}\n    >\n      <Pre>\n        <code className=\"language-json\">\n          {JSON.stringify({ theme: \"dark\", fontSize: 14 }, null, 2)}\n        </code>\n      </Pre>\n    </CodeBlock>\n  );\n}\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Dynamic Code Block component over the regular Code Block:\n\n### Use Cases\n\n*   **Documentation sites**: Technical documentation with accurate syntax highlighting\n*   **Code tutorials**: Step-by-step programming guides with proper code display\n*   **API references**: Code examples with language-specific highlighting\n*   **Blog posts**: Technical articles with multiple code examples\n*   **Code showcases**: Portfolio or demonstration code with professional presentation\n\n### Dynamic Code Block vs Regular Code Block\n\n*   **Use Dynamic Code Block when**: You need server-side syntax highlighting, accurate language support, custom themes, or better performance with many code blocks\n*   **Use regular Code Block when**: Client-side highlighting is sufficient, you have simple highlighting needs, or you're not using SSR\n*   **Use inline `<code>` when**: Short code snippets within text content\n*   **Use Code Editor when**: Users need to edit or interact with the code\n\n## Anatomy\n\nThe Dynamic Code Block component extends the regular Code Block with Shiki-powered syntax highlighting:\n\n```\nDynamic Code Block Architecture:\n┌─────────────────────────────────────────────────┐\n│ DynamicCodeBlock (Wrapper Component)            │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ useShiki Hook                               │ │\n│ │ - Server-side syntax highlighting           │ │\n│ │ - Theme management (light/dark)             │ │\n│ │ - Language detection and parsing            │ │\n│ │ - Component transformation                  │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ Loading Fallback                            │ │\n│ │ - Plain text display during SSR            │ │\n│ │ - Line-by-line structure preserved         │ │\n│ │ - Prevents layout shift                     │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ CodeBlock (Enhanced Container)              │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ Header (with enhanced styling)          │ │ │\n│ │ │ [Icon] Title Text [CopyButton]          │ │ │\n│ │ │ - keepBackground option                 │ │ │\n│ │ │ - Custom icon support                   │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ Viewport (Scroll Container)             │ │ │\n│ │ │ ┌─────────────────────────────────────┐ │ │ │\n│ │ │ │ Pre (Syntax Highlighted)            │ │ │ │\n│ │ │ │ ┌─────────────────────────────────┐ │ │ │ │\n│ │ │ │ │ Line Elements                   │ │ │ │ │\n│ │ │ │ │ - span.line containers          │ │ │ │ │\n│ │ │ │ │ - Token-based highlighting      │ │ │ │ │  \n│ │ │ │ │ - Line number support           │ │ │ │ │\n│ │ │ │ │ - Counter-based numbering       │ │ │ │ │\n│ │ │ │ └─────────────────────────────────┘ │ │ │ │\n│ │ │ └─────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ CopyButton (Enhanced)                       │ │\n│ │ - Animated check/copy icons                 │ │\n│ │ - Smart text extraction                     │ │\n│ │ - Hover state management                    │ │\n│ │ - Accessibility features                    │ │\n│ └─────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────┘\n\nShiki Integration Flow:\n┌─────────────────────────────────────┐\n│ Code String + Language              │\n│ ↓                                   │\n│ Shiki Highlighter                   │\n│ - Tokenizes syntax                  │\n│ - Applies theme colors              │\n│ - Generates HAST tree               │\n│ ↓                                   │\n│ HAST to JSX Runtime                 │\n│ - Converts to React elements        │\n│ - Preserves syntax structure        │ \n│ - Applies custom components         │\n│ ↓                                   │\n│ Rendered Highlighted Code           │\n└─────────────────────────────────────┘\n```\n\n### Component Composition\n\n*   **DynamicCodeBlock**: Main wrapper orchestrating syntax highlighting\n*   **useShiki Hook**: Custom hook managing Shiki highlighting and SSR\n*   **CodeBlock**: Enhanced container with dynamic theme support\n*   **Pre**: Structured preformatted text element with line support\n*   **CopyButton**: Advanced copy functionality with visual feedback\n*   **Theme Management**: Automatic light/dark theme switching\n*   **Line Numbers**: CSS counter-based line numbering system\n*   **Component Override**: Customizable rendering via components prop\n*   **Performance**: Server-side rendering with client hydration\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-block-dynamic-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [Fumadocs](https://fumadocs.dev/docs/ui/components/dynamic-codeblock) as inspiration for the dynamic code block component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.835Z",
      "componentName": "code-block-dynamic",
      "demoCode": "import { \n  CodeBlock, \n  Pre, \n  DynamicCodeBlock \n} from '@/components/redpanda-ui/code-block-dynamic';\n\n// Basic usage with automatic syntax highlighting\nconst sampleCode = `function greetUser(name: string): string {\n  return \\`Hello, \\${name}! Welcome to Redpanda UI.\\`;\n}`;\n\nexport function Example() {\n  return (\n    <DynamicCodeBlock\n      lang=\"typescript\"\n      code={sampleCode}\n      options={{\n        title: \"greet.ts\",\n        icon: \"📄\",\n        allowCopy: true,\n        theme: { light: \"github-light\", dark: \"github-dark\" }\n      }}\n    />\n  );\n}\n\n// Advanced usage with custom theming and line numbers\nexport function AdvancedExample() {\n  return (\n    <DynamicCodeBlock\n      lang=\"typescript\"\n      code={sampleCode}\n      options={{\n        title: \"greet.ts\",\n        icon: \"📄\",\n        allowCopy: true,\n        keepBackground: true,\n        'data-line-numbers': true,\n        'data-line-numbers-start': 1,\n        themes: {\n          light: \"catppuccin-latte\",\n          dark: \"catppuccin-mocha\"\n        },\n        components: {\n          // Custom component overrides\n          pre: (props) => <Pre className=\"custom-pre\" {...props} />\n        }\n      }}\n    />\n  );\n}\n\n// Manual CodeBlock usage for custom highlighting\nexport function ManualExample() {\n  return (\n    <CodeBlock \n      title=\"config.json\" \n      icon=\"⚙️\"\n      allowCopy={true}\n      keepBackground={false}\n      data-line-numbers={true}\n    >\n      <Pre>\n        <code className=\"language-json\">\n          {JSON.stringify({ theme: \"dark\", fontSize: 14 }, null, 2)}\n        </code>\n      </Pre>\n    </CodeBlock>\n  );\n}",
      "metadata": {
        "description": "A codeblock that also highlights code. Based on Shiki 式 syntax highlighter"
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-code-block",
      "url": "https://redpanda-ui-registry.netlify.app/docs/code-block",
      "title": "Code Block",
      "content": "Code BlockA customizable code block component with syntax highlighting, copy functionality, and scroll area support.Made by malinskibeniaminEdit on GitHubPowered byLucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe CodeBlock component provides a structured way to display code with syntax highlighting, copy functionality, and scrollable content:\nimport { CodeBlock, Pre, SimpleCodeBlock } from '@/components/redpanda-ui/code-block';\n\n// Basic usage with syntax highlighting\nconst sampleCode = `function greetUser(name: string): string {\n  return \\`Hello, \\${name}! Welcome to Redpanda UI.\\`;\n}`;\n\nexport function Example() {\n  return (\n    <CodeBlock title=\"greet.ts\" icon=\"📄\">\n      <Pre>\n        <code className=\"language-typescript\">{sampleCode}</code>\n      </Pre>\n    </CodeBlock>\n  );\n}\n\n// Simplified interface for quick code blocks\nexport function SimpleExample() {\n  return (\n    <SimpleCodeBlock\n      code={sampleCode}\n      language=\"language-typescript\"\n      title=\"greet.ts\"\n      icon=\"📄\"\n      size=\"default\"\n      allowCopy={true}\n    />\n  );\n}\n\n// Different sizes and configurations\nexport function VariousExamples() {\n  return (\n    <>\n      {/* Small code block */}\n      <CodeBlock size=\"sm\" width=\"sm\" maxHeight=\"sm\">\n        <Pre>\n          <code className=\"language-bash\">npm install @redpanda-ui/core</code>\n        </Pre>\n      </CodeBlock>\n\n      {/* Full width with no copy button */}\n      <CodeBlock \n        title=\"config.json\" \n        width=\"full\" \n        allowCopy={false}\n        onCopy={() => console.log('Code copied!')}\n      >\n        <Pre>\n          <code className=\"language-json\">\n            {JSON.stringify({ theme: \"dark\", fontSize: 14 }, null, 2)}\n          </code>\n        </Pre>\n      </CodeBlock>\n\n      {/* Large with unlimited height */}\n      <CodeBlock size=\"lg\" maxHeight=\"none\">\n        <Pre>\n          <code className=\"language-typescript\">\n            {/* Long code content here */}\n          </code>\n        </Pre>\n      </CodeBlock>\n    </>\n  );\n}\nWhen to use\nUse this decision tree to determine when to use the CodeBlock component and which configuration is most appropriate:\n\nUse Cases\n\nDocumentation: Code examples, API snippets, configuration files\nTutorials: Step-by-step code instructions with file context\nError messages: Stack traces, logs, debug output\nCode sharing: Shareable code snippets with copy functionality\nReference: Command line instructions, installation steps\n\nCodeBlock vs Other Components\n\nUse CodeBlock when: You need to display formatted code with copy functionality, file context, or scrollable content\nUse inline <code> when: Short code snippets within text, variable names, or simple commands\nUse CodeEditor when: Users need to edit code, with syntax checking and interactive features\nUse Pre when: You need basic preformatted text without the enhanced features\n\nAnatomy\nThe CodeBlock component is built with composition and provides multiple layers for different functionality:\nCodeBlock Component Structure:\n┌─────────────────────────────────────────────────┐\n│ Figure Container (Variants: size, width, height)│\n│ ┌─────────────────────────────────────────────┐ │\n│ │ Header (Conditional - if title provided)   │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ [📄] Title Text        [Copy Button]   │ │ │\n│ │ │ - Icon (string/ReactNode)              │ │ │\n│ │ │ - Figcaption with truncation           │ │ │\n│ │ │ - CopyButton (conditional)             │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ ScrollArea (Horizontal + Vertical)          │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ ScrollViewport (Copy Detection Area)   │ │ │\n│ │ │ ┌─────────────────────────────────────┐ │ │ │\n│ │ │ │ Pre Element                         │ │ │ │\n│ │ │ │ ┌─────────────────────────────────┐ │ │ │ │\n│ │ │ │ │ Code Element                    │ │ │ │ │\n│ │ │ │ │ - className: language-*         │ │ │ │ │\n│ │ │ │ │ - Syntax highlighting ready     │ │ │ │ │\n│ │ │ │ │ - Selection styling             │ │ │ │ │\n│ │ │ │ └─────────────────────────────────┘ │ │ │ │\n│ │ │ └─────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ Horizontal ScrollBar                    │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────┘ │\n│                                                 │\n│ Floating Copy Button (if no title)             │\n│ - Positioned absolute top-right                │\n│ - Backdrop blur effect                         │\n└─────────────────────────────────────────────────┘\n\nSimpleCodeBlock Wrapper:\n┌─────────────────────────────────────┐\n│ SimpleCodeBlock                     │\n│ - Takes: code, language, props      │\n│ - Auto-wraps in CodeBlock + Pre     │\n│ - Simplified interface              │\n│ - Ideal for backend developers      │\n└─────────────────────────────────────┘\nComponent Composition\n\nCodeBlock: Main container with variant styling and scroll management\nPre: Formatted pretext element with padding and overflow handling\nCode: Semantic code element with language classes for syntax highlighting\nScrollArea: Radix UI scroll area for smooth scrolling experience\nCopyButton: Interactive copy functionality with visual feedback\nSimpleCodeBlock: Simplified wrapper for common use cases\nVariant System: Size, width, and height controls using CVA\nCopy Detection: Smart text extraction excluding ignore classes\n\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nNo title\nPreviewCodeOpen in v0Loading component...\nNo copy button\nPreviewCodeOpen in v0Loading component...\nProps\nCodeBlock\nPropTypeDefaulttitle?string-icon?React.ReactNode-allowCopy?booleantrueviewportProps?ScrollAreaViewportProps-onCopy?() => void-className?string-\nPre\nPropTypeDefaultclassName?string-childrenReact.ReactNode-Built by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Code Block\n\nA customizable code block component with syntax highlighting, copy functionality, and scroll area support.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/code-block.mdx)\n\nPowered by\n\n[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-block-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe CodeBlock component provides a structured way to display code with syntax highlighting, copy functionality, and scrollable content:\n\n```\nimport { CodeBlock, Pre, SimpleCodeBlock } from '@/components/redpanda-ui/code-block';\n\n// Basic usage with syntax highlighting\nconst sampleCode = `function greetUser(name: string): string {\n  return \\`Hello, \\${name}! Welcome to Redpanda UI.\\`;\n}`;\n\nexport function Example() {\n  return (\n    <CodeBlock title=\"greet.ts\" icon=\"📄\">\n      <Pre>\n        <code className=\"language-typescript\">{sampleCode}</code>\n      </Pre>\n    </CodeBlock>\n  );\n}\n\n// Simplified interface for quick code blocks\nexport function SimpleExample() {\n  return (\n    <SimpleCodeBlock\n      code={sampleCode}\n      language=\"language-typescript\"\n      title=\"greet.ts\"\n      icon=\"📄\"\n      size=\"default\"\n      allowCopy={true}\n    />\n  );\n}\n\n// Different sizes and configurations\nexport function VariousExamples() {\n  return (\n    <>\n      {/* Small code block */}\n      <CodeBlock size=\"sm\" width=\"sm\" maxHeight=\"sm\">\n        <Pre>\n          <code className=\"language-bash\">npm install @redpanda-ui/core</code>\n        </Pre>\n      </CodeBlock>\n\n      {/* Full width with no copy button */}\n      <CodeBlock \n        title=\"config.json\" \n        width=\"full\" \n        allowCopy={false}\n        onCopy={() => console.log('Code copied!')}\n      >\n        <Pre>\n          <code className=\"language-json\">\n            {JSON.stringify({ theme: \"dark\", fontSize: 14 }, null, 2)}\n          </code>\n        </Pre>\n      </CodeBlock>\n\n      {/* Large with unlimited height */}\n      <CodeBlock size=\"lg\" maxHeight=\"none\">\n        <Pre>\n          <code className=\"language-typescript\">\n            {/* Long code content here */}\n          </code>\n        </Pre>\n      </CodeBlock>\n    </>\n  );\n}\n```\n\n## When to use\n\nUse this decision tree to determine when to use the CodeBlock component and which configuration is most appropriate:\n\n### Use Cases\n\n*   **Documentation**: Code examples, API snippets, configuration files\n*   **Tutorials**: Step-by-step code instructions with file context\n*   **Error messages**: Stack traces, logs, debug output\n*   **Code sharing**: Shareable code snippets with copy functionality\n*   **Reference**: Command line instructions, installation steps\n\n### CodeBlock vs Other Components\n\n*   **Use CodeBlock when**: You need to display formatted code with copy functionality, file context, or scrollable content\n*   **Use inline `<code>` when**: Short code snippets within text, variable names, or simple commands\n*   **Use CodeEditor when**: Users need to edit code, with syntax checking and interactive features\n*   **Use Pre when**: You need basic preformatted text without the enhanced features\n\n## Anatomy\n\nThe CodeBlock component is built with composition and provides multiple layers for different functionality:\n\n```\nCodeBlock Component Structure:\n┌─────────────────────────────────────────────────┐\n│ Figure Container (Variants: size, width, height)│\n│ ┌─────────────────────────────────────────────┐ │\n│ │ Header (Conditional - if title provided)   │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ [📄] Title Text        [Copy Button]   │ │ │\n│ │ │ - Icon (string/ReactNode)              │ │ │\n│ │ │ - Figcaption with truncation           │ │ │\n│ │ │ - CopyButton (conditional)             │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────┘ │\n│ ┌─────────────────────────────────────────────┐ │\n│ │ ScrollArea (Horizontal + Vertical)          │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ ScrollViewport (Copy Detection Area)   │ │ │\n│ │ │ ┌─────────────────────────────────────┐ │ │ │\n│ │ │ │ Pre Element                         │ │ │ │\n│ │ │ │ ┌─────────────────────────────────┐ │ │ │ │\n│ │ │ │ │ Code Element                    │ │ │ │ │\n│ │ │ │ │ - className: language-*         │ │ │ │ │\n│ │ │ │ │ - Syntax highlighting ready     │ │ │ │ │\n│ │ │ │ │ - Selection styling             │ │ │ │ │\n│ │ │ │ └─────────────────────────────────┘ │ │ │ │\n│ │ │ └─────────────────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────┐ │ │\n│ │ │ Horizontal ScrollBar                    │ │ │\n│ │ └─────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────┘ │\n│                                                 │\n│ Floating Copy Button (if no title)             │\n│ - Positioned absolute top-right                │\n│ - Backdrop blur effect                         │\n└─────────────────────────────────────────────────┘\n\nSimpleCodeBlock Wrapper:\n┌─────────────────────────────────────┐\n│ SimpleCodeBlock                     │\n│ - Takes: code, language, props      │\n│ - Auto-wraps in CodeBlock + Pre     │\n│ - Simplified interface              │\n│ - Ideal for backend developers      │\n└─────────────────────────────────────┘\n```\n\n### Component Composition\n\n*   **CodeBlock**: Main container with variant styling and scroll management\n*   **Pre**: Formatted pretext element with padding and overflow handling\n*   **Code**: Semantic code element with language classes for syntax highlighting\n*   **ScrollArea**: Radix UI scroll area for smooth scrolling experience\n*   **CopyButton**: Interactive copy functionality with visual feedback\n*   **SimpleCodeBlock**: Simplified wrapper for common use cases\n*   **Variant System**: Size, width, and height controls using CVA\n*   **Copy Detection**: Smart text extraction excluding ignore classes\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-block-demo.json)\n\nLoading component...\n\n### No title\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-block-no-title-demo.json)\n\nLoading component...\n\n### No copy button\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-block-no-copy-button-demo.json)\n\nLoading component...\n\n## Props\n\n### CodeBlock\n\nProp\n\nType\n\nDefault\n\n`title?`\n\n`string`\n\n\\-\n\n`icon?`\n\n`React.ReactNode`\n\n\\-\n\n`allowCopy?`\n\n`boolean`\n\n`true`\n\n`viewportProps?`\n\n`ScrollAreaViewportProps`\n\n\\-\n\n`onCopy?`\n\n`() => void`\n\n\\-\n\n`className?`\n\n`string`\n\n\\-\n\n### Pre\n\nProp\n\nType\n\nDefault\n\n`className?`\n\n`string`\n\n\\-\n\n`children`\n\n`React.ReactNode`\n\n\\-\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.386Z",
      "componentName": "code-block",
      "demoCode": "import { CodeBlock, Pre, SimpleCodeBlock } from '@/components/redpanda-ui/code-block';\n\n// Basic usage with syntax highlighting\nconst sampleCode = `function greetUser(name: string): string {\n  return \\`Hello, \\${name}! Welcome to Redpanda UI.\\`;\n}`;\n\nexport function Example() {\n  return (\n    <CodeBlock title=\"greet.ts\" icon=\"📄\">\n      <Pre>\n        <code className=\"language-typescript\">{sampleCode}</code>\n      </Pre>\n    </CodeBlock>\n  );\n}\n\n// Simplified interface for quick code blocks\nexport function SimpleExample() {\n  return (\n    <SimpleCodeBlock\n      code={sampleCode}\n      language=\"language-typescript\"\n      title=\"greet.ts\"\n      icon=\"📄\"\n      size=\"default\"\n      allowCopy={true}\n    />\n  );\n}\n\n// Different sizes and configurations\nexport function VariousExamples() {\n  return (\n    <>\n      {/* Small code block */}\n      <CodeBlock size=\"sm\" width=\"sm\" maxHeight=\"sm\">\n        <Pre>\n          <code className=\"language-bash\">npm install @redpanda-ui/core</code>\n        </Pre>\n      </CodeBlock>\n\n      {/* Full width with no copy button */}\n      <CodeBlock \n        title=\"config.json\" \n        width=\"full\" \n        allowCopy={false}\n        onCopy={() => console.log('Code copied!')}\n      >\n        <Pre>\n          <code className=\"language-json\">\n            {JSON.stringify({ theme: \"dark\", fontSize: 14 }, null, 2)}\n          </code>\n        </Pre>\n      </CodeBlock>\n\n      {/* Large with unlimited height */}\n      <CodeBlock size=\"lg\" maxHeight=\"none\">\n        <Pre>\n          <code className=\"language-typescript\">\n            {/* Long code content here */}\n          </code>\n        </Pre>\n      </CodeBlock>\n    </>\n  );\n}",
      "metadata": {
        "description": "A customizable code block component with syntax highlighting, copy functionality, and scroll area support.",
        "dependencies": [
          "@/components/redpanda-ui/code-block"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-code-comparison",
      "url": "https://redpanda-ui-registry.netlify.app/docs/code-comparison",
      "title": "Code Comparison",
      "content": "Code ComparisonA component which compares two code snippets.Made by itsarghyadasEdit on GitHubPowered byShikiLucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nThe Code Comparison component provides a side-by-side view of code changes with syntax highlighting, diff notation, and focus effects:\nimport { CodeComparison } from \"@/components/redpanda-ui/code-comparison\";\n\n// Basic comparison\nconst beforeCode = `function greetUser(name) {\n  console.log(\"Hello \" + name);\n}`;\n\nconst afterCode = `function greetUser(name: string): void {\n  console.log(\\`Hello \\${name}!\\`);\n}`;\n\nexport function Example() {\n  return (\n    <CodeComparison\n      beforeCode={beforeCode}\n      afterCode={afterCode}\n      language=\"typescript\"\n      filename=\"greet.ts\"\n      lightTheme=\"github-light\"\n      darkTheme=\"github-dark\"\n    />\n  );\n}\n\n// With diff notation and focus\nconst beforeWithDiff = `function calculateTotal(items) {\n  let total = 0;\n  for (let i = 0; i < items.length; i++) { // [!code --]\n    total += items[i].price;\n  }\n  return total;\n}`;\n\nconst afterWithDiff = `function calculateTotal(items: Item[]): number {\n  let total = 0;\n  for (const item of items) { // [!code ++]\n    total += item.price;\n  }\n  return total;\n}`;\n\nexport function DiffExample() {\n  return (\n    <CodeComparison\n      beforeCode={beforeWithDiff}\n      afterCode={afterWithDiff}\n      language=\"typescript\"\n      filename=\"calculate.ts\"\n      lightTheme=\"catppuccin-latte\"\n      darkTheme=\"catppuccin-mocha\"\n      highlightColor=\"#ff6b6b\"\n    />\n  );\n}\n\n// With focus highlighting\nconst beforeFocus = `function processData(data) {\n  const result = [];\n  for (let item of data) {\n    if (item.active) { // [!code focus]\n      result.push(transform(item)); // [!code focus]\n    }\n  }\n  return result;\n}`;\n\nconst afterFocus = `function processData(data: DataItem[]): ProcessedItem[] {\n  const result: ProcessedItem[] = [];\n  for (const item of data) {\n    if (item.active) { // [!code focus]\n      result.push(transform(item)); // [!code focus]\n    }\n  }\n  return result;\n}`;\n\nexport function FocusExample() {\n  return (\n    <CodeComparison\n      beforeCode={beforeFocus}\n      afterCode={afterFocus}\n      language=\"typescript\"\n      filename=\"process.ts\"\n      lightTheme=\"material-theme-lighter\"\n      darkTheme=\"material-theme-darker\"\n    />\n  );\n}\nIf you want to toggle between light and dark themes, you can use the theme prop.\n<CodeComparison\n  beforeCode={beforeCode}\n  afterCode={afterCode}\n  language=\"typescript\"\n  filename=\"greet.ts\"\n  lightTheme=\"github-light\"\n  darkTheme=\"github-dark\"\n  theme=\"dark\"\n/>\nWhen to use\nUse this decision tree to determine when to use the Code Comparison component:\n\nUse Cases\n\nCode refactoring: Show improvements, optimizations, or modernization changes\nTutorial content: Step-by-step code evolution in learning materials\nCode reviews: Visual diff for pull requests or code discussions\nBug fixes: Demonstrate problem code vs. solution\nMigration guides: Show old vs. new API usage patterns\nDocumentation: Compare different approaches or versions\n\nCode Comparison vs Other Components\n\nUse Code Comparison when: You need to show side-by-side code changes with visual diff highlighting\nUse regular CodeBlock when: Displaying single code examples without comparison needs\nUse diff utilities when: You need inline diff view or text-based comparison\nUse Tabs when: Switching between entirely different code examples, not comparing changes\n\nAnatomy\nThe Code Comparison component uses Shiki transformers to provide rich diff visualization:\nCode Comparison Component Structure:\n┌─────────────────────────────────────────────────────────┐\n│ Container (max-w-5xl, responsive grid)                 │\n│ ┌─────────────────────────────────────────────────────┐ │\n│ │ Border Container (rounded, border)                  │ │\n│ │ ┌─────────────────────────────────────────────────┐ │ │\n│ │ │ Grid Layout (md:grid-cols-2)                    │ │ │\n│ │ │ ┌─────────────────┐ ┌─────────────────────────┐ │ │ │\n│ │ │ │ Left Panel      │ │ Right Panel             │ │ │ │\n│ │ │ │ (Before Code)   │ │ (After Code)            │ │ │ │\n│ │ │ │ ┌─────────────┐ │ │ ┌─────────────────────┐ │ │ │ │\n│ │ │ │ │ Header      │ │ │ │ Header              │ │ │ │ │\n│ │ │ │ │ [📄] file   │ │ │ │ [📄] file   [after] │ │ │ │ │\n│ │ │ │ └─────────────┘ │ │ └─────────────────────┘ │ │ │ │\n│ │ │ │ ┌─────────────┐ │ │ ┌─────────────────────┐ │ │ │ │\n│ │ │ │ │ Code Area   │ │ │ │ Code Area           │ │ │ │ │\n│ │ │ │ │ - Syntax    │ │ │ │ - Syntax            │ │ │ │ │\n│ │ │ │ │ - Diff (-) │ │ │ │ - Diff (+)          │ │ │ │ │\n│ │ │ │ │ - Focus     │ │ │ │ - Focus             │ │ │ │ │\n│ │ │ │ │ - Blur/Fade │ │ │ │ - Blur/Fade         │ │ │ │ │\n│ │ │ │ └─────────────┘ │ │ └─────────────────────┘ │ │ │ │\n│ │ │ └─────────────────┘ └─────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────────────┐ │ │\n│ │ │ VS Badge (centered, absolute)                   │ │ │\n│ │ │ - Hidden on mobile                              │ │ │\n│ │ │ - Overlays the split line                       │ │ │\n│ │ └─────────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────┘\n\nShiki Transformer Pipeline:\n┌─────────────────────────────────────┐\n│ Input: beforeCode + afterCode       │\n│ ↓                                   │\n│ transformerNotationHighlight        │\n│ - Processes // [!code highlight]    │\n│ - Adds .highlighted classes         │\n│ ↓                                   │\n│ transformerNotationDiff             │\n│ - Processes // [!code ++/--]        │\n│ - Adds .add/.remove classes         │\n│ ↓                                   │\n│ transformerNotationFocus            │\n│ - Processes // [!code focus]        │\n│ - Adds .focused classes             │\n│ - Blurs non-focused lines           │\n│ ↓                                   │\n│ Shiki Theme Application             │\n│ - Applies syntax highlighting       │\n│ - Theme-aware color generation      │\n│ ↓                                   │\n│ HTML Output with Classes            │\n└─────────────────────────────────────┘\n\nInteractive Effects:\n┌─────────────────────────────────────┐\n│ Hover States                        │\n│ - group/left: affects left panel    │\n│ - group/right: affects right panel │\n│ - Removes blur on focused elements  │\n│ ↓                                   │\n│ Focus Detection                     │\n│ - hasLeftFocus / hasRightFocus      │\n│ - Auto-detected from .focused class │\n│ - Controls blur/opacity effects     │\n│ ↓                                   │\n│ Theme Integration                   │\n│ - useTheme hook integration         │\n│ - Dynamic light/dark switching      │\n│ - Preserves highlighting across     │\n│   theme changes                     │\n└─────────────────────────────────────┘\nComponent Composition\n\nCodeComparison: Main container with responsive grid layout\nTheme Integration: Dynamic theme switching with useTheme hook\nShiki Transformers: Advanced notation processing for diffs and focus\nInteractive Effects: Hover states and focus blur effects\nHeader Elements: File icons and before/after labels\nVS Badge: Central comparison indicator for desktop view\nResponsive Design: Stacked layout on mobile, side-by-side on desktop\nCustom Highlighting: Configurable highlight colors for emphasized lines\nAccessibility: Proper selection styling and keyboard navigation support\n\nProps\nDocs\nCredits\n\nWe take our inspiration from Magic UI for the code comparison component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Code Comparison\n\nA component which compares two code snippets.\n\nMade by [itsarghyadas](https://github.com/itsarghyadas)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/code-comparison.mdx)\n\nPowered by\n\n[![Shiki](https://img.logo.dev/shiki.style?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shiki](https://shiki.style/)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-comparison-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\nThe Code Comparison component provides a side-by-side view of code changes with syntax highlighting, diff notation, and focus effects:\n\n```\nimport { CodeComparison } from \"@/components/redpanda-ui/code-comparison\";\n\n// Basic comparison\nconst beforeCode = `function greetUser(name) {\n  console.log(\"Hello \" + name);\n}`;\n\nconst afterCode = `function greetUser(name: string): void {\n  console.log(\\`Hello \\${name}!\\`);\n}`;\n\nexport function Example() {\n  return (\n    <CodeComparison\n      beforeCode={beforeCode}\n      afterCode={afterCode}\n      language=\"typescript\"\n      filename=\"greet.ts\"\n      lightTheme=\"github-light\"\n      darkTheme=\"github-dark\"\n    />\n  );\n}\n\n// With diff notation and focus\nconst beforeWithDiff = `function calculateTotal(items) {\n  let total = 0;\n  for (let i = 0; i < items.length; i++) { // [!code --]\n    total += items[i].price;\n  }\n  return total;\n}`;\n\nconst afterWithDiff = `function calculateTotal(items: Item[]): number {\n  let total = 0;\n  for (const item of items) { // [!code ++]\n    total += item.price;\n  }\n  return total;\n}`;\n\nexport function DiffExample() {\n  return (\n    <CodeComparison\n      beforeCode={beforeWithDiff}\n      afterCode={afterWithDiff}\n      language=\"typescript\"\n      filename=\"calculate.ts\"\n      lightTheme=\"catppuccin-latte\"\n      darkTheme=\"catppuccin-mocha\"\n      highlightColor=\"#ff6b6b\"\n    />\n  );\n}\n\n// With focus highlighting\nconst beforeFocus = `function processData(data) {\n  const result = [];\n  for (let item of data) {\n    if (item.active) { // [!code focus]\n      result.push(transform(item)); // [!code focus]\n    }\n  }\n  return result;\n}`;\n\nconst afterFocus = `function processData(data: DataItem[]): ProcessedItem[] {\n  const result: ProcessedItem[] = [];\n  for (const item of data) {\n    if (item.active) { // [!code focus]\n      result.push(transform(item)); // [!code focus]\n    }\n  }\n  return result;\n}`;\n\nexport function FocusExample() {\n  return (\n    <CodeComparison\n      beforeCode={beforeFocus}\n      afterCode={afterFocus}\n      language=\"typescript\"\n      filename=\"process.ts\"\n      lightTheme=\"material-theme-lighter\"\n      darkTheme=\"material-theme-darker\"\n    />\n  );\n}\n```\n\nIf you want to toggle between light and dark themes, you can use the `theme` prop.\n\n```\n<CodeComparison\n  beforeCode={beforeCode}\n  afterCode={afterCode}\n  language=\"typescript\"\n  filename=\"greet.ts\"\n  lightTheme=\"github-light\"\n  darkTheme=\"github-dark\"\n  theme=\"dark\"\n/>\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Code Comparison component:\n\n### Use Cases\n\n*   **Code refactoring**: Show improvements, optimizations, or modernization changes\n*   **Tutorial content**: Step-by-step code evolution in learning materials\n*   **Code reviews**: Visual diff for pull requests or code discussions\n*   **Bug fixes**: Demonstrate problem code vs. solution\n*   **Migration guides**: Show old vs. new API usage patterns\n*   **Documentation**: Compare different approaches or versions\n\n### Code Comparison vs Other Components\n\n*   **Use Code Comparison when**: You need to show side-by-side code changes with visual diff highlighting\n*   **Use regular CodeBlock when**: Displaying single code examples without comparison needs\n*   **Use diff utilities when**: You need inline diff view or text-based comparison\n*   **Use Tabs when**: Switching between entirely different code examples, not comparing changes\n\n## Anatomy\n\nThe Code Comparison component uses Shiki transformers to provide rich diff visualization:\n\n```\nCode Comparison Component Structure:\n┌─────────────────────────────────────────────────────────┐\n│ Container (max-w-5xl, responsive grid)                 │\n│ ┌─────────────────────────────────────────────────────┐ │\n│ │ Border Container (rounded, border)                  │ │\n│ │ ┌─────────────────────────────────────────────────┐ │ │\n│ │ │ Grid Layout (md:grid-cols-2)                    │ │ │\n│ │ │ ┌─────────────────┐ ┌─────────────────────────┐ │ │ │\n│ │ │ │ Left Panel      │ │ Right Panel             │ │ │ │\n│ │ │ │ (Before Code)   │ │ (After Code)            │ │ │ │\n│ │ │ │ ┌─────────────┐ │ │ ┌─────────────────────┐ │ │ │ │\n│ │ │ │ │ Header      │ │ │ │ Header              │ │ │ │ │\n│ │ │ │ │ [📄] file   │ │ │ │ [📄] file   [after] │ │ │ │ │\n│ │ │ │ └─────────────┘ │ │ └─────────────────────┘ │ │ │ │\n│ │ │ │ ┌─────────────┐ │ │ ┌─────────────────────┐ │ │ │ │\n│ │ │ │ │ Code Area   │ │ │ │ Code Area           │ │ │ │ │\n│ │ │ │ │ - Syntax    │ │ │ │ - Syntax            │ │ │ │ │\n│ │ │ │ │ - Diff (-) │ │ │ │ - Diff (+)          │ │ │ │ │\n│ │ │ │ │ - Focus     │ │ │ │ - Focus             │ │ │ │ │\n│ │ │ │ │ - Blur/Fade │ │ │ │ - Blur/Fade         │ │ │ │ │\n│ │ │ │ └─────────────┘ │ │ └─────────────────────┘ │ │ │ │\n│ │ │ └─────────────────┘ └─────────────────────────┘ │ │ │\n│ │ └─────────────────────────────────────────────────┘ │ │\n│ │ ┌─────────────────────────────────────────────────┐ │ │\n│ │ │ VS Badge (centered, absolute)                   │ │ │\n│ │ │ - Hidden on mobile                              │ │ │\n│ │ │ - Overlays the split line                       │ │ │\n│ │ └─────────────────────────────────────────────────┘ │ │\n│ └─────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────┘\n\nShiki Transformer Pipeline:\n┌─────────────────────────────────────┐\n│ Input: beforeCode + afterCode       │\n│ ↓                                   │\n│ transformerNotationHighlight        │\n│ - Processes // [!code highlight]    │\n│ - Adds .highlighted classes         │\n│ ↓                                   │\n│ transformerNotationDiff             │\n│ - Processes // [!code ++/--]        │\n│ - Adds .add/.remove classes         │\n│ ↓                                   │\n│ transformerNotationFocus            │\n│ - Processes // [!code focus]        │\n│ - Adds .focused classes             │\n│ - Blurs non-focused lines           │\n│ ↓                                   │\n│ Shiki Theme Application             │\n│ - Applies syntax highlighting       │\n│ - Theme-aware color generation      │\n│ ↓                                   │\n│ HTML Output with Classes            │\n└─────────────────────────────────────┘\n\nInteractive Effects:\n┌─────────────────────────────────────┐\n│ Hover States                        │\n│ - group/left: affects left panel    │\n│ - group/right: affects right panel │\n│ - Removes blur on focused elements  │\n│ ↓                                   │\n│ Focus Detection                     │\n│ - hasLeftFocus / hasRightFocus      │\n│ - Auto-detected from .focused class │\n│ - Controls blur/opacity effects     │\n│ ↓                                   │\n│ Theme Integration                   │\n│ - useTheme hook integration         │\n│ - Dynamic light/dark switching      │\n│ - Preserves highlighting across     │\n│   theme changes                     │\n└─────────────────────────────────────┘\n```\n\n### Component Composition\n\n*   **CodeComparison**: Main container with responsive grid layout\n*   **Theme Integration**: Dynamic theme switching with useTheme hook\n*   **Shiki Transformers**: Advanced notation processing for diffs and focus\n*   **Interactive Effects**: Hover states and focus blur effects\n*   **Header Elements**: File icons and before/after labels\n*   **VS Badge**: Central comparison indicator for desktop view\n*   **Responsive Design**: Stacked layout on mobile, side-by-side on desktop\n*   **Custom Highlighting**: Configurable highlight colors for emphasized lines\n*   **Accessibility**: Proper selection styling and keyboard navigation support\n\n## Props\n\n[Docs](https://magicui.design/docs/components/code-comparison)\n\n## Credits\n\n*   We take our inspiration from [Magic UI](https://magicui.design/docs/components/code-comparison) for the code comparison component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.341Z",
      "componentName": "code-comparison",
      "demoCode": "import { CodeComparison } from \"@/components/redpanda-ui/code-comparison\";\n\n// Basic comparison\nconst beforeCode = `function greetUser(name) {\n  console.log(\"Hello \" + name);\n}`;\n\nconst afterCode = `function greetUser(name: string): void {\n  console.log(\\`Hello \\${name}!\\`);\n}`;\n\nexport function Example() {\n  return (\n    <CodeComparison\n      beforeCode={beforeCode}\n      afterCode={afterCode}\n      language=\"typescript\"\n      filename=\"greet.ts\"\n      lightTheme=\"github-light\"\n      darkTheme=\"github-dark\"\n    />\n  );\n}\n\n// With diff notation and focus\nconst beforeWithDiff = `function calculateTotal(items) {\n  let total = 0;\n  for (let i = 0; i < items.length; i++) { // [!code --]\n    total += items[i].price;\n  }\n  return total;\n}`;\n\nconst afterWithDiff = `function calculateTotal(items: Item[]): number {\n  let total = 0;\n  for (const item of items) { // [!code ++]\n    total += item.price;\n  }\n  return total;\n}`;\n\nexport function DiffExample() {\n  return (\n    <CodeComparison\n      beforeCode={beforeWithDiff}\n      afterCode={afterWithDiff}\n      language=\"typescript\"\n      filename=\"calculate.ts\"\n      lightTheme=\"catppuccin-latte\"\n      darkTheme=\"catppuccin-mocha\"\n      highlightColor=\"#ff6b6b\"\n    />\n  );\n}\n\n// With focus highlighting\nconst beforeFocus = `function processData(data) {\n  const result = [];\n  for (let item of data) {\n    if (item.active) { // [!code focus]\n      result.push(transform(item)); // [!code focus]\n    }\n  }\n  return result;\n}`;\n\nconst afterFocus = `function processData(data: DataItem[]): ProcessedItem[] {\n  const result: ProcessedItem[] = [];\n  for (const item of data) {\n    if (item.active) { // [!code focus]\n      result.push(transform(item)); // [!code focus]\n    }\n  }\n  return result;\n}`;\n\nexport function FocusExample() {\n  return (\n    <CodeComparison\n      beforeCode={beforeFocus}\n      afterCode={afterFocus}\n      language=\"typescript\"\n      filename=\"process.ts\"\n      lightTheme=\"material-theme-lighter\"\n      darkTheme=\"material-theme-darker\"\n    />\n  );\n}",
      "metadata": {
        "description": "A component which compares two code snippets.",
        "dependencies": [
          "@/components/redpanda-ui/code-comparison"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-code-editor",
      "url": "https://redpanda-ui-registry.netlify.app/docs/code-editor",
      "title": "Code Editor",
      "content": "Code EditorA code editor component featuring syntax highlighting and animation.Made by imskyleenEdit on GitHubPowered byAnimate UIMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\n<CodeEditor lang=\"tsx\">\n  {`const a = 1;\nconst b = 2;\nconst c = a + b;`}\n</CodeEditor>\nIf you want to toggle between light and dark themes, you can use the theme prop.\n<CodeEditor lang=\"tsx\" theme=\"dark\">\n  {`const a = 1;\nconst b = 2;\nconst c = a + b;`}\n</CodeEditor>\nWhen to use\nUse this decision tree to determine when to use the Code Editor component:\n\nProps\nPropTypeDefaultchildrenstring-langstring-themes?{ light: string; dark: string }{ light: \"github-light\"; dark: \"github-dark\" }duration?number5delay?number0header?booleantruedots?booleantrueicon?React.ReactNode-cursor?booleanfalseinView?booleanfalseinViewMargin?string0pxinViewOnce?booleantruecopyButton?booleanfalsewriting?booleantruetitle?string-onDone?() => void-onCopy?(content: string) => void-\nCredits\n\nWe use Animate UI for the code editor component and style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Code Editor\n\nA code editor component featuring syntax highlighting and animation.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/code-editor.mdx)\n\nPowered by\n\n[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/components/code-editor)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-editor-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n```\n<CodeEditor lang=\"tsx\">\n  {`const a = 1;\nconst b = 2;\nconst c = a + b;`}\n</CodeEditor>\n```\n\nIf you want to toggle between light and dark themes, you can use the `theme` prop.\n\n```\n<CodeEditor lang=\"tsx\" theme=\"dark\">\n  {`const a = 1;\nconst b = 2;\nconst c = a + b;`}\n</CodeEditor>\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Code Editor component:\n\n## Props\n\nProp\n\nType\n\nDefault\n\n`children`\n\n`string`\n\n\\-\n\n`lang`\n\n`string`\n\n\\-\n\n`themes?`\n\n`{ light: string; dark: string }`\n\n`{ light: \"github-light\"; dark: \"github-dark\" }`\n\n`duration?`\n\n`number`\n\n`5`\n\n`delay?`\n\n`number`\n\n`0`\n\n`header?`\n\n`boolean`\n\n`true`\n\n`dots?`\n\n`boolean`\n\n`true`\n\n`icon?`\n\n`React.ReactNode`\n\n\\-\n\n`cursor?`\n\n`boolean`\n\n`false`\n\n`inView?`\n\n`boolean`\n\n`false`\n\n`inViewMargin?`\n\n`string`\n\n`0px`\n\n`inViewOnce?`\n\n`boolean`\n\n`true`\n\n`copyButton?`\n\n`boolean`\n\n`false`\n\n`writing?`\n\n`boolean`\n\n`true`\n\n`title?`\n\n`string`\n\n\\-\n\n`onDone?`\n\n`() => void`\n\n\\-\n\n`onCopy?`\n\n`(content: string) => void`\n\n\\-\n\n## Credits\n\n*   We use [Animate UI](https://animate-ui.com/docs/components/code-editor) for the code editor component and style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:20.902Z",
      "componentName": "code-editor",
      "demoCode": "<CodeEditor lang=\"tsx\">\n  {`const a = 1;\nconst b = 2;\nconst c = a + b;`}\n</CodeEditor>",
      "metadata": {
        "description": "A code editor component featuring syntax highlighting and animation."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-code-tabs",
      "url": "https://redpanda-ui-registry.netlify.app/docs/code-tabs",
      "title": "Code Tabs",
      "content": "Code TabsA tabs component that displays code for different languages/CLI commands.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UIMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\n<CodeTabs variant=\"default\" codes={codes} />\nIf you want to toggle between light and dark themes, you can use the theme prop.\n<CodeTabs variant=\"default\" codes={codes} theme=\"dark\" />\nWhen to use\nUse this decision tree to determine when to use the Code Tabs component:\n\nExamples\nInstall Tabs\nPreviewCodeOpen in v0Loading component...\nProps\nPropTypeDefaultcodesRecord<string, string>-lang?stringbashthemes?Record<string, string>{ light: 'github-light', dark: 'github-dark' }copyButton?booleantrueonCopy?(content: string) => void-variant?'default'default\nCredits\n\nWe use Radix UI for the tabs component.\nWe take our inspiration from Shadcn UI for the tabs style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Code Tabs\n\nA tabs component that displays code for different languages/CLI commands.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/code-tabs.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/tabs)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/tabs)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/components/code-tabs)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-tabs-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n```\n<CodeTabs variant=\"default\" codes={codes} />\n```\n\nIf you want to toggle between light and dark themes, you can use the `theme` prop.\n\n```\n<CodeTabs variant=\"default\" codes={codes} theme=\"dark\" />\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Code Tabs component:\n\n## Examples\n\n### Install Tabs\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/code-tabs-install-demo.json)\n\nLoading component...\n\n## Props\n\nProp\n\nType\n\nDefault\n\n`codes`\n\n`Record<string, string>`\n\n\\-\n\n`lang?`\n\n`string`\n\n`bash`\n\n`themes?`\n\n`Record<string, string>`\n\n`{ light: 'github-light', dark: 'github-dark' }`\n\n`copyButton?`\n\n`boolean`\n\n`true`\n\n`onCopy?`\n\n`(content: string) => void`\n\n\\-\n\n`variant?`\n\n`'default'`\n\n`default`\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/tabs) for the tabs component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/tabs) for the tabs style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.293Z",
      "componentName": "code-tabs",
      "demoCode": "<CodeTabs variant=\"default\" codes={codes} />",
      "metadata": {
        "description": "A tabs component that displays code for different languages/CLI commands."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-collapsible",
      "url": "https://redpanda-ui-registry.netlify.app/docs/collapsible",
      "title": "Collapsible",
      "content": "CollapsibleAn interactive component which expands/collapses a panel.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UIMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\n<Collapsible>\n  <CollapsibleTrigger>Collapsible Trigger</CollapsibleTrigger>\n  <CollapsibleContent>Collapsible Content</CollapsibleContent>\n</Collapsible>\nWhen to use\nUse this decision tree to determine when to use the Collapsible component:\n\nProps\nDocsAPI Reference\nAnimate UI Props\nCollapsibleContent\nPropTypeDefaulttransition?Transition{ type: 'spring', stiffness: 150, damping: 22 }\nDon't delete from the DOM\nThe choice made is the same as Radix UI, i.e. to remove the element from the DOM for accessibility and performance reasons. However, this may pose a problem for SEO. If you want your Collapsible content to be taken into account by Google, please replace the CollapsibleContent component with:\ncomponents/animate-ui/radix-collapsible.tsxconst CollapsibleContent = React.forwardRef<\n  React.ElementRef<typeof CollapsiblePrimitive.Content>,\n  CollapsibleContentProps\n>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 17 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = useCollapsible();\n\n    return (\n      <CollapsiblePrimitive.Content asChild forceMount ref={ref} {...props}>\n        <motion.div\n          layout\n          initial={false}\n          animate={\n            isOpen\n              ? { opacity: 1, height: 'auto', overflow: 'hidden' }\n              : { opacity: 0, height: 0, overflow: 'hidden' }\n          }\n          transition={transition}\n          className={className}\n        >\n          {children}\n        </motion.div>\n      </CollapsiblePrimitive.Content>\n    );\n  },\n);\nCredits\n\nWe use Radix UI for the collapsible component.\nWe take our inspiration from Shadcn UI for the collapsible style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Collapsible\n\nAn interactive component which expands/collapses a panel.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/collapsible.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/collapsible)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/collapsible)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/radix/collapsible)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/collapsible-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n```\n<Collapsible>\n  <CollapsibleTrigger>Collapsible Trigger</CollapsibleTrigger>\n  <CollapsibleContent>Collapsible Content</CollapsibleContent>\n</Collapsible>\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Collapsible component:\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/collapsible)[API Reference](https://www.radix-ui.com/primitives/docs/components/collapsible#api-reference)\n\n### Animate UI Props\n\n#### CollapsibleContent\n\nProp\n\nType\n\nDefault\n\n`transition?`\n\n`Transition`\n\n`{ type: 'spring', stiffness: 150, damping: 22 }`\n\n## Don't delete from the DOM\n\nThe choice made is the same as Radix UI, i.e. to remove the element from the DOM for accessibility and performance reasons. However, this may pose a problem for SEO. If you want your Collapsible content to be taken into account by Google, please **replace the CollapsibleContent component with**:\n\ncomponents/animate-ui/radix-collapsible.tsx\n\n```\nconst CollapsibleContent = React.forwardRef<\n  React.ElementRef<typeof CollapsiblePrimitive.Content>,\n  CollapsibleContentProps\n>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 17 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = useCollapsible();\n\n    return (\n      <CollapsiblePrimitive.Content asChild forceMount ref={ref} {...props}>\n        <motion.div\n          layout\n          initial={false}\n          animate={\n            isOpen\n              ? { opacity: 1, height: 'auto', overflow: 'hidden' }\n              : { opacity: 0, height: 0, overflow: 'hidden' }\n          }\n          transition={transition}\n          className={className}\n        >\n          {children}\n        </motion.div>\n      </CollapsiblePrimitive.Content>\n    );\n  },\n);\n```\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/collapsible) for the collapsible component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/collapsible) for the collapsible style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.049Z",
      "componentName": "collapsible",
      "demoCode": "<Collapsible>\n  <CollapsibleTrigger>Collapsible Trigger</CollapsibleTrigger>\n  <CollapsibleContent>Collapsible Content</CollapsibleContent>\n</Collapsible>",
      "metadata": {
        "description": "An interactive component which expands/collapses a panel."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-combobox",
      "url": "https://redpanda-ui-registry.netlify.app/docs/combobox",
      "title": "Combobox",
      "content": "ComboboxAutocomplete input and command palette with a list of suggestions.Made by shadcnEdit on GitHubPowered byShadcn UI\nPreviewCodeOpen in v0Loading component...\nWhen to use\nUse this decision tree to determine when to use the Combobox component:\n\nUsage\n\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from '@/registry/lib/utils';\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\nExamples\nCombobox\nPreviewCodeOpen in v0Loading component...\nPopover\nPreviewCodeOpen in v0Loading component...\nResponsive\nYou can create a responsive combobox by using the <Popover /> on desktop and the <Drawer /> components on mobile.\nPreviewCodeOpen in v0Loading component...\nGroup\nYou can create a group combobox by using CommandGroup component.\nPreviewCodeOpen in v0Loading component...\nForm\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe take our inspiration from Shadcn UI for the combobox component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Combobox\n\nAutocomplete input and command palette with a list of suggestions.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/combobox.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/combobox)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/combobox-demo.json)\n\nLoading component...\n\n## When to use\n\nUse this decision tree to determine when to use the Combobox component:\n\n## Usage\n\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from '@/registry/lib/utils';\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n## Examples\n\n### Combobox\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/combobox-demo.json)\n\nLoading component...\n\n### Popover\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/combobox-popover-demo.json)\n\nLoading component...\n\n### Responsive\n\nYou can create a responsive combobox by using the `<Popover />` on desktop and the `<Drawer />` components on mobile.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/combobox-responsive-demo.json)\n\nLoading component...\n\n### Group\n\nYou can create a group combobox by using CommandGroup component.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/combobox-group-demo.json)\n\nLoading component...\n\n### Form\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/combobox-form-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/combobox) for the combobox component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.425Z",
      "componentName": "combobox",
      "demoCode": "\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from '@/registry/lib/utils';\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}",
      "metadata": {
        "description": "Autocomplete input and command palette with a list of suggestions.",
        "dependencies": [
          "react",
          "lucide-react",
          "@/registry/lib/utils",
          "@/components/ui/button"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-command",
      "url": "https://redpanda-ui-registry.netlify.app/docs/command",
      "title": "Command",
      "content": "CommandFast, composable, unstyled command menu for React.Made by pacocourseyEdit on GitHubPowered byShadcn UIcmdkLucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Command component:\n\nUsage\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n  SimpleCommand,\n} from \"@/components/ui/command\"\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>\nExamples\nSimple Command\nA higher-level component that provides a simplified API for creating command menus.\nPreviewCodeOpen in v0Loading component...\nSimpleCommand Props\nPropTypeDefaultDescriptionplaceholderstring\"Type a command or search...\"Input placeholder textemptyMessagestring\"No results found.\"Message shown when no resultsgroupsArray<CommandGroup>-Array of command groups (required)size'sm' | 'default' | 'lg' | 'full''default'Command size variantclassNamestring-Additional CSS classes\nCommandGroup Interface\ninterface CommandGroup {\n  heading?: string;\n  items: CommandItem[];\n}\n\ninterface CommandItem {\n  icon?: React.ReactNode;\n  label: string;\n  shortcut?: string;\n  disabled?: boolean;\n  onSelect?: () => void;\n}\nUsage\nimport { SimpleCommand } from \"@/components/ui/command\"\n\nconst commandGroups = [\n  {\n    heading: 'Actions',\n    items: [\n      {\n        icon: <Calendar />,\n        label: 'Calendar',\n        shortcut: '⌘C',\n        onSelect: () => console.log('Calendar selected'),\n      },\n      {\n        icon: <Settings />,\n        label: 'Settings',\n        disabled: true,\n        onSelect: () => console.log('Settings selected'),\n      },\n    ],\n  },\n];\n\n<SimpleCommand\n  groups={commandGroups}\n  placeholder=\"Search commands...\"\n  emptyMessage=\"No commands found.\"\n/>\nDialog\nPreviewCodeOpen in v0Loading component...\nTo show the command menu in a dialog, use the <CommandDialog /> component.\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  )\n}\nCombobox\nYou can use the <Command /> component as a combobox. See the Combobox page for more information.\nProps\nDocsAPI Reference\nCredits\n\nWe use cmdk for the command component.\nWe take our inspiration from Shadcn UI for the command style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Command\n\nFast, composable, unstyled command menu for React.\n\nMade by [pacocoursey](https://github.com/pacocoursey)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/command.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/command)[![cmdk](https://img.logo.dev/cmdk.paco.me?token=pk_Q3Q-iPRxREyBYQYEiIraeA)cmdk](https://cmdk.paco.me/)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/command-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Command component:\n\n## Usage\n\n```\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n  SimpleCommand,\n} from \"@/components/ui/command\"\n```\n\n```\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>\n```\n\n## Examples\n\n### Simple Command\n\nA higher-level component that provides a simplified API for creating command menus.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/command-simple-demo.json)\n\nLoading component...\n\n### SimpleCommand Props\n\nProp\n\nType\n\nDefault\n\nDescription\n\n`placeholder`\n\n`string`\n\n`\"Type a command or search...\"`\n\nInput placeholder text\n\n`emptyMessage`\n\n`string`\n\n`\"No results found.\"`\n\nMessage shown when no results\n\n`groups`\n\n`Array<CommandGroup>`\n\n\\-\n\nArray of command groups (required)\n\n`size`\n\n`'sm' | 'default' | 'lg' | 'full'`\n\n`'default'`\n\nCommand size variant\n\n`className`\n\n`string`\n\n\\-\n\nAdditional CSS classes\n\n### CommandGroup Interface\n\n```\ninterface CommandGroup {\n  heading?: string;\n  items: CommandItem[];\n}\n\ninterface CommandItem {\n  icon?: React.ReactNode;\n  label: string;\n  shortcut?: string;\n  disabled?: boolean;\n  onSelect?: () => void;\n}\n```\n\n### Usage\n\n```\nimport { SimpleCommand } from \"@/components/ui/command\"\n\nconst commandGroups = [\n  {\n    heading: 'Actions',\n    items: [\n      {\n        icon: <Calendar />,\n        label: 'Calendar',\n        shortcut: '⌘C',\n        onSelect: () => console.log('Calendar selected'),\n      },\n      {\n        icon: <Settings />,\n        label: 'Settings',\n        disabled: true,\n        onSelect: () => console.log('Settings selected'),\n      },\n    ],\n  },\n];\n\n<SimpleCommand\n  groups={commandGroups}\n  placeholder=\"Search commands...\"\n  emptyMessage=\"No commands found.\"\n/>\n```\n\n### Dialog\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/command-dialog-demo.json)\n\nLoading component...\n\nTo show the command menu in a dialog, use the `<CommandDialog />` component.\n\n```\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  )\n}\n```\n\n### Combobox\n\nYou can use the `<Command />` component as a combobox. See the [Combobox](/docs/combobox) page for more information.\n\n## Props\n\n[Docs](https://cmdk.paco.me/)[API Reference](https://github.com/pacocoursey/cmdk)\n\n## Credits\n\n*   We use [cmdk](https://cmdk.paco.me) for the command component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/command) for the command style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.300Z",
      "componentName": "command",
      "demoCode": "<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>",
      "metadata": {
        "description": "Fast, composable, unstyled command menu for React.",
        "dependencies": [
          "@/components/ui/command"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-context-menu",
      "url": "https://redpanda-ui-registry.netlify.app/docs/context-menu",
      "title": "Context Menu",
      "content": "Context MenuDisplays a menu to the user — such as a set of actions or functions — triggered by a button.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UILucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Context Menu component:\n\nUsage\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>\nProps\nDocsAPI Reference\nCredits\n\nWe use Radix UI for the context-menu component.\nWe take our inspiration from Shadcn UI for the context-menu style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Context Menu\n\nDisplays a menu to the user — such as a set of actions or functions — triggered by a button.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/context-menu.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/context-menu)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/context-menu)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/context-menu-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Context Menu component:\n\n## Usage\n\n```\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\n```\n\n```\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>\n```\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/context-menu)[API Reference](https://www.radix-ui.com/primitives/docs/components/context-menu#api-reference)\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/context-menu) for the context-menu component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/context-menu) for the context-menu style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.676Z",
      "componentName": "context-menu",
      "demoCode": "<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>",
      "metadata": {
        "description": "Displays a menu to the user — such as a set of actions or functions — triggered by a button."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-contributing",
      "url": "https://redpanda-ui-registry.netlify.app/docs/contributing",
      "title": "Contributing",
      "content": "ContributingLearn how to add new components to the Redpanda UI Registry.Edit on GitHubThis guide explains how to contribute new components to the Redpanda UI Registry.\nEdit an Existing Component\nIf modifying a component to correct or improve it:\n\nAdd a screenshot (photo or video) showing before and after the modification\nClearly explain why you made the modification\nUpdate the demo and documentation if necessary\nDon't change behavior completely unless there's a good reason\n\nAdding a New Component\nFollow these steps to add a new component to the registry:\n1. Create the Component\nCreate your component in /packages/registry/src/components/<component-name>/ with the following files:\n\nindex.tsx - The main component implementation\n\nExample structure:\npackages/registry/src/\n  components/\n    my-component/\n      index.tsx\n2. Create Component Demo\nAdd a demo showcasing your component in /packages/registry/src/demo/<component-name>/index.tsx:\nimport { MyComponent } from \"@/components/my-component\"\n\n// Export with PascalCase name matching directory + \"Demo\" suffix  \nexport function MyComponentDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <MyComponent>\n        Example usage\n      </MyComponent>\n    </div>\n  )\n}\nAlways make sure to export as a module!\nExport Requirements:\n\nModule export must follow PascalCase + \"Demo\" pattern (e.g., ComponentDemo)\nDirectory component → Export ComponentDemo\nFor variants: Directory component-variant → Export ComponentVariantDemo\n\nAdd Tweakpane (Optional)\nYou can add a Tweakpane allowing users to play with your demo props:\nNumber Props:\n// Simple number input\n\"myNumber\": { \"value\": 10 }\n\n// Slider\n\"myNumber\": { \"value\": 10, \"min\": 0, \"max\": 100, \"step\": 1 }\n\n// Select dropdown\n\"mySize\": {\n  \"value\": 10,\n  \"options\": {\n    \"Big\": 30,\n    \"Medium\": 20,\n    \"Small\": 10\n  }\n}\nString Props:\n// Simple text input\n\"myString\": { \"value\": \"Hello World\" }\n\n// Select dropdown\n\"myVariant\": {\n  \"value\": \"small\",\n  \"options\": {\n    \"Big\": \"big\",\n    \"Medium\": \"medium\", \n    \"Small\": \"small\"\n  }\n}\nBoolean Props:\n\"myBoolean\": { \"value\": true }\n3. Add Documentation\nCreate a documentation file at /packages/docs/content/docs/<component-name>.mdx:\n---\ntitle: My Component\ndescription: Brief description of what the component does.\nicon: Square\nauthor:\n  name: Your Name\n  url: https://github.com/yourusername\n---\n\n<ComponentPreview name=\"my-component-demo\" />\n\n## Installation\n\n<ComponentInstallation name=\"my-component\" />\n\n## Usage\n\n```tsx\nimport { MyComponent } from \"@/components/ui/my-component\"\n<MyComponent>\n  Content goes here\n</MyComponent>\n4. Build and Verify\nRun the following commands to build and verify your component:\n# Type check\nbun run type:check\n\n# Build registry\nbun run registry:build # this ensures your component source code is exposed whenever anyone installs the registry package\n\n# Build project\nbun run build # automatically generates docs navigation, playground routes, and component discovery\n5. Add Playground Route (Optional)\nThe playground automatically discovers and routes all components, but you can create a custom route for enhanced visual regression testing in /packages/playground/src/routes/demo/<component-name>.tsx:\nimport { MyComponentDemo } from '@redpanda/registry/demo/my-component';\nimport PageHeader, { ComponentCard, PageGrid } from '@/components/component-preview';\n\nexport const myComponentComponents = [\n  { name: 'my-component', meta: { style: 1 } },\n  // Add variants here if needed\n];\n\nconst myComponentVariants = [<MyComponentDemo key=\"my-component\" />];\n\nexport default function MyComponentPage() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <PageHeader title=\"My Component\">Brief description of the component.</PageHeader>\n      <PageGrid>\n        {myComponentComponents.map((component, index) => (\n          <ComponentCard key={component.name} component={component}>\n            {myComponentVariants[index]}\n          </ComponentCard>\n        ))}\n      </PageGrid>\n    </div>\n  );\n}\nThe component array export pattern ensures our visual regression script picks it up at build time.\n6. Validate Component Integration\nUse the registry-component-validator agent to ensure your component is properly integrated across all packages:\n# Ask Claude Code to run the validator\n\"Please run the registry-component-validator agent to check my new component\"\nThe validator will:\n\n✅ Verify your component exports work with dynamic loading\n✅ Check MDX files use proper <ComponentPreview name=\"...\" /> syntax\n✅ Validate cross-package consistency (registry, docs, playground)\n✅ Ensure proper naming conventions and file structure\n✅ Ensure playground routes exist for visual regression testing\n✅ Generate a comprehensive validation report\n\nComponent Guidelines\nCode Style\n\nFollow existing component patterns in the registry\nUse TypeScript with proper type definitions\nImplement proper forwarding of refs and props where applicable\nFollow Tailwind CSS conventions for styling\n\nDocumentation\n\nUse the same format as existing components (for example copy from card.mdx)\nInclude clear usage examples\nProvide multiple demo variations when relevant\nDocument all props and customization options\n\nDependencies\n\nMinimize external dependencies\nReuse existing registry components when possible\n\nTesting Your Component\nBefore submitting:\n\nVerify component renders correctly in the demo (run bun run dev to see your component in the playground and docs site)\nTest installation via CLI (you can do this locally by running bun x --bun @fumadocs/cli add --dir <your-box>/ui-registry/packages/docs/public/r <component-name>)\nEnsure documentation renders properly with <ComponentPreview />\nRun all build commands to verify automation works:\nbun run format # Formats the code\nbun run type:check  # Validates TypeScript\nbun run build  # Tests navigation auto-generation and routing\n\nTest in both light and dark themes\nRun the registry-component-validator agent to catch integration issues early\nRequest UX Team for review - request a review from the UX Team to ensure the component is properly integrated into the Redpanda UI\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Contributing\n\nLearn how to add new components to the Redpanda UI Registry.\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/contributing.mdx)\n\nThis guide explains how to contribute new components to the Redpanda UI Registry.\n\n## Edit an Existing Component\n\nIf modifying a component to correct or improve it:\n\n*   Add a screenshot (photo or video) showing before and after the modification\n*   Clearly explain why you made the modification\n*   Update the demo and documentation if necessary\n*   Don't change behavior completely unless there's a good reason\n\n## Adding a New Component\n\nFollow these steps to add a new component to the registry:\n\n### 1\\. Create the Component\n\nCreate your component in `/packages/registry/src/components/<component-name>/` with the following files:\n\n*   `index.tsx` - The main component implementation\n\n**Example structure:**\n\n```\npackages/registry/src/\n  components/\n    my-component/\n      index.tsx\n```\n\n### 2\\. Create Component Demo\n\nAdd a demo showcasing your component in `/packages/registry/src/demo/<component-name>/index.tsx`:\n\n```\nimport { MyComponent } from \"@/components/my-component\"\n\n// Export with PascalCase name matching directory + \"Demo\" suffix  \nexport function MyComponentDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <MyComponent>\n        Example usage\n      </MyComponent>\n    </div>\n  )\n}\n```\n\nAlways make sure to export as a module!\n\n**Export Requirements:**\n\n*   Module export must follow PascalCase + \"Demo\" pattern (e.g., `ComponentDemo`)\n*   Directory `component` → Export `ComponentDemo`\n*   For variants: Directory `component-variant` → Export `ComponentVariantDemo`\n\n#### Add Tweakpane (Optional)\n\nYou can add a Tweakpane allowing users to play with your demo props:\n\n**Number Props:**\n\n```\n// Simple number input\n\"myNumber\": { \"value\": 10 }\n\n// Slider\n\"myNumber\": { \"value\": 10, \"min\": 0, \"max\": 100, \"step\": 1 }\n\n// Select dropdown\n\"mySize\": {\n  \"value\": 10,\n  \"options\": {\n    \"Big\": 30,\n    \"Medium\": 20,\n    \"Small\": 10\n  }\n}\n```\n\n**String Props:**\n\n```\n// Simple text input\n\"myString\": { \"value\": \"Hello World\" }\n\n// Select dropdown\n\"myVariant\": {\n  \"value\": \"small\",\n  \"options\": {\n    \"Big\": \"big\",\n    \"Medium\": \"medium\", \n    \"Small\": \"small\"\n  }\n}\n```\n\n**Boolean Props:**\n\n```\n\"myBoolean\": { \"value\": true }\n```\n\n### 3\\. Add Documentation\n\nCreate a documentation file at `/packages/docs/content/docs/<component-name>.mdx`:\n\n````\n---\ntitle: My Component\ndescription: Brief description of what the component does.\nicon: Square\nauthor:\n  name: Your Name\n  url: https://github.com/yourusername\n---\n\n<ComponentPreview name=\"my-component-demo\" />\n\n## Installation\n\n<ComponentInstallation name=\"my-component\" />\n\n## Usage\n\n```tsx\nimport { MyComponent } from \"@/components/ui/my-component\"\n````\n\n```\n<MyComponent>\n  Content goes here\n</MyComponent>\n```\n\n### 4\\. Build and Verify\n\nRun the following commands to build and verify your component:\n\n```\n# Type check\nbun run type:check\n\n# Build registry\nbun run registry:build # this ensures your component source code is exposed whenever anyone installs the registry package\n\n# Build project\nbun run build # automatically generates docs navigation, playground routes, and component discovery\n```\n\n### 5\\. Add Playground Route (Optional)\n\nThe playground **automatically discovers and routes all components**, but you can create a custom route for enhanced visual regression testing in `/packages/playground/src/routes/demo/<component-name>.tsx`:\n\n```\nimport { MyComponentDemo } from '@redpanda/registry/demo/my-component';\nimport PageHeader, { ComponentCard, PageGrid } from '@/components/component-preview';\n\nexport const myComponentComponents = [\n  { name: 'my-component', meta: { style: 1 } },\n  // Add variants here if needed\n];\n\nconst myComponentVariants = [<MyComponentDemo key=\"my-component\" />];\n\nexport default function MyComponentPage() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <PageHeader title=\"My Component\">Brief description of the component.</PageHeader>\n      <PageGrid>\n        {myComponentComponents.map((component, index) => (\n          <ComponentCard key={component.name} component={component}>\n            {myComponentVariants[index]}\n          </ComponentCard>\n        ))}\n      </PageGrid>\n    </div>\n  );\n}\n```\n\nThe component array export pattern ensures our visual regression script picks it up at build time.\n\n### 6\\. Validate Component Integration\n\nUse the **registry-component-validator** agent to ensure your component is properly integrated across all packages:\n\n```\n# Ask Claude Code to run the validator\n\"Please run the registry-component-validator agent to check my new component\"\n```\n\nThe validator will:\n\n*   ✅ Verify your component exports work with dynamic loading\n*   ✅ Check MDX files use proper `<ComponentPreview name=\"...\" />` syntax\n*   ✅ Validate cross-package consistency (registry, docs, playground)\n*   ✅ Ensure proper naming conventions and file structure\n*   ✅ Ensure playground routes exist for visual regression testing\n*   ✅ Generate a comprehensive validation report\n\n## Component Guidelines\n\n### Code Style\n\n*   Follow existing component patterns in the registry\n*   Use TypeScript with proper type definitions\n*   Implement proper forwarding of refs and props where applicable\n*   Follow Tailwind CSS conventions for styling\n\n### Documentation\n\n*   Use the same format as existing components (for example copy from `card.mdx`)\n*   Include clear usage examples\n*   Provide multiple demo variations when relevant\n*   Document all props and customization options\n\n### Dependencies\n\n*   Minimize external dependencies\n*   Reuse existing registry components when possible\n\n## Testing Your Component\n\nBefore submitting:\n\n1.  **Verify component renders correctly** in the demo (run `bun run dev` to see your component in the playground and docs site)\n2.  **Test installation via CLI** (you can do this locally by running `bun x --bun @fumadocs/cli add --dir <your-box>/ui-registry/packages/docs/public/r <component-name>`)\n3.  **Ensure documentation renders properly** with `<ComponentPreview />`\n4.  **Run all build commands** to verify automation works:\n    \n    ```\n    bun run format # Formats the code\n    bun run type:check  # Validates TypeScript\n    bun run build  # Tests navigation auto-generation and routing\n    ```\n    \n5.  **Test in both light and dark themes**\n6.  **Run the registry-component-validator agent** to catch integration issues early\n7.  **Request UX Team for review** - request a review from the UX Team to ensure the component is properly integrated into the Redpanda UI\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.466Z",
      "componentName": "contributing",
      "demoCode": "import { MyComponent } from \"@/components/my-component\"\n\n// Export with PascalCase name matching directory + \"Demo\" suffix  \nexport function MyComponentDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <MyComponent>\n        Example usage\n      </MyComponent>\n    </div>\n  )\n}",
      "metadata": {
        "description": "Learn how to add new components to the Redpanda UI Registry.",
        "dependencies": [
          "@/components/my-component",
          "@/components/ui/my-component",
          "@redpanda/registry/demo/my-component",
          "@/components/component-preview"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-copy-button",
      "url": "https://redpanda-ui-registry.netlify.app/docs/copy-button",
      "title": "Copy Button",
      "content": "Copy ButtonA button with a copy to clipboard animation.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UILucideMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Copy Button component:\n\nUsage\n<CopyButton content=\"Hello world!\" />\nProps\nPropTypeDefaultcontent?string-delay?number3000size?'default' | 'sm' | 'md' | 'lg'defaultvariant?'default' | 'muted' | 'outline' | 'secondary' | 'ghost'defaultonCopy?(content: string) => void-\nCredits\n\nWe take our inspiration from Shadcn UI for the button style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Copy Button\n\nA button with a copy to clipboard animation.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/copy-button.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/button)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/buttons/copy)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/copy-button-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Copy Button component:\n\n## Usage\n\n```\n<CopyButton content=\"Hello world!\" />\n```\n\n## Props\n\nProp\n\nType\n\nDefault\n\n`content?`\n\n`string`\n\n\\-\n\n`delay?`\n\n`number`\n\n`3000`\n\n`size?`\n\n`'default' | 'sm' | 'md' | 'lg'`\n\n`default`\n\n`variant?`\n\n`'default' | 'muted' | 'outline' | 'secondary' | 'ghost'`\n\n`default`\n\n`onCopy?`\n\n`(content: string) => void`\n\n\\-\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/button) for the button style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.174Z",
      "componentName": "copy-button",
      "demoCode": "<CopyButton content=\"Hello world!\" />",
      "metadata": {
        "description": "A button with a copy to clipboard animation."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-create-layout",
      "url": "https://redpanda-ui-registry.netlify.app/docs/create-layout",
      "title": "Create Layout (Modern)",
      "content": "Create Layout (Modern)A responsive layout component for create and form interfaces with an optional summary sidebar.Made by malinskibeniaminEdit on GitHubPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nUsage\nimport {\n  CreateLayout,\n  CreateLayoutActions,\n  CreateLayoutContent,\n  CreateLayoutFooter,\n  CreateLayoutHeader,\n  CreateLayoutSummary,\n} from '@/components/redpanda-ui/create-layout';\n<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader\n      title=\"Create Resource\"\n      description=\"Configure your new resource\"\n      actions={\n        <CreateLayoutActions>\n          <Button variant=\"outline\">Cancel</Button>\n          <Button>Create</Button>\n        </CreateLayoutActions>\n      }\n    />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      {/* Your form content */}\n    </div>\n    \n    <CreateLayoutFooter>\n      <div className=\"flex justify-end gap-2\">\n        <Button variant=\"outline\">Cancel</Button>\n        <Button>Create</Button>\n      </div>\n    </CreateLayoutFooter>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary title=\"Summary\">\n    {/* Summary content */}\n  </CreateLayoutSummary>\n</CreateLayout>\nComponents\nCreateLayout\nThe root layout container that provides the responsive two-column structure.\nCreateLayoutHeader\nHeader section with title, description, and actions.\nPropTypeDescriptiontitlestringThe main title textdescriptionstringOptional description textactionsReact.ReactNodeOptional action buttons\nCreateLayoutContent\nMain content area that contains the form or primary interface.\nCreateLayoutSummary\nRight sidebar summary panel that's hidden on screens smaller than 1024px.\nPropTypeDescriptiontitlestringSummary panel title (defaults to \"Summary\")\nCreateLayoutFooter\nOptional footer section for additional actions or information.\nCreateLayoutActions\nContainer for grouping action buttons with consistent spacing.\nResponsive Behavior\nThe layout automatically adapts to different screen sizes:\n\nMobile/Tablet (< 1024px): Single column layout with summary panel hidden\nDesktop (≥ 1024px): Two-column layout with visible summary panel\n\nExamples\nBasic Create Form\n<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader\n      title=\"Create User\"\n      description=\"Add a new user to your organization\"\n    />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      <div className=\"mx-auto max-w-2xl space-y-4\">\n        <div>\n          <Label htmlFor=\"name\">Name</Label>\n          <Input id=\"name\" placeholder=\"Enter name\" />\n        </div>\n        <div>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input id=\"email\" type=\"email\" placeholder=\"Enter email\" />\n        </div>\n      </div>\n    </div>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary>\n    <div className=\"space-y-2\">\n      <div className=\"text-sm font-medium\">User Details</div>\n      <div className=\"text-sm text-muted-foreground\">\n        Review your configuration before creating\n      </div>\n    </div>\n  </CreateLayoutSummary>\n</CreateLayout>\nWith Footer Actions\n<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader title=\"Create Resource\" />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      {/* Form content */}\n    </div>\n    \n    <CreateLayoutFooter>\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\">Save Draft</Button>\n        <CreateLayoutActions>\n          <Button variant=\"outline\">Cancel</Button>\n          <Button>Create</Button>\n        </CreateLayoutActions>\n      </div>\n    </CreateLayoutFooter>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary>\n    {/* Summary content */}\n  </CreateLayoutSummary>\n</CreateLayout>Built by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Create Layout (Modern)\n\nA responsive layout component for create and form interfaces with an optional summary sidebar.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/create-layout.mdx)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/create-layout-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## Usage\n\n```\nimport {\n  CreateLayout,\n  CreateLayoutActions,\n  CreateLayoutContent,\n  CreateLayoutFooter,\n  CreateLayoutHeader,\n  CreateLayoutSummary,\n} from '@/components/redpanda-ui/create-layout';\n```\n\n```\n<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader\n      title=\"Create Resource\"\n      description=\"Configure your new resource\"\n      actions={\n        <CreateLayoutActions>\n          <Button variant=\"outline\">Cancel</Button>\n          <Button>Create</Button>\n        </CreateLayoutActions>\n      }\n    />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      {/* Your form content */}\n    </div>\n    \n    <CreateLayoutFooter>\n      <div className=\"flex justify-end gap-2\">\n        <Button variant=\"outline\">Cancel</Button>\n        <Button>Create</Button>\n      </div>\n    </CreateLayoutFooter>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary title=\"Summary\">\n    {/* Summary content */}\n  </CreateLayoutSummary>\n</CreateLayout>\n```\n\n## Components\n\n### CreateLayout\n\nThe root layout container that provides the responsive two-column structure.\n\n### CreateLayoutHeader\n\nHeader section with title, description, and actions.\n\nProp\n\nType\n\nDescription\n\n`title`\n\n`string`\n\nThe main title text\n\n`description`\n\n`string`\n\nOptional description text\n\n`actions`\n\n`React.ReactNode`\n\nOptional action buttons\n\n### CreateLayoutContent\n\nMain content area that contains the form or primary interface.\n\n### CreateLayoutSummary\n\nRight sidebar summary panel that's hidden on screens smaller than 1024px.\n\nProp\n\nType\n\nDescription\n\n`title`\n\n`string`\n\nSummary panel title (defaults to \"Summary\")\n\n### CreateLayoutFooter\n\nOptional footer section for additional actions or information.\n\n### CreateLayoutActions\n\nContainer for grouping action buttons with consistent spacing.\n\n## Responsive Behavior\n\nThe layout automatically adapts to different screen sizes:\n\n*   **Mobile/Tablet (< 1024px)**: Single column layout with summary panel hidden\n*   **Desktop (≥ 1024px)**: Two-column layout with visible summary panel\n\n## Examples\n\n### Basic Create Form\n\n```\n<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader\n      title=\"Create User\"\n      description=\"Add a new user to your organization\"\n    />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      <div className=\"mx-auto max-w-2xl space-y-4\">\n        <div>\n          <Label htmlFor=\"name\">Name</Label>\n          <Input id=\"name\" placeholder=\"Enter name\" />\n        </div>\n        <div>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input id=\"email\" type=\"email\" placeholder=\"Enter email\" />\n        </div>\n      </div>\n    </div>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary>\n    <div className=\"space-y-2\">\n      <div className=\"text-sm font-medium\">User Details</div>\n      <div className=\"text-sm text-muted-foreground\">\n        Review your configuration before creating\n      </div>\n    </div>\n  </CreateLayoutSummary>\n</CreateLayout>\n```\n\n### With Footer Actions\n\n```\n<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader title=\"Create Resource\" />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      {/* Form content */}\n    </div>\n    \n    <CreateLayoutFooter>\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\">Save Draft</Button>\n        <CreateLayoutActions>\n          <Button variant=\"outline\">Cancel</Button>\n          <Button>Create</Button>\n        </CreateLayoutActions>\n      </div>\n    </CreateLayoutFooter>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary>\n    {/* Summary content */}\n  </CreateLayoutSummary>\n</CreateLayout>\n```\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.384Z",
      "componentName": "create-layout",
      "demoCode": "<CreateLayout>\n  <CreateLayoutContent>\n    <CreateLayoutHeader\n      title=\"Create Resource\"\n      description=\"Configure your new resource\"\n      actions={\n        <CreateLayoutActions>\n          <Button variant=\"outline\">Cancel</Button>\n          <Button>Create</Button>\n        </CreateLayoutActions>\n      }\n    />\n    \n    <div className=\"flex-1 overflow-auto p-6\">\n      {/* Your form content */}\n    </div>\n    \n    <CreateLayoutFooter>\n      <div className=\"flex justify-end gap-2\">\n        <Button variant=\"outline\">Cancel</Button>\n        <Button>Create</Button>\n      </div>\n    </CreateLayoutFooter>\n  </CreateLayoutContent>\n  \n  <CreateLayoutSummary title=\"Summary\">\n    {/* Summary content */}\n  </CreateLayoutSummary>\n</CreateLayout>",
      "metadata": {
        "description": "A responsive layout component for create and form interfaces with an optional summary sidebar."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-credenza",
      "url": "https://redpanda-ui-registry.netlify.app/docs/credenza",
      "title": "Credenza",
      "content": "CredenzaReady-made responsive modal component for shadcn/ui.Made by redpangilinanEdit on GitHubPowered byCredenza\nThis is a component that combines a dialog and a drawer, and uses a media query hook to determine what should be shown on the screen depending on the viewport size, creating a responsive dialog/modal.\nPreviewCodeOpen in v0Loading component...\nWhen to use\nUse this decision tree to determine when to use the Credenza component:\n\nInstallation\nCLI\nUsage\nWrap your app with the vaul-drawer-wrapper for background scaling\n<div vaul-drawer-wrapper=\"\" className=\"bg-background\"> {children} </div>\nimport {\n  Credenza,\n  CredenzaBody,\n  CredenzaClose,\n  CredenzaContent,\n  CredenzaDescription,\n  CredenzaFooter,\n  CredenzaHeader,\n  CredenzaTitle,\n  CredenzaTrigger,\n} from \"@/components/ui/credenza\"\n<Credenza>\n  <CredenzaTrigger asChild>\n    <Button>Open modal</Button>\n  </CredenzaTrigger>\n  <CredenzaContent>\n    <CredenzaHeader>\n      <CredenzaTitle>Credenza</CredenzaTitle>\n      <CredenzaDescription>\n        A responsive modal component for shadcn/ui.\n      </CredenzaDescription>\n    </CredenzaHeader>\n    <CredenzaBody>\n      This component is built using shadcn/ui&apos;s dialog and drawer\n      component, which is built on top of Vaul.\n    </CredenzaBody>\n    <CredenzaFooter>\n      <CredenzaClose asChild>\n        <Button>Close</Button>\n      </CredenzaClose>\n    </CredenzaFooter>\n  </CredenzaContent>\n</Credenza>\nExamples\nPreviewCodeOpen in v0Loading component...\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use Credenza by redpangilinan for the credenza component.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Credenza\n\nReady-made responsive modal component for shadcn/ui.\n\nMade by [redpangilinan](https://github.com/redpangilinan)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/credenza.mdx)\n\nPowered by\n\n[![Credenza](https://img.logo.dev/credenza.rdev.pro?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Credenza](https://credenza.rdev.pro/)\n\nThis is a component that combines a dialog and a drawer, and uses a media query hook to determine what should be shown on the screen depending on the viewport size, creating a responsive dialog/modal.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/credenza-demo.json)\n\nLoading component...\n\n## When to use\n\nUse this decision tree to determine when to use the Credenza component:\n\n## Installation\n\nCLI\n\n## Usage\n\nWrap your app with the `vaul-drawer-wrapper` for background scaling\n\n```\n<div vaul-drawer-wrapper=\"\" className=\"bg-background\"> {children} </div>\n```\n\n```\nimport {\n  Credenza,\n  CredenzaBody,\n  CredenzaClose,\n  CredenzaContent,\n  CredenzaDescription,\n  CredenzaFooter,\n  CredenzaHeader,\n  CredenzaTitle,\n  CredenzaTrigger,\n} from \"@/components/ui/credenza\"\n```\n\n```\n<Credenza>\n  <CredenzaTrigger asChild>\n    <Button>Open modal</Button>\n  </CredenzaTrigger>\n  <CredenzaContent>\n    <CredenzaHeader>\n      <CredenzaTitle>Credenza</CredenzaTitle>\n      <CredenzaDescription>\n        A responsive modal component for shadcn/ui.\n      </CredenzaDescription>\n    </CredenzaHeader>\n    <CredenzaBody>\n      This component is built using shadcn/ui&apos;s dialog and drawer\n      component, which is built on top of Vaul.\n    </CredenzaBody>\n    <CredenzaFooter>\n      <CredenzaClose asChild>\n        <Button>Close</Button>\n      </CredenzaClose>\n    </CredenzaFooter>\n  </CredenzaContent>\n</Credenza>\n```\n\n## Examples\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/credenza-demo.json)\n\nLoading component...\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/credenza-state-trigger-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [Credenza](https://credenza.rdev.pro/) by [redpangilinan](https://github.com/redpangilinan) for the credenza component.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.081Z",
      "componentName": "credenza",
      "demoCode": "<div vaul-drawer-wrapper=\"\" className=\"bg-background\"> {children} </div>",
      "metadata": {
        "description": "Ready-made responsive modal component for shadcn/ui."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-data-table",
      "url": "https://redpanda-ui-registry.netlify.app/docs/data-table",
      "title": "Data Table",
      "content": "Data TablePowerful table and datagrids built using TanStack Table.Made by shadcnEdit on GitHubPowered byShadcn UILucideTanStack Table\nPreviewCodeOpen in v0Loading component...\nPreviewCodeOpen in v0Loading component...\nThis doc is taken from shadcn.\nPreviewCodeOpen in v0Loading component...\nWhen to use\nUse this decision tree to determine when to use the Data Table pattern:\n\nIntroduction\nEvery data table or datagrid I've created has been unique. They all behave differently, have specific sorting and filtering requirements, and work with different data sources.\nIt doesn't make sense to combine all of these variations into a single component. If we do that, we'll lose the flexibility that headless UI provides.\nSo instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your own.\nWe'll start with the basic <Table /> component and build a complex data table from scratch.\nTip: If you find yourself using the same table in multiple places in your app, you can always extract it into a reusable component.\nTable of Contents\nThis guide will show you how to use TanStack Table and the <Table /> component to build your own custom data table. We'll cover the following topics:\n\nBasic Table\nRow Actions\nPagination\nSorting\nFiltering\nVisibility\nRow Selection\n\nInstallation\n\nAdd the <Table /> component to your project:\n\nnpx shadcn@latest add table\n\nAdd tanstack/react-table dependency:\n\nnpm install @tanstack/react-table\nPrerequisites\nWe are going to build a table to show recent payments. Here's what our data looks like:\ntype Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n]\nProject Structure\nStart by creating the following file structure:\napp\n└── payments\n    ├── columns.tsx\n    ├── data-table.tsx\n    └── page.tsx\nI'm using a Next.js example here but this works for any other React framework.\n\ncolumns.tsx (client component) will contain our column definitions.\ndata-table.tsx (client component) will contain our <DataTable /> component.\npage.tsx (server component) is where we'll fetch data and render our table.\n\nBasic Table\nLet's start by building a basic table.\nColumn DefinitionsFirst, we'll define our columns.app/payments/columns.tsx\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n]Note: Columns are where you define the core of what your table\nwill look like. They define the data that will be displayed, how it will be\nformatted, sorted and filtered.<DataTable /> componentNext, we'll create a <DataTable /> component to render our table.app/payments/data-table.tsx\"use client\"\n\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}Tip: If you find yourself using <DataTable /> in multiple places, this is the component you could make reusable by extracting it to components/ui/data-table.tsx.<DataTable columns={columns} data={data} />Render the tableFinally, we'll render our table in our page component.app/payments/page.tsximport { columns, Payment } from \"./columns\"\nimport { DataTable } from \"./data-table\"\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n\nexport default async function DemoPage() {\n  const data = await getData()\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}\nCell Formatting\nLet's format the amount cell to display the dollar amount. We'll also align the cell to the right.\nUpdate columns definitionUpdate the header and cell definitions for amount as follows:app/payments/columns.tsxexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"))\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount)\n\n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n]You can use the same approach to format other cells and headers.\nRow Actions\nLet's add row actions to our table. We'll use a <Dropdown /> component for this.\nUpdate columns definitionUpdate our columns definition to add a new actions column. The actions cell returns a <Dropdown /> component.app/payments/columns.tsx\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { MoreHorizontal } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]You can access the row data using row.original in the cell function. Use this to handle actions for your row eg. use the id to make a DELETE call to your API.\nPagination\nNext, we'll add pagination to our table.\nUpdate <DataTable>app/payments/data-table.tsximport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  // ...\n}This will automatically paginate your rows into pages of 10. See the pagination docs for more information on customizing page size and implementing manual pagination.Add pagination controlsWe can add pagination controls to our table using the <Button /> component and the table.previousPage(), table.nextPage() API methods.app/payments/data-table.tsximport { Button } from \"@/components/ui/button\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}\nSorting\nLet's make the email column sortable.\nUpdate <DataTable>app/payments/data-table.tsx\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}Make header cell sortableWe can now update the email header cell to add sorting controls.app/payments/columns.tsx\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown } from \"lucide-react\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n]This will automatically sort the table (asc and desc) when the user toggles on the header cell.\nFiltering\nLet's add a search input to filter emails in our table.\nUpdate <DataTable>app/payments/data-table.tsx\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}Filtering is now enabled for the email column. You can add filters to other columns as well. See the filtering docs for more information on customizing filters.\nVisibility\nAdding column visibility is fairly simple using @tanstack/react-table visibility API.\nUpdate <DataTable>app/payments/data-table.tsx\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={table.getColumn(\"email\")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}This adds a dropdown menu that you can use to toggle column visibility.\nRow Selection\nNext, we're going to add row selection to our table.\nUpdate column definitionsapp/payments/columns.tsx\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]Update <DataTable>app/payments/data-table.tsxexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table />\n      </div>\n    </div>\n  )\n}This adds a checkbox to each row and a checkbox in the header to select all rows.Show selected rowsYou can show the number of selected rows using the table.getFilteredSelectedRowModel() API.<div className=\"text-muted-foreground flex-1 text-sm\">\n  {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n  {table.getFilteredRowModel().rows.length} row(s) selected.\n</div>\nCredits\n\nWe use @tanstack/react-table for the data table behavior.\nWe take our inspiration from Shadcn UI for the data table style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Data Table\n\nPowerful table and datagrids built using TanStack Table.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/data-table.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/data-table)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)[![TanStack Table](https://img.logo.dev/tanstack.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)TanStack Table](https://tanstack.com/table/latest)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/data-table-demo.json)\n\nLoading component...\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/data-table-cluster-demo.json)\n\nLoading component...\n\nThis doc is taken from [shadcn](https://ui.shadcn.com/docs/components/data-table).\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/data-table-improved-demo.json)\n\nLoading component...\n\n## When to use\n\nUse this decision tree to determine when to use the Data Table pattern:\n\n## Introduction\n\nEvery data table or datagrid I've created has been unique. They all behave differently, have specific sorting and filtering requirements, and work with different data sources.\n\nIt doesn't make sense to combine all of these variations into a single component. If we do that, we'll lose the flexibility that [headless UI](https://tanstack.com/table/v8/docs/introduction#what-is-headless-ui) provides.\n\nSo instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your own.\n\nWe'll start with the basic `<Table />` component and build a complex data table from scratch.\n\n**Tip:** If you find yourself using the same table in multiple places in your app, you can always extract it into a reusable component.\n\n## Table of Contents\n\nThis guide will show you how to use [TanStack Table](https://tanstack.com/table) and the `<Table />` component to build your own custom data table. We'll cover the following topics:\n\n*   [Basic Table](#basic-table)\n*   [Row Actions](#row-actions)\n*   [Pagination](#pagination)\n*   [Sorting](#sorting)\n*   [Filtering](#filtering)\n*   [Visibility](#visibility)\n*   [Row Selection](#row-selection)\n\n## Installation\n\n1.  Add the `<Table />` component to your project:\n\n```\nnpx shadcn@latest add table\n```\n\n2.  Add `tanstack/react-table` dependency:\n\n```\nnpm install @tanstack/react-table\n```\n\n## Prerequisites\n\nWe are going to build a table to show recent payments. Here's what our data looks like:\n\n```\ntype Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n]\n```\n\n## Project Structure\n\nStart by creating the following file structure:\n\n```\napp\n└── payments\n    ├── columns.tsx\n    ├── data-table.tsx\n    └── page.tsx\n```\n\nI'm using a Next.js example here but this works for any other React framework.\n\n*   `columns.tsx` (client component) will contain our column definitions.\n*   `data-table.tsx` (client component) will contain our `<DataTable />` component.\n*   `page.tsx` (server component) is where we'll fetch data and render our table.\n\n## Basic Table\n\nLet's start by building a basic table.\n\n### Column Definitions\n\nFirst, we'll define our columns.\n\napp/payments/columns.tsx\n\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n]\n```\n\n**Note:** Columns are where you define the core of what your table will look like. They define the data that will be displayed, how it will be formatted, sorted and filtered.\n\n### `<DataTable />` component\n\nNext, we'll create a `<DataTable />` component to render our table.\n\napp/payments/data-table.tsx\n\n```\n\"use client\"\n\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\n```\n\n**Tip**: If you find yourself using `<DataTable />` in multiple places, this is the component you could make reusable by extracting it to `components/ui/data-table.tsx`.\n\n`<DataTable columns={columns} data={data} />`\n\n### Render the table\n\nFinally, we'll render our table in our page component.\n\napp/payments/page.tsx\n\n```\nimport { columns, Payment } from \"./columns\"\nimport { DataTable } from \"./data-table\"\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n\nexport default async function DemoPage() {\n  const data = await getData()\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}\n```\n\n## Cell Formatting\n\nLet's format the amount cell to display the dollar amount. We'll also align the cell to the right.\n\n### Update columns definition\n\nUpdate the `header` and `cell` definitions for amount as follows:\n\napp/payments/columns.tsx\n\n```\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"))\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount)\n\n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n]\n```\n\nYou can use the same approach to format other cells and headers.\n\n## Row Actions\n\nLet's add row actions to our table. We'll use a `<Dropdown />` component for this.\n\n### Update columns definition\n\nUpdate our columns definition to add a new `actions` column. The `actions` cell returns a `<Dropdown />` component.\n\napp/payments/columns.tsx\n\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { MoreHorizontal } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]\n```\n\nYou can access the row data using `row.original` in the `cell` function. Use this to handle actions for your row eg. use the `id` to make a DELETE call to your API.\n\n## Pagination\n\nNext, we'll add pagination to our table.\n\n### Update `<DataTable>`\n\napp/payments/data-table.tsx\n\n```\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  // ...\n}\n```\n\nThis will automatically paginate your rows into pages of 10. See the [pagination docs](https://tanstack.com/table/v8/docs/api/features/pagination) for more information on customizing page size and implementing manual pagination.\n\n### Add pagination controls\n\nWe can add pagination controls to our table using the `<Button />` component and the `table.previousPage()`, `table.nextPage()` API methods.\n\napp/payments/data-table.tsx\n\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}\n```\n\n## Sorting\n\nLet's make the email column sortable.\n\n### Update `<DataTable>`\n\napp/payments/data-table.tsx\n\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\n### Make header cell sortable\n\nWe can now update the `email` header cell to add sorting controls.\n\napp/payments/columns.tsx\n\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown } from \"lucide-react\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n]\n```\n\nThis will automatically sort the table (asc and desc) when the user toggles on the header cell.\n\n## Filtering\n\nLet's add a search input to filter emails in our table.\n\n### Update `<DataTable>`\n\napp/payments/data-table.tsx\n\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\nFiltering is now enabled for the `email` column. You can add filters to other columns as well. See the [filtering docs](https://tanstack.com/table/v8/docs/guide/filters) for more information on customizing filters.\n\n## Visibility\n\nAdding column visibility is fairly simple using `@tanstack/react-table` visibility API.\n\n### Update `<DataTable>`\n\napp/payments/data-table.tsx\n\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={table.getColumn(\"email\")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\nThis adds a dropdown menu that you can use to toggle column visibility.\n\n## Row Selection\n\nNext, we're going to add row selection to our table.\n\n### Update column definitions\n\napp/payments/columns.tsx\n\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]\n```\n\n### Update `<DataTable>`\n\napp/payments/data-table.tsx\n\n```\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table />\n      </div>\n    </div>\n  )\n}\n```\n\nThis adds a checkbox to each row and a checkbox in the header to select all rows.\n\n### Show selected rows\n\nYou can show the number of selected rows using the `table.getFilteredSelectedRowModel()` API.\n\n```\n<div className=\"text-muted-foreground flex-1 text-sm\">\n  {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n  {table.getFilteredRowModel().rows.length} row(s) selected.\n</div>\n```\n\n## Credits\n\n*   We use [@tanstack/react-table](https://tanstack.com/table/v8/docs/introduction) for the data table behavior.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/data-table) for the data table style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.919Z",
      "componentName": "data-table",
      "demoCode": "\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n]",
      "metadata": {
        "description": "Powerful table and datagrids built using TanStack Table.",
        "dependencies": [
          "@tanstack/react-table",
          "lucide-react",
          "@/components/ui/button",
          "react",
          "@/components/ui/input",
          "@/components/ui/badge",
          "@/components/ui/checkbox"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-date-picker",
      "url": "https://redpanda-ui-registry.netlify.app/docs/date-picker",
      "title": "Date Picker",
      "content": "Date PickerA date picker component with range and presets.Made by shadcnEdit on GitHubPowered byShadcn UILucideReact Day Pickerdate-fnslittle-datechrono\nPreviewCodeOpen in v0Loading component...\nWhen to use\nUse this decision tree to determine when to use the Date Picker component:\n\nInstallation\nThe Date Picker is built using a composition of the <Popover /> and the <Calendar /> components.\nSee installation instructions for the Popover and the Calendar components.\nUsage\n\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from '@/registry/lib/utils';\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\nSee the React DayPicker documentation for more information.\nExamples\nDate Picker\nPreviewCodeOpen in v0Loading component...\nDate Picker Drawer\nPreviewCodeOpen in v0Loading component...\nDate Picker With Form\nPreviewCodeOpen in v0Loading component...\nDate Picker Natural Language\nPreviewCodeOpen in v0Loading component...\nDate Picker With Presets\nPreviewCodeOpen in v0Loading component...\nDate Picker With Range\nPreviewCodeOpen in v0Loading component...\nDate Picker With Time Range\nPreviewCodeOpen in v0Loading component...\nDate Picker With Time\nPreviewCodeOpen in v0Loading component...\nDate Range Picker With Time\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use react-day-picker for the date picker.\nWe use chrono for the natural language functionality of the date picker.\nWe use little-date for the date range functionality of the date picker.\nWe take our inspiration from Shadcn UI for the date picker style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Date Picker\n\nA date picker component with range and presets.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/date-picker.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/date-picker)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)[![React Day Picker](https://img.logo.dev/daypicker.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)React Day Picker](https://daypicker.dev/)[![date-fns](https://img.logo.dev/date-fns.org?token=pk_Q3Q-iPRxREyBYQYEiIraeA)date-fns](https://date-fns.org/)[![little-date](https://img.logo.dev/github.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)little-date](https://github.com/vercel/little-date)[![chrono](https://img.logo.dev/github.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)chrono](https://github.com/wanasit/chrono)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-demo.json)\n\nLoading component...\n\n## When to use\n\nUse this decision tree to determine when to use the Date Picker component:\n\n## Installation\n\nThe Date Picker is built using a composition of the `<Popover />` and the `<Calendar />` components.\n\nSee installation instructions for the [Popover](/docs/popover#installation) and the [Calendar](/docs/calendar#installation) components.\n\n## Usage\n\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from '@/registry/lib/utils';\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\nSee the [React DayPicker](https://daypicker.dev/) documentation for more information.\n\n## Examples\n\n### Date Picker\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-demo.json)\n\nLoading component...\n\n### Date Picker Drawer\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-drawer-demo.json)\n\nLoading component...\n\n### Date Picker With Form\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-form-demo.json)\n\nLoading component...\n\n### Date Picker Natural Language\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-natural-language-demo.json)\n\nLoading component...\n\n### Date Picker With Presets\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-with-presets-demo.json)\n\nLoading component...\n\n### Date Picker With Range\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-with-range-demo.json)\n\nLoading component...\n\n### Date Picker With Time Range\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-with-time-range-demo.json)\n\nLoading component...\n\n### Date Picker With Time\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-picker-with-time-demo.json)\n\nLoading component...\n\n### Date Range Picker With Time\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/date-range-picker-with-time-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [react-day-picker](https://daypicker.dev/) for the date picker.\n*   We use [chrono](https://github.com/wanasit/chrono) for the natural language functionality of the date picker.\n*   We use [little-date](https://github.com/vercel/little-date) for the date range functionality of the date picker.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/date-picker) for the date picker style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.549Z",
      "componentName": "date-picker",
      "demoCode": "\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from '@/registry/lib/utils';\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}",
      "metadata": {
        "description": "A date picker component with range and presets.",
        "dependencies": [
          "react",
          "date-fns",
          "lucide-react",
          "@/registry/lib/utils",
          "@/components/ui/button",
          "@/components/ui/calendar"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-dependencies",
      "url": "https://redpanda-ui-registry.netlify.app/docs/dependencies",
      "title": "Dependencies",
      "content": "DependenciesRequired dependencies and version compatibility for Redpanda UI componentsEdit on GitHubThis page lists the required dependencies and version compatibility information for Redpanda UI components to help troubleshoot common issues.\nCore Dependencies\nReact\n\nRequired Version: ^18.3.1\nReact DOM: ^18.3.1\nCompatibility: Components are built for React 18.3.1, with backwards compatibility (without using any refs from React 19 or newer hooks)\n\nTypeScript\n\nRequired Version: ^5.9.2\nConfiguration: Strict mode enabled\nNote: Type checking available via bun run type:check\n\nTailwind CSS\n\nRequired Version: ^4.1.11\nPostCSS: ^8.5.6\nConfiguration: Uses CSS variables for theming\nImportant: Tailwind v4+ syntax required\n\nAnimation & Motion\nMotion (Framer Motion)\n\nVersion: ^12.23.12\nUsage: Powers component animations and transitions\nAlternatives: Compatible with other animation libraries\n\nAdditional Tailwind utils\n\ntw-animate-css: ^1.3.6 - Tailwind animation utilities\n\nUI Framework Dependencies\nRadix UI\n\nradix-ui: ^1.4.2\nPurpose: Headless UI primitives for accessibility\n\nShadcn/UI\n\nshadcn: 2.10.0\nclass-variance-authority: ^0.7.1\nclsx: ^2.1.1\ntailwind-merge: ^3.3.1\n\nNext.js & Routing\n\nNext.js: 15.4.5\nnext-themes: ^0.4.6 - Theme switching support\n\nForm Libraries\n\nreact-hook-form: ^7.62.0\n@hookform/resolvers: ^5.1.1\nzod: ^3.24.1 - Schema validation\n\nTable & Data\n\n@tanstack/react-table: ^8.21.3\nrecharts: ^2.15.4 - Chart components\n\nIcons & Assets\n\nlucide-react: ^0.536.0\n\nCommon Issues & Troubleshooting\nChakra UI Compatibility\n⚠️ Known Issue: Chakra UI's light/dark mode system does not work well with Redpanda UI's Shadcn-based theming.\nProblem:\n\nChakra UI uses its own ColorModeProvider and theme context\nConflicts with next-themes and CSS variable-based theming\nStyling inconsistencies between light/dark modes\n\nSolutions:\n\nRecommended: Use only Redpanda UI components for consistent theming\nIf mixing required: Wrap Chakra components in separate theme contexts\nAlternative: Use Radix UI primitives directly instead of Chakra UI\n\nVersion Compatibility\nReact 19 Migration (+ codemods for forwardRef -> ref as a component prop)\nIf upgrading from React 18:\nbun install react@^19.1.0 react-dom@^19.1.0\nTailwind CSS v4\nWhen upgrading from Tailwind v3:\n\nUpdate configuration syntax\nCheck for breaking changes in utility classes\nVerify CSS variable usage\n\nMotion Library\nFor animation issues:\n\nEnsure motion version ^12.23.12\nCheck for conflicting animation libraries\nVerify React 19 compatibility\n\nPackage Manager\nImportant: This project uses Bun as the package manager.\n# Install dependencies\nbun install\n\n# Development\nbun run dev\n\n# Build\nbun run build\n\n# Type checking\nbun run type:check\nCommon Error Fixes\nTypeScript Errors\nbun run type:check\nStyling Issues\n\nClear Tailwind cache\nRestart development server\nCheck CSS variable definitions in globals.css and theme.css\n\nTheme Switching Problems\n\nVerify next-themes configuration (or use local storage for non-server-side rendered apps)\nCheck ThemeProvider setup\nEnsure CSS variables are properly defined\n\nPeer Dependencies\nSome components may require additional peer dependencies:\n\ndate-fns: ^4.1.0 - Date utilities\nreact-day-picker: ^9.8.1 - Calendar components\nsonner: ^2.0.7 - Toast notifications\nvaul: ^1.1.2 - Drawer components\n\nDevelopment Dependencies\nFor contributors and advanced usage:\n\n@biomejs/biome: 2.1.2 - Linting and formatting\nfumadocs-core: ^15.6.3 - Documentation system\nshiki: ^3.9.2 - Code syntax highlighting\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Dependencies\n\nRequired dependencies and version compatibility for Redpanda UI components\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/dependencies.mdx)\n\nThis page lists the required dependencies and version compatibility information for Redpanda UI components to help troubleshoot common issues.\n\n## Core Dependencies\n\n### React\n\n*   **Required Version**: `^18.3.1`\n*   **React DOM**: `^18.3.1`\n*   **Compatibility**: Components are built for React 18.3.1, with backwards compatibility (without using any refs from React 19 or newer hooks)\n\n### TypeScript\n\n*   **Required Version**: `^5.9.2`\n*   **Configuration**: Strict mode enabled\n*   **Note**: Type checking available via `bun run type:check`\n\n### Tailwind CSS\n\n*   **Required Version**: `^4.1.11`\n*   **PostCSS**: `^8.5.6`\n*   **Configuration**: Uses CSS variables for theming\n*   **Important**: Tailwind v4+ syntax required\n\n## Animation & Motion\n\n### Motion (Framer Motion)\n\n*   **Version**: `^12.23.12`\n*   **Usage**: Powers component animations and transitions\n*   **Alternatives**: Compatible with other animation libraries\n\n### Additional Tailwind utils\n\n*   **tw-animate-css**: `^1.3.6` - Tailwind animation utilities\n\n## UI Framework Dependencies\n\n### Radix UI\n\n*   **radix-ui**: `^1.4.2`\n*   **Purpose**: Headless UI primitives for accessibility\n\n### Shadcn/UI\n\n*   **shadcn**: `2.10.0`\n*   **class-variance-authority**: `^0.7.1`\n*   **clsx**: `^2.1.1`\n*   **tailwind-merge**: `^3.3.1`\n\n## Next.js & Routing\n\n*   **Next.js**: `15.4.5`\n*   **next-themes**: `^0.4.6` - Theme switching support\n\n## Form Libraries\n\n*   **react-hook-form**: `^7.62.0`\n*   **@hookform/resolvers**: `^5.1.1`\n*   **zod**: `^3.24.1` - Schema validation\n\n## Table & Data\n\n*   **@tanstack/react-table**: `^8.21.3`\n*   **recharts**: `^2.15.4` - Chart components\n\n## Icons & Assets\n\n*   **lucide-react**: `^0.536.0`\n\n## Common Issues & Troubleshooting\n\n### Chakra UI Compatibility\n\n**⚠️ Known Issue**: Chakra UI's light/dark mode system does not work well with Redpanda UI's Shadcn-based theming.\n\n**Problem**:\n\n*   Chakra UI uses its own `ColorModeProvider` and theme context\n*   Conflicts with `next-themes` and CSS variable-based theming\n*   Styling inconsistencies between light/dark modes\n\n**Solutions**:\n\n1.  **Recommended**: Use only Redpanda UI components for consistent theming\n2.  **If mixing required**: Wrap Chakra components in separate theme contexts\n3.  **Alternative**: Use Radix UI primitives directly instead of Chakra UI\n\n### Version Compatibility\n\n#### React 19 Migration (+ codemods for forwardRef -> ref as a component prop)\n\nIf upgrading from React 18:\n\n```\nbun install react@^19.1.0 react-dom@^19.1.0\n```\n\n#### Tailwind CSS v4\n\nWhen upgrading from Tailwind v3:\n\n*   Update configuration syntax\n*   Check for breaking changes in utility classes\n*   Verify CSS variable usage\n\n#### Motion Library\n\nFor animation issues:\n\n*   Ensure `motion` version `^12.23.12`\n*   Check for conflicting animation libraries\n*   Verify React 19 compatibility\n\n### Package Manager\n\n**Important**: This project uses Bun as the package manager.\n\n```\n# Install dependencies\nbun install\n\n# Development\nbun run dev\n\n# Build\nbun run build\n\n# Type checking\nbun run type:check\n```\n\n### Common Error Fixes\n\n#### TypeScript Errors\n\n```\nbun run type:check\n```\n\n#### Styling Issues\n\n1.  Clear Tailwind cache\n2.  Restart development server\n3.  Check CSS variable definitions in `globals.css` and `theme.css`\n\n#### Theme Switching Problems\n\n*   Verify `next-themes` configuration (or use local storage for non-server-side rendered apps)\n*   Check `ThemeProvider` setup\n*   Ensure CSS variables are properly defined\n\n## Peer Dependencies\n\nSome components may require additional peer dependencies:\n\n*   **date-fns**: `^4.1.0` - Date utilities\n*   **react-day-picker**: `^9.8.1` - Calendar components\n*   **sonner**: `^2.0.7` - Toast notifications\n*   **vaul**: `^1.1.2` - Drawer components\n\n## Development Dependencies\n\nFor contributors and advanced usage:\n\n*   **@biomejs/biome**: `2.1.2` - Linting and formatting\n*   **fumadocs-core**: `^15.6.3` - Documentation system\n*   **shiki**: `^3.9.2` - Code syntax highlighting\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.228Z",
      "componentName": "dependencies",
      "metadata": {
        "description": "Required dependencies and version compatibility for Redpanda UI components"
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-dialog",
      "url": "https://redpanda-ui-registry.netlify.app/docs/dialog",
      "title": "Dialog",
      "content": "DialogA window overlaid on either the primary window or another dialog window, rendering the content underneath inert.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UILucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Dialog component:\n\nUsage\n<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Title</DialogTitle>\n      <DialogDescription>Description</DialogDescription>\n    </DialogHeader>\n    <p>Dialog Content</p>\n    <DialogFooter>\n      <button>Close</button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\nProps\nDocsAPI Reference\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nDelete\nPreviewCodeOpen in v0Loading component...\nAnimate UI Props\nDialogContent\nPropTypeDefaultfrom?'top' | 'bottom' | 'left' | 'right'toptransition?Transition{ type: 'spring', stiffness: 150, damping: 25 }\nCredits\n\nWe use Radix UI for the dialog component.\nWe take our inspiration from Shadcn UI for the dialog style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Dialog\n\nA window overlaid on either the primary window or another dialog window, rendering the content underneath inert.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/dialog.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/dialog)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/dialog)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dialog-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Dialog component:\n\n## Usage\n\n```\n<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Title</DialogTitle>\n      <DialogDescription>Description</DialogDescription>\n    </DialogHeader>\n    <p>Dialog Content</p>\n    <DialogFooter>\n      <button>Close</button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n```\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/dialog)[API Reference](https://www.radix-ui.com/primitives/docs/components/dialog#api-reference)\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dialog-demo.json)\n\nLoading component...\n\n### Delete\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dialog-delete-demo.json)\n\nLoading component...\n\n### Animate UI Props\n\n#### DialogContent\n\nProp\n\nType\n\nDefault\n\n`from?`\n\n`'top' | 'bottom' | 'left' | 'right'`\n\n`top`\n\n`transition?`\n\n`Transition`\n\n`{ type: 'spring', stiffness: 150, damping: 25 }`\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/dialog) for the dialog component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/dialog) for the dialog style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.639Z",
      "componentName": "dialog",
      "demoCode": "<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Title</DialogTitle>\n      <DialogDescription>Description</DialogDescription>\n    </DialogHeader>\n    <p>Dialog Content</p>\n    <DialogFooter>\n      <button>Close</button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>",
      "metadata": {
        "description": "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-drawer",
      "url": "https://redpanda-ui-registry.netlify.app/docs/drawer",
      "title": "Drawer",
      "content": "DrawerA drawer component.Made by emilkowalski_Edit on GitHubPowered byShadcn UIVaul\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Drawer component:\n\nUsage\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\"\n<Drawer>\n  <DrawerTrigger>Open</DrawerTrigger>\n  <DrawerContent>\n    <DrawerHeader>\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\n    </DrawerHeader>\n    <DrawerFooter>\n      <Button>Submit</Button>\n      <DrawerClose>\n        <Button variant=\"outline\">Cancel</Button>\n      </DrawerClose>\n    </DrawerFooter>\n  </DrawerContent>\n</Drawer>\nExamples\nResponsive Dialog\nYou can combine the Dialog and Drawer components to create a responsive dialog. This renders a Dialog component on desktop and a Drawer on mobile.\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use Vaul for the drawer component.\nWe take our inspiration from Shadcn UI for the drawer style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Drawer\n\nA drawer component.\n\nMade by [emilkowalski\\_](https://x.com/emilkowalski_)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/drawer.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/drawer)[![Vaul](https://img.logo.dev/vaul.emilkowal.ski?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Vaul](https://vaul.emilkowal.ski/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/drawer-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Drawer component:\n\n## Usage\n\n```\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\"\n```\n\n```\n<Drawer>\n  <DrawerTrigger>Open</DrawerTrigger>\n  <DrawerContent>\n    <DrawerHeader>\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\n    </DrawerHeader>\n    <DrawerFooter>\n      <Button>Submit</Button>\n      <DrawerClose>\n        <Button variant=\"outline\">Cancel</Button>\n      </DrawerClose>\n    </DrawerFooter>\n  </DrawerContent>\n</Drawer>\n```\n\n## Examples\n\n### Responsive Dialog\n\nYou can combine the `Dialog` and `Drawer` components to create a responsive dialog. This renders a `Dialog` component on desktop and a `Drawer` on mobile.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/drawer-dialog-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [Vaul](https://vaul.emilkowal.ski/getting-started) for the drawer component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/drawer) for the drawer style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.146Z",
      "componentName": "drawer",
      "demoCode": "<Drawer>\n  <DrawerTrigger>Open</DrawerTrigger>\n  <DrawerContent>\n    <DrawerHeader>\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\n    </DrawerHeader>\n    <DrawerFooter>\n      <Button>Submit</Button>\n      <DrawerClose>\n        <Button variant=\"outline\">Cancel</Button>\n      </DrawerClose>\n    </DrawerFooter>\n  </DrawerContent>\n</Drawer>",
      "metadata": {
        "description": "A drawer component."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-dropdown-menu",
      "url": "https://redpanda-ui-registry.netlify.app/docs/dropdown-menu",
      "title": "Dropdown Menu",
      "content": "Dropdown MenuDisplays a menu to the user — such as a set of actions or functions — triggered by a button.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UILucideMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Dropdown Menu component:\n\nUsage\n<DropdownMenu>\n  <DropdownMenuTrigger>Open Dropdown Menu</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuItem>Item 1</DropdownMenuItem>\n    <DropdownMenuItem>Item 2</DropdownMenuItem>\n    <DropdownMenuItem>Item 3</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\nExamples\nCheckboxes\nPreviewCodeOpen in v0Loading component...\nRadio Group\nPreviewCodeOpen in v0Loading component...\nProps\nDocsAPI Reference\nAnimate UI Props\nDropdownMenu\nPropTypeDefaultanimateOnHover?booleantruetransition?Transition{ type: \"spring\", stiffness: 350, damping: 35 }\nDropdownMenuSubTrigger\nPropTypeDefaultinset?booleanfalse\nDropdownMenuContent\nPropTypeDefaulttransition?Transition{ duration: 0.2 }\nDropdownMenuItem\nPropTypeDefaultinset?booleanfalsevariant?'default' | 'destructive'default\nDropdownMenuLabel\nPropTypeDefaultinset?booleanfalse\nCredits\n\nWe use Radix UI for the dropdown menu component.\nWe take our inspiration from Shadcn UI for the dropdown menu style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Dropdown Menu\n\nDisplays a menu to the user — such as a set of actions or functions — triggered by a button.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/dropdown-menu.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/dropdown-menu)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/dropdown-menu)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/radix/dropdown-menu)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropdown-menu-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Dropdown Menu component:\n\n## Usage\n\n```\n<DropdownMenu>\n  <DropdownMenuTrigger>Open Dropdown Menu</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuItem>Item 1</DropdownMenuItem>\n    <DropdownMenuItem>Item 2</DropdownMenuItem>\n    <DropdownMenuItem>Item 3</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n```\n\n## Examples\n\n### Checkboxes\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropdown-menu-checkboxes-demo.json)\n\nLoading component...\n\n### Radio Group\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropdown-menu-radio-group-demo.json)\n\nLoading component...\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/dropdown-menu)[API Reference](https://www.radix-ui.com/primitives/docs/components/dropdown-menu#api-reference)\n\n### Animate UI Props\n\n#### DropdownMenu\n\nProp\n\nType\n\nDefault\n\n`animateOnHover?`\n\n`boolean`\n\n`true`\n\n`transition?`\n\n`Transition`\n\n`{ type: \"spring\", stiffness: 350, damping: 35 }`\n\n#### DropdownMenuSubTrigger\n\nProp\n\nType\n\nDefault\n\n`inset?`\n\n`boolean`\n\n`false`\n\n#### DropdownMenuContent\n\nProp\n\nType\n\nDefault\n\n`transition?`\n\n`Transition`\n\n`{ duration: 0.2 }`\n\n#### DropdownMenuItem\n\nProp\n\nType\n\nDefault\n\n`inset?`\n\n`boolean`\n\n`false`\n\n`variant?`\n\n`'default' | 'destructive'`\n\n`default`\n\n#### DropdownMenuLabel\n\nProp\n\nType\n\nDefault\n\n`inset?`\n\n`boolean`\n\n`false`\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/dropdown-menu) for the dropdown menu component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/dropdown-menu) for the dropdown menu style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.478Z",
      "componentName": "dropdown-menu",
      "demoCode": "<DropdownMenu>\n  <DropdownMenuTrigger>Open Dropdown Menu</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuItem>Item 1</DropdownMenuItem>\n    <DropdownMenuItem>Item 2</DropdownMenuItem>\n    <DropdownMenuItem>Item 3</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>",
      "metadata": {
        "description": "Displays a menu to the user — such as a set of actions or functions — triggered by a button."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-dropzone",
      "url": "https://redpanda-ui-registry.netlify.app/docs/dropzone",
      "title": "Dropzone",
      "content": "DropzoneAllows users to drag-and-drop files into a container to upload or process them.Made by haydenbleaselEdit on GitHubPowered byReact DropzoneLucide\nPreviewCodeOpen in v0Loading component...\nWhen to use\nUse this decision tree to determine when to use the Dropzone component:\n\nInstallation\nCLI\nFeatures\n\nDrag and drop files to upload\nCustomize the empty state and content\nIntelligently handle file types, sizes, and counts\nShow file names and sizes in a human readable format\nHandle errors and reject files\nDisable the dropzone when needed\nCustomize the appearance with className\nShow file previews for images\nReplace existing files by dragging new ones\nContext provider for accessing dropzone state\n\nExamples\nWith min and max sizes\nPreviewCodeOpen in v0Loading component...\nMultiple files\nPreviewCodeOpen in v0Loading component...\nImages only\nPreviewCodeOpen in v0Loading component...\nWith custom empty state\nPreviewCodeOpen in v0Loading component...\nShowing an image preview\nPreviewCodeOpen in v0Loading component...\nTable\nYou can combine the <Table /> component with file upload functionality to create a table-based file upload interface. This example shows how to display uploaded files in a table format with file icons, progress indicators, and action buttons.\nPreviewCodeOpen in v0Loading component...\nProps\nDocsAPI Reference\nCredits\n\nWe use Kibo UI for the dropdown menu component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Dropzone\n\nAllows users to drag-and-drop files into a container to upload or process them.\n\nMade by [haydenbleasel](https://github.com/haydenbleasel)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/dropzone.mdx)\n\nPowered by\n\n[![React Dropzone](https://img.logo.dev/react-dropzone.js.org?token=pk_Q3Q-iPRxREyBYQYEiIraeA)React Dropzone](https://react-dropzone.js.org/)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-demo.json)\n\nLoading component...\n\n## When to use\n\nUse this decision tree to determine when to use the Dropzone component:\n\n## Installation\n\nCLI\n\n## Features\n\n*   Drag and drop files to upload\n*   Customize the empty state and content\n*   Intelligently handle file types, sizes, and counts\n*   Show file names and sizes in a human readable format\n*   Handle errors and reject files\n*   Disable the dropzone when needed\n*   Customize the appearance with className\n*   Show file previews for images\n*   Replace existing files by dragging new ones\n*   Context provider for accessing dropzone state\n\n## Examples\n\n### With min and max sizes\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-min-max-demo.json)\n\nLoading component...\n\n### Multiple files\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-multiple-demo.json)\n\nLoading component...\n\n### Images only\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-images-only-demo.json)\n\nLoading component...\n\n### With custom empty state\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-custom-empty-demo.json)\n\nLoading component...\n\n### Showing an image preview\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-image-preview-demo.json)\n\nLoading component...\n\n## Table\n\nYou can combine the `<Table />` component with file upload functionality to create a table-based file upload interface. This example shows how to display uploaded files in a table format with file icons, progress indicators, and action buttons.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/dropzone-table-demo.json)\n\nLoading component...\n\n## Props\n\n[Docs](https://www.kibo-ui.com/components/dropzone)[API Reference](https://www.kibo-ui.com/components/dropzone#props)\n\n## Credits\n\n*   We use [Kibo UI](https://www.kibo-ui.com/components/dropzone) for the dropdown menu component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.038Z",
      "componentName": "dropzone",
      "metadata": {
        "description": "Allows users to drag-and-drop files into a container to upload or process them."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-files",
      "url": "https://redpanda-ui-registry.netlify.app/docs/files",
      "title": "Files",
      "content": "FilesA component that allows you to display a list of files and folders.Made by imskyleenEdit on GitHubPowered byAnimate UIMotionLucide\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Files component:\n\nUsage\n<Files>\n  <Folder name=\"Folder 1\">\n    <File name=\"file1.txt\" />\n    <File name=\"file2.txt\" />\n  </Folder>\n  <Folder name=\"Folder 2\">\n    <File name=\"file3.txt\" />\n    <File name=\"file4.txt\" />\n  </Folder>\n</Files>\nExamples\nFiles Advanced\nPreviewCodeOpen in v0Loading component...\nProps\nFiles\nPropTypeDefaultchildrenReact.ReactNode-className?string-activeClassName?string-defaultOpen?string[]-open?string[]-onOpenChange?function-sideComponent?React.ReactNode-\nFolder\nPropTypeDefaultnamestring-children?React.ReactNode-className?string-defaultOpen?string[]-open?string[]-onOpenChange?function-\nFile\nPropTypeDefaultclassName?string-namestring-\nCredits\n\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Files\n\nA component that allows you to display a list of files and folders.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/files.mdx)\n\nPowered by\n\n[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/components/files)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)[![Lucide](https://img.logo.dev/lucide.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Lucide](https://lucide.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/files-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Files component:\n\n## Usage\n\n```\n<Files>\n  <Folder name=\"Folder 1\">\n    <File name=\"file1.txt\" />\n    <File name=\"file2.txt\" />\n  </Folder>\n  <Folder name=\"Folder 2\">\n    <File name=\"file3.txt\" />\n    <File name=\"file4.txt\" />\n  </Folder>\n</Files>\n```\n\n## Examples\n\n### Files Advanced\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/files-advanced-demo.json)\n\nLoading component...\n\n## Props\n\n### Files\n\nProp\n\nType\n\nDefault\n\n`children`\n\n`React.ReactNode`\n\n\\-\n\n`className?`\n\n`string`\n\n\\-\n\n`activeClassName?`\n\n`string`\n\n\\-\n\n`defaultOpen?`\n\n`string[]`\n\n\\-\n\n`open?`\n\n`string[]`\n\n\\-\n\n`onOpenChange?`\n\n`function`\n\n\\-\n\n`sideComponent?`\n\n`React.ReactNode`\n\n\\-\n\n### Folder\n\nProp\n\nType\n\nDefault\n\n`name`\n\n`string`\n\n\\-\n\n`children?`\n\n`React.ReactNode`\n\n\\-\n\n`className?`\n\n`string`\n\n\\-\n\n`defaultOpen?`\n\n`string[]`\n\n\\-\n\n`open?`\n\n`string[]`\n\n\\-\n\n`onOpenChange?`\n\n`function`\n\n\\-\n\n### File\n\nProp\n\nType\n\nDefault\n\n`className?`\n\n`string`\n\n\\-\n\n`name`\n\n`string`\n\n\\-\n\n## Credits\n\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.156Z",
      "componentName": "files",
      "demoCode": "<Files>\n  <Folder name=\"Folder 1\">\n    <File name=\"file1.txt\" />\n    <File name=\"file2.txt\" />\n  </Folder>\n  <Folder name=\"Folder 2\">\n    <File name=\"file3.txt\" />\n    <File name=\"file4.txt\" />\n  </Folder>\n</Files>",
      "metadata": {
        "description": "A component that allows you to display a list of files and folders."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-form",
      "url": "https://redpanda-ui-registry.netlify.app/docs/form",
      "title": "Form",
      "content": "FormBuilding forms with React Hook Form and Zod.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UIreact-hook-formzod\nPreviewCodeOpen in v0Loading component...\nWhen to use\nUse this decision tree to determine when to use the Form components:\n\nInstallation\nCLI\nUsage\nCreate a form schemaDefine the shape of your form using a Zod schema. You can read more about using Zod in the Zod documentation.components/example-form.tsx\"use client\"\n\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})Define a formUse the useForm hook from react-hook-form to create a form.components/example-form.tsx\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n\n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}Since FormField is using a controlled component, you need to provide a default value for the field. See the React Hook Form docs to learn more about controlled components.Build your formWe can now use the <Form /> components to build our form.components/example-form.tsx\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // ...\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}DoneThat's it. You now have a fully accessible form that is type-safe with client-side validation.PreviewCodeOpen in v0Loading component...\nExamples\nSimple Form\nA comprehensive form example showcasing the SimpleFormField component for cleaner, more maintainable form code.\nPreviewCodeOpen in v0Loading component...\nRequired fields\nPreviewCodeOpen in v0Loading component...\nSee the following links for more examples on how to use the <Form /> component with other components:\n\nCheckbox\nDate Picker\nInput\nRadio Group\nSelect\nMulti Select\nSwitch\nTextarea\nCombobox\nChoicebox\n\nCredits\n\nWe use Radix UI for the form component.\nWe take our inspiration from Shadcn UI for the form style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Form\n\nBuilding forms with React Hook Form and Zod.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/form.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/form)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/form)[![react-hook-form](https://img.logo.dev/react-hook-form.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)react-hook-form](https://react-hook-form.com/)[![zod](https://img.logo.dev/zod.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)zod](https://zod.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/form-demo.json)\n\nLoading component...\n\n## When to use\n\nUse this decision tree to determine when to use the Form components:\n\n## Installation\n\nCLI\n\n## Usage\n\n### Create a form schema\n\nDefine the shape of your form using a Zod schema. You can read more about using Zod in the [Zod documentation](https://zod.dev).\n\ncomponents/example-form.tsx\n\n```\n\"use client\"\n\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})\n```\n\n### Define a form\n\nUse the `useForm` hook from `react-hook-form` to create a form.\n\ncomponents/example-form.tsx\n\n```\n\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n\n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}\n```\n\nSince `FormField` is using a controlled component, you need to provide a default value for the field. See the [React Hook Form docs](https://react-hook-form.com/docs/usecontroller) to learn more about controlled components.\n\n### Build your form\n\nWe can now use the `<Form />` components to build our form.\n\ncomponents/example-form.tsx\n\n```\n\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // ...\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n```\n\n### Done\n\nThat's it. You now have a fully accessible form that is type-safe with client-side validation.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-form-demo.json)\n\nLoading component...\n\n## Examples\n\n### Simple Form\n\nA comprehensive form example showcasing the SimpleFormField component for cleaner, more maintainable form code.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/form-simple-demo.json)\n\nLoading component...\n\n### Required fields\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/form-required-demo.json)\n\nLoading component...\n\nSee the following links for more examples on how to use the `<Form />` component with other components:\n\n*   [Checkbox](/docs/checkbox#form)\n*   [Date Picker](/docs/date-picker#form)\n*   [Input](/docs/input#form)\n*   [Radio Group](/docs/radio-group#form)\n*   [Select](/docs/select#form)\n*   [Multi Select](/docs/multi-select#form)\n*   [Switch](/docs/switch#form)\n*   [Textarea](/docs/textarea#form)\n*   [Combobox](/docs/combobox#form)\n*   [Choicebox](/docs/choicebox#form)\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/form) for the form component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/form) for the form style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.771Z",
      "componentName": "form",
      "demoCode": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n\n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}",
      "metadata": {
        "description": "Building forms with React Hook Form and Zod.",
        "dependencies": [
          "zod",
          "@hookform/resolvers/zod",
          "react-hook-form",
          "@/components/ui/button",
          "@/components/ui/input"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-hover-card",
      "url": "https://redpanda-ui-registry.netlify.app/docs/hover-card",
      "title": "Hover Card",
      "content": "Hover CardFor sighted users to preview content available behind a link.Made by imskyleenEdit on GitHubPowered byRadix UIShadcn UIAnimate UIMotion\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Hover Card component:\n\nUsage\n<HoverCard>\n  <HoverCardTrigger>Hover Card Trigger</HoverCardTrigger>\n  <HoverCardContent>Hover Card Content</HoverCardContent>\n</HoverCard>\nProps\nDocsAPI Reference\nAnimate UI Props\nHoverCardContent\nPropTypeDefaulttransition?Transition{ type: 'spring', stiffness: 300, damping: 25 }\nCredits\n\nWe use Radix UI for the hover card component.\nWe take our inspiration from Shadcn UI for the hover card style.\nWe use Animate UI from imskyleen for all the animations.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Hover Card\n\nFor sighted users to preview content available behind a link.\n\nMade by [imskyleen](https://github.com/imskyleen)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/hover-card.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/hover-card)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/hover-card)[![Animate UI](https://img.logo.dev/animate-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Animate UI](https://animate-ui.com/docs/components/hover-card)[![Motion](https://img.logo.dev/motion.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Motion](https://motion.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/hover-card-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Hover Card component:\n\n## Usage\n\n```\n<HoverCard>\n  <HoverCardTrigger>Hover Card Trigger</HoverCardTrigger>\n  <HoverCardContent>Hover Card Content</HoverCardContent>\n</HoverCard>\n```\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/hover-card)[API Reference](https://www.radix-ui.com/primitives/docs/components/hover-card#api-reference)\n\n### Animate UI Props\n\n#### HoverCardContent\n\nProp\n\nType\n\nDefault\n\n`transition?`\n\n`Transition`\n\n`{ type: 'spring', stiffness: 300, damping: 25 }`\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/hover-card) for the hover card component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/hover-card) for the hover card style.\n*   We use [Animate UI](https://github.com/animate-ui/animate-ui) from [imskyleen](https://github.com/imskyleen) for all the animations.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.445Z",
      "componentName": "hover-card",
      "demoCode": "<HoverCard>\n  <HoverCardTrigger>Hover Card Trigger</HoverCardTrigger>\n  <HoverCardContent>Hover Card Content</HoverCardContent>\n</HoverCard>",
      "metadata": {
        "description": "For sighted users to preview content available behind a link."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-icons",
      "url": "https://redpanda-ui-registry.netlify.app/docs/icons",
      "title": "Icons",
      "content": "IconsA collection of brand and UI icons available through the registry system.Made by malinskibeniaminEdit on GitHubThe Redpanda UI registry includes a comprehensive collection of icons organized by category. Each icon is available as an individual component that can be installed independently.\nPreviewCodeOpen in v0Loading component...\nUsage\nAfter copying relevant icons, import and use the icons in your components:\nimport AwsIcon from \"@/components/redpanda-ui/aws-icon\"\nimport GoogleIcon from \"@/components/redpanda-ui/google-icon\"\n\nexport function CloudProviders() {\n  return (\n    <div className=\"flex gap-4\">\n      <AwsIcon className=\"h-8 w-8\" />\n      <GoogleIcon className=\"h-8 w-8\" />\n    </div>\n  )\n}\nAvailable Icons\nAuthentication & Identity\nIcons for authentication providers and identity services.\n\ngoogle-icon - Google brand icon\ngithub-icon - GitHub brand icon\nmail-icon - Email/mail icon\nokta-icon - Okta brand icon\n\nCloud Providers\nIcons for major cloud service providers.\n\naws-icon - Amazon Web Services icon\nazure-icon - Microsoft Azure icon\ngcp-icon - Google Cloud Platform icon\n\nFrameworks & Tools\nIcons for development frameworks and tools.\n\nreact-icon - React framework icon\nts-icon - TypeScript language icon\ntailwind-icon - Tailwind CSS framework icon\nshadcn-icon - shadcn/ui library icon\nradix-icon - Radix UI library icon\n\nUI & Components\nIcons for UI categories and component types.\n\ncomponents-icon - UI components category icon\nprimitives-icon - UI primitives category icon\neffects-icon - UI effects category icon\nmotion-icon - Motion/animation category icon\nanimateui-icon - Animate UI library icon\n\nBrand\nRedpanda and related brand icons.\n\nredpandaui-icon - Redpanda UI brand icon\nredpandaui-letter-icon - Redpanda UI letter brand icon\nmcp-icon - MCP (Model Context Protocol) icon\n\nIcon Properties\nAll icons accept standard SVG props:\n<AwsIcon \n  className=\"h-6 w-6 text-blue-600\"\n  aria-label=\"Amazon Web Services\"\n/>\nCommon Props\n\nclassName - CSS classes for styling\nwidth / height - Size (defaults to \"1em\")\nfill / stroke - Colors (where applicable)\naria-label - Accessibility label\nAll other standard SVG element props\n\nExamples\nIcon Grid\nDisplay multiple icons in a grid layout:\nimport AwsIcon from \"@/components/redpanda-ui/aws-icon\"\nimport AzureIcon from \"@/components/redpanda-ui/azure-icon\"\nimport GcpIcon from \"@/components/redpanda-ui/gcp-icon\"\n\nexport function CloudProviderGrid() {\n  return (\n    <div className=\"grid grid-cols-3 gap-4 p-4\">\n      <div className=\"flex items-center justify-center p-4 border rounded\">\n        <AwsIcon className=\"h-12 w-12\" />\n      </div>\n      <div className=\"flex items-center justify-center p-4 border rounded\">\n        <AzureIcon className=\"h-12 w-12\" />\n      </div>\n      <div className=\"flex items-center justify-center p-4 border rounded\">\n        <GcpIcon className=\"h-12 w-12\" />\n      </div>\n    </div>\n  )\n}\nAuthentication Buttons\nUse icons in authentication buttons:\nimport GoogleIcon from \"@/components/redpanda-ui/google-icon\"\nimport GithubIcon from \"@/components/redpanda-ui/github-icon\"\nimport { Button } from \"@/components/redpanda-ui/button\"\n\nexport function AuthButtons() {\n  return (\n    <div className=\"flex gap-2\">\n      <Button variant=\"outline\">\n        <GoogleIcon className=\"mr-2 h-4 w-4\" />\n        Continue with Google\n      </Button>\n      <Button variant=\"outline\">\n        <GithubIcon className=\"mr-2 h-4 w-4\" />\n        Continue with GitHub\n      </Button>\n    </div>\n  )\n}\nCustomization\nIcons can be customized using CSS classes or inline styles:\n<AwsIcon \n  className=\"h-8 w-8 text-orange-500 hover:text-orange-600 transition-colors\"\n/>\nFor more complex styling, you can wrap icons in containers or use CSS-in-JS solutions.Built by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Icons\n\nA collection of brand and UI icons available through the registry system.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/icons.mdx)\n\nThe Redpanda UI registry includes a comprehensive collection of icons organized by category. Each icon is available as an individual component that can be installed independently.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/icons-demo.json)\n\nLoading component...\n\n## Usage\n\nAfter copying relevant icons, import and use the icons in your components:\n\n```\nimport AwsIcon from \"@/components/redpanda-ui/aws-icon\"\nimport GoogleIcon from \"@/components/redpanda-ui/google-icon\"\n\nexport function CloudProviders() {\n  return (\n    <div className=\"flex gap-4\">\n      <AwsIcon className=\"h-8 w-8\" />\n      <GoogleIcon className=\"h-8 w-8\" />\n    </div>\n  )\n}\n```\n\n## Available Icons\n\n### Authentication & Identity\n\nIcons for authentication providers and identity services.\n\n*   **google-icon** - Google brand icon\n*   **github-icon** - GitHub brand icon\n*   **mail-icon** - Email/mail icon\n*   **okta-icon** - Okta brand icon\n\n### Cloud Providers\n\nIcons for major cloud service providers.\n\n*   **aws-icon** - Amazon Web Services icon\n*   **azure-icon** - Microsoft Azure icon\n*   **gcp-icon** - Google Cloud Platform icon\n\n### Frameworks & Tools\n\nIcons for development frameworks and tools.\n\n*   **react-icon** - React framework icon\n*   **ts-icon** - TypeScript language icon\n*   **tailwind-icon** - Tailwind CSS framework icon\n*   **shadcn-icon** - shadcn/ui library icon\n*   **radix-icon** - Radix UI library icon\n\n### UI & Components\n\nIcons for UI categories and component types.\n\n*   **components-icon** - UI components category icon\n*   **primitives-icon** - UI primitives category icon\n*   **effects-icon** - UI effects category icon\n*   **motion-icon** - Motion/animation category icon\n*   **animateui-icon** - Animate UI library icon\n\n### Brand\n\nRedpanda and related brand icons.\n\n*   **redpandaui-icon** - Redpanda UI brand icon\n*   **redpandaui-letter-icon** - Redpanda UI letter brand icon\n*   **mcp-icon** - MCP (Model Context Protocol) icon\n\n## Icon Properties\n\nAll icons accept standard SVG props:\n\n```\n<AwsIcon \n  className=\"h-6 w-6 text-blue-600\"\n  aria-label=\"Amazon Web Services\"\n/>\n```\n\n### Common Props\n\n*   `className` - CSS classes for styling\n*   `width` / `height` - Size (defaults to \"1em\")\n*   `fill` / `stroke` - Colors (where applicable)\n*   `aria-label` - Accessibility label\n*   All other standard SVG element props\n\n## Examples\n\n### Icon Grid\n\nDisplay multiple icons in a grid layout:\n\n```\nimport AwsIcon from \"@/components/redpanda-ui/aws-icon\"\nimport AzureIcon from \"@/components/redpanda-ui/azure-icon\"\nimport GcpIcon from \"@/components/redpanda-ui/gcp-icon\"\n\nexport function CloudProviderGrid() {\n  return (\n    <div className=\"grid grid-cols-3 gap-4 p-4\">\n      <div className=\"flex items-center justify-center p-4 border rounded\">\n        <AwsIcon className=\"h-12 w-12\" />\n      </div>\n      <div className=\"flex items-center justify-center p-4 border rounded\">\n        <AzureIcon className=\"h-12 w-12\" />\n      </div>\n      <div className=\"flex items-center justify-center p-4 border rounded\">\n        <GcpIcon className=\"h-12 w-12\" />\n      </div>\n    </div>\n  )\n}\n```\n\n### Authentication Buttons\n\nUse icons in authentication buttons:\n\n```\nimport GoogleIcon from \"@/components/redpanda-ui/google-icon\"\nimport GithubIcon from \"@/components/redpanda-ui/github-icon\"\nimport { Button } from \"@/components/redpanda-ui/button\"\n\nexport function AuthButtons() {\n  return (\n    <div className=\"flex gap-2\">\n      <Button variant=\"outline\">\n        <GoogleIcon className=\"mr-2 h-4 w-4\" />\n        Continue with Google\n      </Button>\n      <Button variant=\"outline\">\n        <GithubIcon className=\"mr-2 h-4 w-4\" />\n        Continue with GitHub\n      </Button>\n    </div>\n  )\n}\n```\n\n## Customization\n\nIcons can be customized using CSS classes or inline styles:\n\n```\n<AwsIcon \n  className=\"h-8 w-8 text-orange-500 hover:text-orange-600 transition-colors\"\n/>\n```\n\nFor more complex styling, you can wrap icons in containers or use CSS-in-JS solutions.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.116Z",
      "componentName": "icons",
      "demoCode": "import AwsIcon from \"@/components/redpanda-ui/aws-icon\"\nimport GoogleIcon from \"@/components/redpanda-ui/google-icon\"\n\nexport function CloudProviders() {\n  return (\n    <div className=\"flex gap-4\">\n      <AwsIcon className=\"h-8 w-8\" />\n      <GoogleIcon className=\"h-8 w-8\" />\n    </div>\n  )\n}",
      "metadata": {
        "description": "A collection of brand and UI icons available through the registry system.",
        "dependencies": [
          "@/components/redpanda-ui/aws-icon",
          "@/components/redpanda-ui/google-icon",
          "@/components/redpanda-ui/azure-icon",
          "@/components/redpanda-ui/gcp-icon",
          "@/components/redpanda-ui/github-icon",
          "@/components/redpanda-ui/button"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-input-otp",
      "url": "https://redpanda-ui-registry.netlify.app/docs/input-otp",
      "title": "Input OTP",
      "content": "Input OTPAccessible one-time password component with copy paste functionality.Made by guilherme_rodzEdit on GitHubPowered byShadcn UIInput OTP\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nAdd the following animations to your theme.css file:\ntheme.css--animation-caret-blink: var(--animation-caret-blink);\ntheme.css--animation-caret-blink: caret-blink 1.25s ease-out infinite;\ntheme.css   @keyframes caret-blink {\n     0%, 70%, 100% {\n       opacity: 1;\n     }\n     20%, 50% {\n       opacity: 0;\n     }\n   }\nAlternatively, for legacy Tailwind implementations, add the following animations to your tailwind.config.js file:\ntailwind.config.js/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"caret-blink\": {\n          \"0%,70%,100%\": { opacity: \"1\" },\n          \"20%,50%\": { opacity: \"0\" },\n        },\n      },\n      animation: {\n        \"caret-blink\": \"caret-blink 1.25s ease-out infinite\",\n      },\n    },\n  },\n}\nWhen to use\nUse this decision tree to determine when to use the Input OTP component:\n\nUsage\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\nExamples\nPattern\nUse the pattern prop to define a custom pattern for the OTP input.\nPreviewCodeOpen in v0Loading component...\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n\n...\n\n<InputOTP\n  maxLength={6}\n  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    {/* ... */}\n  </InputOTPGroup>\n</InputOTP>\nSeparator\nYou can use the <InputOTPSeparator /> component to add a separator between the input groups.\nPreviewCodeOpen in v0Loading component...\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n\n...\n\n<InputOTP maxLength={4}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={2} />\n    <InputOTPSlot index={3} />\n  </InputOTPGroup>\n</InputOTP>\nControlled\nYou can use the value and onChange props to control the input value.\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use input-otp for the input OTP component.\nWe take our inspiration from Shadcn UI for the input OTP style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Input OTP\n\nAccessible one-time password component with copy paste functionality.\n\nMade by [guilherme\\_rodz](https://github.com/guilhermerodz)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/input-otp.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/input-otp)[![Input OTP](https://img.logo.dev/input-otp.rodz.dev?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Input OTP](https://input-otp.rodz.dev/)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-otp-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\nAdd the following animations to your `theme.css` file:\n\ntheme.css\n\n```\n--animation-caret-blink: var(--animation-caret-blink);\n```\n\ntheme.css\n\n```\n--animation-caret-blink: caret-blink 1.25s ease-out infinite;\n```\n\ntheme.css\n\n```\n   @keyframes caret-blink {\n     0%, 70%, 100% {\n       opacity: 1;\n     }\n     20%, 50% {\n       opacity: 0;\n     }\n   }\n```\n\nAlternatively, for legacy Tailwind implementations, add the following animations to your `tailwind.config.js` file:\n\ntailwind.config.js\n\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"caret-blink\": {\n          \"0%,70%,100%\": { opacity: \"1\" },\n          \"20%,50%\": { opacity: \"0\" },\n        },\n      },\n      animation: {\n        \"caret-blink\": \"caret-blink 1.25s ease-out infinite\",\n      },\n    },\n  },\n}\n```\n\n## When to use\n\nUse this decision tree to determine when to use the Input OTP component:\n\n## Usage\n\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n```\n\n```\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n## Examples\n\n### Pattern\n\nUse the `pattern` prop to define a custom pattern for the OTP input.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-otp-pattern-demo.json)\n\nLoading component...\n\n```\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n\n...\n\n<InputOTP\n  maxLength={6}\n  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    {/* ... */}\n  </InputOTPGroup>\n</InputOTP>\n```\n\n### Separator\n\nYou can use the `<InputOTPSeparator />` component to add a separator between the input groups.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-otp-separator-demo.json)\n\nLoading component...\n\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n\n...\n\n<InputOTP maxLength={4}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={2} />\n    <InputOTPSlot index={3} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n### Controlled\n\nYou can use the `value` and `onChange` props to control the input value.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-otp-controlled-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We use [input-otp](https://github.com/guilhermerodz/input-otp) for the input OTP component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/input) for the input OTP style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:20.834Z",
      "componentName": "input-otp",
      "demoCode": "<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>",
      "metadata": {
        "description": "Accessible one-time password component with copy paste functionality.",
        "dependencies": [
          "input-otp"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-input",
      "url": "https://redpanda-ui-registry.netlify.app/docs/input",
      "title": "Input",
      "content": "InputDisplays a form input field or a component that looks like an input field.Made by shadcnEdit on GitHubPowered byShadcn UI\nPreviewCodeOpen in v0Loading component...\nInstallation\nCLI\nWhen to use\nUse this decision tree to determine when to use the Input component:\n\nUsage\nimport { Input } from \"@/components/ui/input\"\n<Input />\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nNumber\nPreviewCodeOpen in v0Loading component...\nPassword\nPreviewCodeOpen in v0Loading component...\nFile\nPreviewCodeOpen in v0Loading component...\nDisabled\nPreviewCodeOpen in v0Loading component...\nWith Label\nPreviewCodeOpen in v0Loading component...\nWith Button\nPreviewCodeOpen in v0Loading component...\nWith Date Picker\nPreviewCodeOpen in v0Loading component...\nForm\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe take our inspiration from Shadcn UI for the input component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Input\n\nDisplays a form input field or a component that looks like an input field.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/input.mdx)\n\nPowered by\n\n[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/input)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-demo.json)\n\nLoading component...\n\n## Installation\n\nCLI\n\n## When to use\n\nUse this decision tree to determine when to use the Input component:\n\n## Usage\n\n```\nimport { Input } from \"@/components/ui/input\"\n```\n\n```\n<Input />\n```\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-demo.json)\n\nLoading component...\n\n### Number\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-number-demo.json)\n\nLoading component...\n\n### Password\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-password-demo.json)\n\nLoading component...\n\n### File\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-file-demo.json)\n\nLoading component...\n\n### Disabled\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-disabled-demo.json)\n\nLoading component...\n\n### With Label\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-with-label-demo.json)\n\nLoading component...\n\n### With Button\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-with-button-demo.json)\n\nLoading component...\n\n### With Date Picker\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-date-picker-demo.json)\n\nLoading component...\n\n### Form\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/input-form-demo.json)\n\nLoading component...\n\n## Credits\n\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/input) for the input component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.017Z",
      "componentName": "input",
      "metadata": {
        "description": "Displays a form input field or a component that looks like an input field.",
        "dependencies": [
          "@/components/ui/input"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-json-viewer",
      "url": "https://redpanda-ui-registry.netlify.app/docs/json-viewer",
      "title": "JSON Viewer",
      "content": "JSON ViewerDisplays a JSON viewer in a stringified format.Made by NicolasMontoneEdit on GitHubPreviewCodeOpen in v0Loading component...\nWhen to use\nThe JSON Viewer component displays structured JSON data in a formatted, readable tree view. Use this decision tree to determine when it's appropriate:\n\nInstallation\nCLI\nUsage\nimport { JsonViewer } from '@/registry/components/json-viewer';\n<JsonViewer\n    data={{\n        name: 'John Doe',\n        age: 32,\n        siblings: { brother: 'James Doe', sister: 'Jane Doe' },\n    }}\n/>\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nCredits\n\nWe use json-tree-viewer for the JSON Viewer component and style.\nFor a more interactive playground, see here.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# JSON Viewer\n\nDisplays a JSON viewer in a stringified format.\n\nMade by [NicolasMontone](https://github.com/NicolasMontone)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/json-viewer.mdx)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/json-viewer-demo.json)\n\nLoading component...\n\n## When to use\n\nThe JSON Viewer component displays structured JSON data in a formatted, readable tree view. Use this decision tree to determine when it's appropriate:\n\n## Installation\n\nCLI\n\n## Usage\n\n```\nimport { JsonViewer } from '@/registry/components/json-viewer';\n```\n\n```\n<JsonViewer\n    data={{\n        name: 'John Doe',\n        age: 32,\n        siblings: { brother: 'James Doe', sister: 'Jane Doe' },\n    }}\n/>\n```\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/json-viewer-demo.json)\n\nLoading component...\n\n### Credits\n\n*   We use [json-tree-viewer](https://github.com/NicolasMontone/json-tree-viewer) for the JSON Viewer component and style.\n*   For a more interactive playground, see [here](https://json-tree-viewer-eight.vercel.app/).\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.347Z",
      "componentName": "json-viewer",
      "demoCode": "<JsonViewer\n    data={{\n        name: 'John Doe',\n        age: 32,\n        siblings: { brother: 'James Doe', sister: 'Jane Doe' },\n    }}\n/>",
      "metadata": {
        "description": "Displays a JSON viewer in a stringified format.",
        "dependencies": [
          "@/registry/components/json-viewer"
        ]
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-kbd",
      "url": "https://redpanda-ui-registry.netlify.app/docs/kbd",
      "title": "Kbd",
      "content": "KbdA keyboard key primitive for displaying keyboard shortcuts and key combinations.Made by malinskibeniaminEdit on GitHubPowered byRadix UI\nPreviewCodeOpen in v0Loading component...\nWhen to use\nThe Kbd component displays keyboard keys and shortcuts in a styled format. Use this decision tree to determine when it's appropriate:\n\nInstallation\nCLI\nUsage\n    <Kbd>\n      <Command /> +K\n    </Kbd>\nExamples\nDefault\nPreviewCodeOpen in v0Loading component...\nOutline\nPreviewCodeOpen in v0Loading component...\nProps\nDocsAPI Reference\nCredits\n\nWe use Re UI for the kbd component and style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Kbd\n\nA keyboard key primitive for displaying keyboard shortcuts and key combinations.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/kbd.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/utilities/slot)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/kbd-demo.json)\n\nLoading component...\n\n## When to use\n\nThe Kbd component displays keyboard keys and shortcuts in a styled format. Use this decision tree to determine when it's appropriate:\n\n## Installation\n\nCLI\n\n## Usage\n\n```\n    <Kbd>\n      <Command /> +K\n    </Kbd>\n```\n\n## Examples\n\n### Default\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/kbd-demo.json)\n\nLoading component...\n\n### Outline\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/kbd-outline-demo.json)\n\nLoading component...\n\n## Props\n\n[Docs](https://reui.io/docs/kbd)[API Reference](https://reui.io/docs/kbd#api-reference)\n\n## Credits\n\n*   We use [Re UI](https://www.diceui.com/docs/components/kbd) for the kbd component and style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.200Z",
      "componentName": "kbd",
      "demoCode": "<Kbd>\n      <Command /> +K\n    </Kbd>",
      "metadata": {
        "description": "A keyboard key primitive for displaying keyboard shortcuts and key combinations."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-kitchensink",
      "url": "https://redpanda-ui-registry.netlify.app/docs/kitchensink",
      "title": "Kitchensink",
      "content": "KitchensinkA component to preview the theme for all components.Made by malinskibeniaminEdit on GitHubThis component does not work in v0 preview, but can be used to check the main style/design.\nPreviewCodeOpen in v0Loading component...Built by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Kitchensink\n\nA component to preview the theme for all components.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/kitchensink.mdx)\n\n### This component does not work in v0 preview, but can be used to check the main style/design.\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/kitchensink-demo.json)\n\nLoading component...\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:20.981Z",
      "componentName": "kitchensink",
      "metadata": {
        "description": "A component to preview the theme for all components."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-label",
      "url": "https://redpanda-ui-registry.netlify.app/docs/label",
      "title": "Label",
      "content": "LabelAn accessible label associated with controls.Made by shadcnEdit on GitHubPowered byRadix UIShadcn UI\nPreviewCodeOpen in v0Loading component...\nWhen to use\nThe Label component provides accessible text labels for form controls and interactive elements. Use this decision tree to determine when it's appropriate:\n\nInstallation\nCLI\nUsage\n<Label htmlFor=\"email\">Your email address</Label>\nProps\nDocsAPI Reference\nCredits\n\nWe use Radix UI for the label component.\nWe take our inspiration from Shadcn UI for the label style.\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# Label\n\nAn accessible label associated with controls.\n\nMade by [shadcn](https://github.com/shadcn)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/label.mdx)\n\nPowered by\n\n[![Radix UI](https://img.logo.dev/radix-ui.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Radix UI](https://www.radix-ui.com/primitives/docs/components/label)[![Shadcn UI](https://img.logo.dev/ui.shadcn.com?token=pk_Q3Q-iPRxREyBYQYEiIraeA)Shadcn UI](https://ui.shadcn.com/docs/components/input)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/label-demo.json)\n\nLoading component...\n\n## When to use\n\nThe Label component provides accessible text labels for form controls and interactive elements. Use this decision tree to determine when it's appropriate:\n\n## Installation\n\nCLI\n\n## Usage\n\n```\n<Label htmlFor=\"email\">Your email address</Label>\n```\n\n## Props\n\n[Docs](https://www.radix-ui.com/primitives/docs/components/label)[API Reference](https://www.radix-ui.com/primitives/docs/components/label#api-reference)\n\n## Credits\n\n*   We use [Radix UI](https://www.radix-ui.com/primitives/docs/components/label) for the label component.\n*   We take our inspiration from [Shadcn UI](https://ui.shadcn.com/docs/components/label) for the label style.\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:21.112Z",
      "componentName": "label",
      "demoCode": "<Label htmlFor=\"email\">Your email address</Label>",
      "metadata": {
        "description": "An accessible label associated with controls."
      },
      "isComponent": true,
      "isBlock": false
    },
    {
      "id": "-list-layout",
      "url": "https://redpanda-ui-registry.netlify.app/docs/list-layout",
      "title": "List Layout",
      "content": "List LayoutA composable, responsive layout component for list views with header, filters, content, and footer sections.Made by malinskibeniaminEdit on GitHubPreviewCodeOpen in v0Loading component...\nWhen to use\nThe List Layout component provides a structured layout system for list views, dashboards, and data management interfaces. Use this decision tree to determine when it's appropriate:\n\nInstallation\nCLI\nUsage\nimport {\n  ListLayout,\n  ListLayoutHeader,\n  ListLayoutNavigation,\n  ListLayoutFilters,\n  ListLayoutContent,\n  ListLayoutFooter,\n} from \"@/components/ui/list-layout\"\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Name\"\n    description=\"Description of the resource or page\"\n    actions={<Button>Action</Button>}\n  />\n  <ListLayoutNavigation>\n    <Tabs defaultValue=\"tab1\">\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n      </TabsList>\n    </Tabs>\n  </ListLayoutNavigation>\n  <ListLayoutFilters\n    actions={<Button>Create</Button>}\n  >\n    <Input placeholder=\"Search...\" />\n    <Button variant=\"outline\">Filter</Button>\n  </ListLayoutFilters>\n  <ListLayoutContent>\n    {/* Your data table or content here */}\n  </ListLayoutContent>\n  <ListLayoutFooter>\n    {/* Pagination or other footer content */}\n  </ListLayoutFooter>\n</ListLayout>\nStructure\nThe List Layout component is built with composability in mind, allowing you to use only the sections you need:\n\nListLayout: Main container with consistent spacing and responsive behavior\nListLayoutHeader: Page title, description, and action buttons\nListLayoutNavigation: Tab navigation or other navigation elements\nListLayoutFilters: Search, filters, and action buttons\nListLayoutContent: Main content area with scroll handling\nListLayoutFooter: Pagination or other footer content\n\nFeatures\n\nFully Responsive: Adapts to different screen sizes and mobile devices\nConsistent Layout: Maintains spacing and alignment regardless of content\nComposable: Use only the sections you need\nFlexible: Works with any content, not just data tables\nAccessible: Built with accessibility in mind\n\nExamples\nBasic Layout\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Clusters\"\n    description=\"Manage your Redpanda clusters\"\n  />\n  <ListLayoutContent>\n    <div>Your content here</div>\n  </ListLayoutContent>\n</ListLayout>\nWith Filters and Actions\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Group\"\n    description=\"Manage your clusters and networks\"\n    actions={\n      <>\n        <Button variant=\"outline\">Copy ID</Button>\n        <Button>Edit</Button>\n      </>\n    }\n  />\n  <ListLayoutFilters\n    actions={<Button>Create Cluster</Button>}\n  >\n    <Input placeholder=\"Filter clusters...\" />\n    <Button variant=\"outline\">Status</Button>\n    <Button variant=\"outline\">Cloud</Button>\n  </ListLayoutFilters>\n  <ListLayoutContent>\n    <DataTable />\n  </ListLayoutContent>\n</ListLayout>\nWith Navigation Tabs\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Management\"\n    description=\"Manage your resources\"\n  />\n  <ListLayoutNavigation>\n    <Tabs defaultValue=\"clusters\">\n      <TabsList>\n        <TabsTrigger value=\"clusters\">Clusters</TabsTrigger>\n        <TabsTrigger value=\"networks\">Networks</TabsTrigger>\n        <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n      </TabsList>\n    </Tabs>\n  </ListLayoutNavigation>\n  <ListLayoutContent>\n    <TabsContent value=\"clusters\">\n      <ClustersTable />\n    </TabsContent>\n    <TabsContent value=\"networks\">\n      <NetworksTable />\n    </TabsContent>\n  </ListLayoutContent>\n</ListLayout>\nProps\nListLayout\nPropTypeDefaultDescriptionorientation'horizontal' | 'vertical''vertical'Layout orientationclassNamestringAdditional CSS classes\nListLayoutHeader\nPropTypeDefaultDescriptiontitlestringPage titledescriptionstringPage descriptionactionsReactNodeAction buttonsclassNamestringAdditional CSS classes\nListLayoutFilters\nPropTypeDefaultDescriptionactionsReactNodeAction buttonsclassNamestringAdditional CSS classes\nListLayoutContent\nPropTypeDefaultDescriptionclassNamestringAdditional CSS classes\nListLayoutFooter\nPropTypeDefaultDescriptionclassNamestringAdditional CSS classes\nDesign Principles\n\nConsistency: All layouts follow the same structure and spacing\nResponsiveness: Works seamlessly across all device sizes\nFlexibility: Can accommodate different content types and structures\nAccessibility: Built with semantic HTML and ARIA attributes\nPerformance: Optimized for large datasets and smooth scrolling\nBuilt by malinskibeniamin. The source code is available on GitHub.",
      "markdown": "# List Layout\n\nA composable, responsive layout component for list views with header, filters, content, and footer sections.\n\nMade by [malinskibeniamin](https://github.com/malinskibeniamin)\n\n[Edit on GitHub](https://github.com/redpanda-ui/blob/main/content/docs/list-layout.mdx)\n\nPreview\n\nCode\n\n[Open in v0](https://v0.dev/chat/api/open?url=https://redpanda-ui-registry.netlify.app/r/list-layout-demo.json)\n\nLoading component...\n\n## When to use\n\nThe List Layout component provides a structured layout system for list views, dashboards, and data management interfaces. Use this decision tree to determine when it's appropriate:\n\n## Installation\n\nCLI\n\n## Usage\n\n```\nimport {\n  ListLayout,\n  ListLayoutHeader,\n  ListLayoutNavigation,\n  ListLayoutFilters,\n  ListLayoutContent,\n  ListLayoutFooter,\n} from \"@/components/ui/list-layout\"\n```\n\n```\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Name\"\n    description=\"Description of the resource or page\"\n    actions={<Button>Action</Button>}\n  />\n  <ListLayoutNavigation>\n    <Tabs defaultValue=\"tab1\">\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n      </TabsList>\n    </Tabs>\n  </ListLayoutNavigation>\n  <ListLayoutFilters\n    actions={<Button>Create</Button>}\n  >\n    <Input placeholder=\"Search...\" />\n    <Button variant=\"outline\">Filter</Button>\n  </ListLayoutFilters>\n  <ListLayoutContent>\n    {/* Your data table or content here */}\n  </ListLayoutContent>\n  <ListLayoutFooter>\n    {/* Pagination or other footer content */}\n  </ListLayoutFooter>\n</ListLayout>\n```\n\n## Structure\n\nThe List Layout component is built with composability in mind, allowing you to use only the sections you need:\n\n*   **ListLayout**: Main container with consistent spacing and responsive behavior\n*   **ListLayoutHeader**: Page title, description, and action buttons\n*   **ListLayoutNavigation**: Tab navigation or other navigation elements\n*   **ListLayoutFilters**: Search, filters, and action buttons\n*   **ListLayoutContent**: Main content area with scroll handling\n*   **ListLayoutFooter**: Pagination or other footer content\n\n## Features\n\n*   **Fully Responsive**: Adapts to different screen sizes and mobile devices\n*   **Consistent Layout**: Maintains spacing and alignment regardless of content\n*   **Composable**: Use only the sections you need\n*   **Flexible**: Works with any content, not just data tables\n*   **Accessible**: Built with accessibility in mind\n\n## Examples\n\n### Basic Layout\n\n```\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Clusters\"\n    description=\"Manage your Redpanda clusters\"\n  />\n  <ListLayoutContent>\n    <div>Your content here</div>\n  </ListLayoutContent>\n</ListLayout>\n```\n\n### With Filters and Actions\n\n```\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Group\"\n    description=\"Manage your clusters and networks\"\n    actions={\n      <>\n        <Button variant=\"outline\">Copy ID</Button>\n        <Button>Edit</Button>\n      </>\n    }\n  />\n  <ListLayoutFilters\n    actions={<Button>Create Cluster</Button>}\n  >\n    <Input placeholder=\"Filter clusters...\" />\n    <Button variant=\"outline\">Status</Button>\n    <Button variant=\"outline\">Cloud</Button>\n  </ListLayoutFilters>\n  <ListLayoutContent>\n    <DataTable />\n  </ListLayoutContent>\n</ListLayout>\n```\n\n### With Navigation Tabs\n\n```\n<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Management\"\n    description=\"Manage your resources\"\n  />\n  <ListLayoutNavigation>\n    <Tabs defaultValue=\"clusters\">\n      <TabsList>\n        <TabsTrigger value=\"clusters\">Clusters</TabsTrigger>\n        <TabsTrigger value=\"networks\">Networks</TabsTrigger>\n        <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n      </TabsList>\n    </Tabs>\n  </ListLayoutNavigation>\n  <ListLayoutContent>\n    <TabsContent value=\"clusters\">\n      <ClustersTable />\n    </TabsContent>\n    <TabsContent value=\"networks\">\n      <NetworksTable />\n    </TabsContent>\n  </ListLayoutContent>\n</ListLayout>\n```\n\n## Props\n\n### ListLayout\n\nProp\n\nType\n\nDefault\n\nDescription\n\n`orientation`\n\n`'horizontal' | 'vertical'`\n\n`'vertical'`\n\nLayout orientation\n\n`className`\n\n`string`\n\nAdditional CSS classes\n\n### ListLayoutHeader\n\nProp\n\nType\n\nDefault\n\nDescription\n\n`title`\n\n`string`\n\nPage title\n\n`description`\n\n`string`\n\nPage description\n\n`actions`\n\n`ReactNode`\n\nAction buttons\n\n`className`\n\n`string`\n\nAdditional CSS classes\n\n### ListLayoutFilters\n\nProp\n\nType\n\nDefault\n\nDescription\n\n`actions`\n\n`ReactNode`\n\nAction buttons\n\n`className`\n\n`string`\n\nAdditional CSS classes\n\n### ListLayoutContent\n\nProp\n\nType\n\nDefault\n\nDescription\n\n`className`\n\n`string`\n\nAdditional CSS classes\n\n### ListLayoutFooter\n\nProp\n\nType\n\nDefault\n\nDescription\n\n`className`\n\n`string`\n\nAdditional CSS classes\n\n## Design Principles\n\n*   **Consistency**: All layouts follow the same structure and spacing\n*   **Responsiveness**: Works seamlessly across all device sizes\n*   **Flexibility**: Can accommodate different content types and structures\n*   **Accessibility**: Built with semantic HTML and ARIA attributes\n*   **Performance**: Optimized for large datasets and smooth scrolling\n\nBuilt by [malinskibeniamin](https://github.com/malinskibeniamin). The source code is available on [GitHub](https://github.com/redpanda-data/ui-registry).",
      "lastUpdated": "2025-08-26T23:10:22.508Z",
      "componentName": "list-layout",
      "demoCode": "<ListLayout>\n  <ListLayoutHeader\n    title=\"Resource Name\"\n    description=\"Description of the resource or page\"\n    actions={<Button>Action</Button>}\n  />\n  <ListLayoutNavigation>\n    <Tabs defaultValue=\"tab1\">\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n      </TabsList>\n    </Tabs>\n  </ListLayoutNavigation>\n  <ListLayoutFilters\n    actions={<Button>Create</Button>}\n  >\n    <Input placeholder=\"Search...\" />\n    <Button variant=\"outline\">Filter</Button>\n  </ListLayoutFilters>\n  <ListLayoutContent>\n    {/* Your data table or content here */}\n  </ListLayoutContent>\n  <ListLayoutFooter>\n    {/* Pagination or other footer content */}\n  </ListLayoutFooter>\n</ListLayout>",
      "metadata": {
        "description": "A composable, responsive layout component for list views with header, filters, content, and footer sections."
      },
      "isComponent": true,
      "isBlock": false
    }
  ],
  "lastIndexed": "2025-08-26T23:10:22.919Z",
  "version": "1.0.0"
}